{"version":3,"sources":["../../../../../usr/local/lib/node_modules/canvas-sketch-cli/node_modules/browser-pack/_prelude.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/object-assign/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/right-now/browser.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-promise/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-dom/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/util.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/repeat-string/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/keys.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/is_arguments.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/dateformat/lib/dateformat.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/pad-left/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/save.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/accessibility.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/paper-sizes.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/defined/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/convert-length/convert-length.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/distances.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/resizeCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/get-canvas-context/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/createCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/SketchManager.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/keyboardShortcuts.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/canvas-sketch.js","node_modules/three/build/three.js","node_modules/three/examples/js/controls/OrbitControls.js","sketch.js","canvas-sketch-cli/injected/storage-key.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","objectAssign","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","join","test3","split","forEach","letter","keys","err","shouldUseNative","target","source","from","symbols","to","val","TypeError","toObject","s","arguments","key","browser","commonjsGlobal","performance","now","Date","isPromise_1","obj","then","isDom","window","Node","nodeType","nodeName","getClientAPI","defined","arguments$1","isBrowser","document","cache","shim","push","supportsArgumentsClass","toString","supported","object","unsupported","pSlice","Array","slice","deepEqual","actual","expected","opts","getTime","strict","b","isUndefinedOrNull","is_arguments","isBuffer","ka","kb","sort","objEquiv","value","x","copy","global","token","timezone","timezoneClip","dateFormat","date","mask","utc","gmt","undefined","isArray","toLowerCase","test","isNaN","maskSlice","masks","_","d","D","m","y","H","M","L","getTimezoneOffset","W","targetThursday","getFullYear","getMonth","getDate","setDate","getDay","firstThursday","ds","setHours","getHours","Math","floor","getWeek","N","dow","getDayOfWeek","flags","dd","pad","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","round","timeNames","tt","T","TT","Z","match","pop","replace","abs","S","len","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","expiresHeaderFormat","res","repeatString","str","num","max","substr","link","padLeft","ch","noop","defaultExts","extension","prefix","suffix","supportedEncodings","stream","isStart","Promise","resolve","reject","filename","resolveFilename","frame","func","client","output","ev","saveDataURL","dataURL","splitIndex","indexOf","base64","byteString","atob","type","mimeMatch","exec","mime","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","createBlobFromDataURL","blob","saveBlob","createElement","style","visibility","download","href","URL","createObjectURL","body","appendChild","onclick","setTimeout","revokeObjectURL","parentElement","removeChild","removeAttribute","click","opt","file","totalFrames","layerStr","isFinite","totalLayers","layer","filter","Boolean","name","timeStamp","hash","commonTypos","dimension","animated","animating","unit","P5","pixellated","looping","pixelPerInch","allKeys","checkSettings","settings","console","warn","includes","paperSizes","reduce","dict","preset","item","units","dimensions","defined$1","conversions","system","factor","cm","pt","pc","in","ft","anchors","metric","ratio","imperial","convertLength","fromUnit","toUnit","pixelsPerInch","precision","roundPixel","toFactor","fromFactor","isToPixel","fromUnitData","toUnitData","anchor","result","decimals","Number","convertDistance$1","unitsFrom","unitsTo","resizeCanvas","props","width","height","styleWidth","styleHeight","canvasWidth","canvasHeight","hasDimensions","checkIfHasDimensions","exporting","scaleToFit","scaleToView","pixelRatio","exportPixelRatio","bleed","devicePixelRatio","basePixelRatio","maxPixelRatio","min","trimWidth","trimHeight","ref","element","parent","innerWidth","innerHeight","getBoundingClientRect","getParentSize","parentWidth","parentHeight","getDimensionsFromPreset","highest","lowest","orientation","landscape","realWidth","realHeight","aspect","windowAspect","scaleToFitPadding","maxWidth","maxHeight","getCanvasContext_1","canvas","gl","attribs","names","getContext","createCanvas","context","ownsCanvas","newCanvas","createCanvasElement","attributes","pixelated","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","SketchManager","_settings","_props","_sketch","_raf","_recordTimeout","_lastRedrawResult","_isP5Resizing","_keyboardShortcuts","handler","enabled","keyCode","altKey","metaKey","ctrlKey","togglePlay","preventDefault","commit","save","addEventListener","removeEventListener","keyboardShortcuts","this$1","hotkeys","shiftKey","recording","endRecord","run","record","exportFrame","playing","pause","play","_animateHandler","animate","_resizeHandler","resize","render","sketch","get","this","_computePlayhead","currentTime","duration","_computeFrame","playhead","time","fps","_computeCurrentFrame","_getSizeProps","viewportWidth","viewportHeight","dispose","started","_signalBegin","tick","_cancelTimeouts","cancelAnimationFrame","_lastTime","requestAnimationFrame","error","stop","deltaTime","exportOpts","_createExportOptions","frameInterval","log","_signalEnd","beginRecord","_wrapContextScale","catch","response","begin","end","wasRecording","sequence","encoding","encodingQuality","dateformat","all","preExport","commitOpts","_doExportFrame","drawResult","concat","hasDataObject","data","toDataURL","exportCanvas","layerList","curOpt","saveParam","k","savePromise","parts","saveFile","saveResult","savedEvents","eventWithOutput","find","outputName","isClient","some","isStreaming","ofSeq","postExport","cb","_preRender","_postRender","p5","scale","scaleX","scaleY","scaleContext","restore","flush","redraw","submitDrawCall","update","notYetSupported","oldCanvas","oldContext","timeOpts","timeProps","getTimeProps","_setupGLKey","_appendCanvasIfNeeded","draw","oldSizes","newProps","pixelDensity","styleCanvas","newSizes","changed","deepEqual_1","_sizeChanged","frameIntervalMS","deltaTimeMS","hasDuration","isNewFrame","playbackRate","newTime","timeScale","isFinished","isLoopStart","loop","lastFrame","dispatch","mount","unmount","detach","ctx","clear","clearColor","bufferData","hasTotalFrames","totalFramesFromDuration","durationFromTotalFrames","Infinity","startTime","startFrame","hasStartTime","hasStartFrame","setup","loadAndRun","canvasSketch","newSettings","load","unload","destroy","createSketch","preload","P5Constructor","p5Sketch","isGL","renderer","WEBGL","P2D","noLoop","setAttributes","_renderer","drawingContext","loader","attach","message","CACHE","runtimeCollisions","hotID","isHot","hot","id","isInjecting","previousData","cacheGet","next","oldManager","manager","PaperSizes","factory","EPSILON","pow","isInteger","sign","Function","defineProperty","index","nextKey","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","EventDispatcher","listener","_listeners","listeners","hasEventListener","listenerArray","splice","dispatchEvent","event","array","_lut","_seed","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","Vector2","prototypeAccessors","configurable","setScalar","scalar","setX","setY","setComponent","getComponent","clone","constructor","v","add","w","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","defineProperties","_canvas","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","getInverse","matrix","throwOnDegenerate","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","rotate","theta","translate","ImageUtils","getDataURL","image","src","HTMLCanvasElement","createElementNS","ImageData","putImageData","drawImage","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","uuid","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","transformUv","uv","Vector4","z","prototypeAccessors$1","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","zz","xy","xz","yz","getZ","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_z","_w","prototypeAccessors$2","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","s$1","s$2","s$3","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","Vector3","multiplyVectors","applyEuler","applyQuaternion","_quaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","Box3","satForAxes","axes","v0","extents","j","_testAxis","p0","p1","p2","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","count","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$1","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0","_v1","_v2","_f0","_f1","_f2","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","_box$1","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","makeBasis","extractRotation","_v1$1","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ce$1","cf$1","de$1","df$1","ae$1","af$1","be$1","bf$1","ac","ad","bc","bd","ac$1","ad$1","bc$1","bd$1","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","isVector3","t14","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","_m1","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","Euler","DefaultOrder","prototypeAccessors$3","asin","setFromQuaternion","_matrix","setFromVector3","reorder","newOrder","_quaternion$1","toVector3","optionalResult","RotationOrders","Layers","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$2","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","remove","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","JSON","stringify","isInstancedMesh","instanceMatrix","isMesh","isLine","isPoints","parameters","material","uuids","i$1","l$1","i$2","extractFromCache","shapes$1","values","recursive","parse","_vector1","_vector2","_normalMatrix","Plane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","isColor","setHex","setStyle","hex","setHSL","handleAlpha","string","parseFloat","color","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","normalized","NAMES","Face3","materialIndex","vertexNormals","vertexColors","il$1","materialId","Material","fog","blending","side","flatShading","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","customProgramCacheKey","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","_vector2$1","BufferAttribute","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","DirectGeometry","vertices","normals","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","vertexUvs$1","morphTarget","j$1","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","attribute$1","attribute$2","attribute$3","lineDistancesNeedUpdate","attribute$4","lineDistance","fromDirectGeometry","morphAttributesPosition","isGLBufferAttribute","il$2","morphAttribute$1","jl","computeFaceNormals","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","vA","vB","vC","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","indices","array2","geometry2","newAttribute","name$1","morphArray","morphAttribute","newAttribute$1","key$1","attributeData","hasMorphAttributes","key$2","attributeArray","attributeData$1","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","isSkinnedMesh","boneTransform","intersection","morphTargetDictionary","ml","intersects","groupMaterial","faceIndex","a$1","b$1","c$1","group$1","groupMaterial$1","jl$1","i$3","il$3","isMultiMaterial","fl","faceMaterial","fvA","fvB","fvC","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","fromBufferGeometry","BoxBufferGeometry","mergeVertices","scope","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy$1","ix$1","cloneUniforms","property","isMatrix3","isMatrix4","isVector2","isVector4","mergeUniforms","uniforms","merged","addFace","areaWeighted","vl","f$1","fl$1","face$1","v$1","vl$1","f$2","fl$2","face$2","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","vertexNormals$1","f$3","fl$3","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceVertexNormals","faceVertexColors","faceCopy","faceVertexUvs2","j$2","jl$2","uvsCopy","kl","mergeMesh","mesh","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","uvs1","vertex","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","i$4","il$4","i$5","il$5","j$3","jl$3","srcVertexNormal","destVertexNormal","j$4","jl$4","i$6","il$6","i$7","il$7","i$8","il$8","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","Camera","PerspectiveCamera","fov","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","stencil","WebGLCubeRenderTarget","dummy","isWebGLCubeRenderTargetTexture","DataTexture","fromEquirectangularTexture","shader","tEquirect","currentMinFilter","isDataTexture","_sphere$1","_vector$5","Frustum","p4","planes","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmissionmap_fragment","transmissionmap_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","state","objects","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","isScene","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","reset","resetDefaultState","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","isInstancedBufferAttribute","buffer$1","type$1","instanceColor","buffer$2","type$2","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","has","currentRenderList","getRenderList","currentRenderState","getRenderState","setRenderList","setRenderState","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","buffergeometry","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphInfluencesSum","influence$1","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transmission","transmissionMap","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","subscript","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","generateExtensions","customDefines","chunks","generateDefines","createProgram","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","deleteShader","getActiveAttrib","getAttribLocation","fetchAttributeLocations","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","isMeshStandardMaterial","environment","bones","skeleton","nVertexMatrices","getMaxBones","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","finish","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","list","cameras","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","uniforms$1","penumbra","shadow$1","shadowUniforms$1","isRectAreaLight","uniforms$2","isPointLight","uniforms$3","shadow$2","shadowUniforms$2","isHemisphereLight","uniforms$4","LTC_1","LTC_2","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","depthMaterial$1","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","activeTexture","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","onTextureDispose","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","mipmapImage","setTextureCubeDynamic","wrappingToGL","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","samples$1","glInternalFormat$1","samples$2","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","createFramebuffer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","Group","WebXRController","_targetRay","_grip","_hand","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","disconnect","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","updateInputSources","inputSources","removed","added","inputSource$1","controller$1","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","getContextAttributes","xrCompatible","makeXRCompatible","baseLayer","XRWebGLLayer","antialias","updateRenderState","requestReferenceSpace","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","transform","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","domElement","sortObjects","toneMappingExposure","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","initGLContext","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","material2","initMaterial","renderObjects","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","lightsStateVersion","programCacheKey","programChange","needsLights","materialNeedsLights","progUniforms","uniformsList","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","projectObject","isGroup","isLOD","geometry$1","material$1","opaqueObjects","transparentObjects","_webglFramebuffer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","joints","inputState","pinching","XRHand","LITTLE_PHALANX_TIP","joint","inputPose","gripPose","handPose","targetRay","grip","hand","jointPose","getJointPose","jointRadius","indexTip","INDEX_PHALANX_TIP","thumbTip","THUMB_PHALANX_TIP","distanceToPinch","handedness","getPose","targetRaySpace","gripSpace","FogExp2","Fog","Scene","InterleavedBuffer","isInterleavedBuffer","arrayBuffers","_uuid","ib","_geometry","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","basePosition","skinIndex","skinWeight","_v1$4","_v2$2","LOD","_currentLevel","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getCurrentLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","weight","boneIndex","boneInverses","_offsetMatrix","_identityMatrix","Skeleton","Bone","bone","bone$1","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","setColorAt","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","lineDistances$1","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distance$1","nbVertices","distance$2","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","edge","edges","edge1","edge2","vertex$1","ol","edge1$1","edge2$1","key$3","e$1","position$1","l$2","ParametricGeometry","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","shape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","hl","ahole","h$1","hl$1","scalePt2","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","h$2","hl$2","ahole$2","k$1","bs$1","vert","h$3","hl$3","ahole$3","vert$1","bs","vert$2","vert$3","t$1","z$1","bs$2","vert$4","h$4","hl$4","ahole$4","vert$5","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","face$3","buildLidFaces","buildSideFaces","indexA","indexB","indexC","b_x","b_y","c_x","c_y","indexD","a_x","a_y","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","radiusStep","segment","thetaSegmentLevel","segment$1","LatheGeometry","segments","LatheBufferGeometry","inverseSegments","base","n1","n2","base$1","ShapeGeometry","ShapeBufferGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","l$3","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","x$1","cosTheta","sinTheta","x$2","slope","indexRow","y$1","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","__proto__","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","endFrame","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex$1","interpolant","startIndex$2","endIndex$2","evaluate","resultBuffer","numTimes","valueStart","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","parseKeyframeTrack","json","trackType","typeName","getTrackTypeForValueTypeName","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","giveUpAt$1","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","readOffset$1","writeOffset$1","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","m$1","animationKey","boneName","Cache","files","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","DefaultLoadingManager","Loader","crossOrigin","resourcePath","requestHeader","loadAsync","setCrossOrigin","setPath","setResourcePath","setRequestHeader","loading","FileLoader","AnimationLoader","CompressedTextureLoader","ImageLoader","CubeTextureLoader","DataTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","responseType","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","callback$1","withCredentials","overrideMimeType","send","setResponseType","setWithCredentials","setMimeType","loaded","loadTexture","texDatas","mipmapCount","isCubemap","onImageLoad","onImageError","urls","texData","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","theta$1","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","SphericalHarmonics3","LightProbe","MaterialLoader","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","TYPED_ARRAYS","typedArray","bufferAttribute","typedArray$1","bufferAttribute$1","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","geometryShapes","bufferGeometryLoader","details","loadImage","currentUrl","path$1","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","child","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","isImageBitmapLoader","setOptions","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sIdx$1","sLen$1","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","Clock","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loopStart","loopEnd","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","accumulateAdditive","weightAdditive","saveOriginalState","originalValueOffset","getValue","restoreOriginalState","startIndex","endIndex","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","bindings","unbind","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCachedIndex","firstActiveObject","uncache","lastObject","lastIndex$1","lastObject$1","bindingsForPath$1","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","_root","_initMemoryManager","_accuIndex","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","Raycaster","PointCloud","ascSort","intersectObject","setType","setItemSize","setCount","setFromCamera","coords","intersectObjects","Spherical","other","makeSafe","setFromCartesianCoords","Cylindrical","_vector$7","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","_vector$8","SpotLightHelper","cone","coneLength","coneWidth","_vector$9","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","isSkeletonHelper","PointLightHelper","sphereSize","_vector$a","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","color$1","_v1$5","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$b","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","ENCODINGS","_flatCamera","_lodPlanes","_sizeLods","_sigmas","lod","sizeLod","sigma","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","_createPlanes","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","weights","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","_compileMaterial","_isLDR","_createRenderTarget","cubeUVRenderTarget","_setViewport","_getEquirectShader","_getCubemapShader","ClosedSplineCurve3","SplineCurve3","Spline","fromScene","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","cubemap","compileCubemapShader","compileEquirectangularShader","outputTarget","_textureToCubeUV","tmpMesh","cubeCamera","upSign","forwardSign","maxComponent","fExp","log2","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","transparency","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","revision","AdditiveAnimationBlendMode","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","GLSL1","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","LoopRepeat","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroCurvatureEnding","ZeroSlopeEnding","ZeroStencilOp","define","amd","globalThis","self","THREE","OrbitControls","quat","quatInverse","lastPosition","lastQuaternion","twoPI","minDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","UP","BOTTOM","mouseButtons","touches","ONE","TWO","target0","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","saveState","changeEvent","STATE","NONE","rotateLeft","sphericalDelta","panOffset","zoomChanged","EPS","onContextMenu","onPointerDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","ownerDocument","onPointerMove","onPointerUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","targetDistance","clientHeight","clientWidth","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","handleTouchMoveRotate","handleTouchMovePan","handleTouchMoveDolly","pointerType","mouseAction","button","handleMouseDownDolly","onMouseDown","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","onMouseUp","stopPropagation","handleMouseWheel","handleKeyDown","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","tabIndex","MapControls","controls","textureEarth","moonTexture","sunTexture","marsTexture","jupiterTexture","milkywayTexture","earthMaterial","earthGroup","moonMaterial","moonGroup","sunMaterial","marsMaterial","marsGroup","jupiterMaterial","jupiterGroup","earthMesh","moonMesh","marsMesh","jupiterMesh","sunMesh","[object Object]","CANVAS_SKETCH_DEFAULT_STORAGE_KEY","location"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","module.exports = isNode\n\nfunction isNode (val) {\n  return (!val || typeof val !== 'object')\n    ? false\n    : (typeof window === 'object' && typeof window.Node === 'object')\n      ? (val instanceof window.Node)\n      : (typeof val.nodeType === 'number') &&\n        (typeof val.nodeName === 'string')\n}\n","// TODO: We can remove a huge chunk of bundle size by using a smaller\n// utility module for converting units.\nimport isDOM from 'is-dom';\n\nexport function getClientAPI () {\n  return typeof window !== 'undefined' && window['canvas-sketch-cli'];\n}\n\nexport function defined () {\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i] != null) {\n      return arguments[i];\n    }\n  }\n  return undefined;\n}\n\nexport function isBrowser () {\n  return typeof document !== 'undefined';\n}\n\nexport function isWebGLContext (ctx) {\n  return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';\n}\n\nexport function isCanvas (element) {\n  return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';\n}\n","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\n(function(global) {\n  'use strict';\n\n  var dateFormat = (function() {\n      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n      var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n      var timezoneClip = /[^-+\\dA-Z]/g;\n  \n      // Regexes and supporting functions are cached through closure\n      return function (date, mask, utc, gmt) {\n  \n        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n        if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n          mask = date;\n          date = undefined;\n        }\n  \n        date = date || new Date;\n  \n        if(!(date instanceof Date)) {\n          date = new Date(date);\n        }\n  \n        if (isNaN(date)) {\n          throw TypeError('Invalid date');\n        }\n  \n        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);\n  \n        // Allow setting the utc/gmt argument via the mask\n        var maskSlice = mask.slice(0, 4);\n        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n          mask = mask.slice(4);\n          utc = true;\n          if (maskSlice === 'GMT:') {\n            gmt = true;\n          }\n        }\n  \n        var _ = utc ? 'getUTC' : 'get';\n        var d = date[_ + 'Date']();\n        var D = date[_ + 'Day']();\n        var m = date[_ + 'Month']();\n        var y = date[_ + 'FullYear']();\n        var H = date[_ + 'Hours']();\n        var M = date[_ + 'Minutes']();\n        var s = date[_ + 'Seconds']();\n        var L = date[_ + 'Milliseconds']();\n        var o = utc ? 0 : date.getTimezoneOffset();\n        var W = getWeek(date);\n        var N = getDayOfWeek(date);\n        var flags = {\n          d:    d,\n          dd:   pad(d),\n          ddd:  dateFormat.i18n.dayNames[D],\n          dddd: dateFormat.i18n.dayNames[D + 7],\n          m:    m + 1,\n          mm:   pad(m + 1),\n          mmm:  dateFormat.i18n.monthNames[m],\n          mmmm: dateFormat.i18n.monthNames[m + 12],\n          yy:   String(y).slice(2),\n          yyyy: y,\n          h:    H % 12 || 12,\n          hh:   pad(H % 12 || 12),\n          H:    H,\n          HH:   pad(H),\n          M:    M,\n          MM:   pad(M),\n          s:    s,\n          ss:   pad(s),\n          l:    pad(L, 3),\n          L:    pad(Math.round(L / 10)),\n          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n          W:    W,\n          N:    N\n        };\n  \n        return mask.replace(token, function (match) {\n          if (match in flags) {\n            return flags[match];\n          }\n          return match.slice(1, match.length - 1);\n        });\n      };\n    })();\n\n  dateFormat.masks = {\n    'default':               'ddd mmm dd yyyy HH:MM:ss',\n    'shortDate':             'm/d/yy',\n    'mediumDate':            'mmm d, yyyy',\n    'longDate':              'mmmm d, yyyy',\n    'fullDate':              'dddd, mmmm d, yyyy',\n    'shortTime':             'h:MM TT',\n    'mediumTime':            'h:MM:ss TT',\n    'longTime':              'h:MM:ss TT Z',\n    'isoDate':               'yyyy-mm-dd',\n    'isoTime':               'HH:MM:ss',\n    'isoDateTime':           'yyyy-mm-dd\\'T\\'HH:MM:sso',\n    'isoUtcDateTime':        'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'\n  };\n\n  // Internationalization strings\n  dateFormat.i18n = {\n    dayNames: [\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ],\n    monthNames: [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n    ],\n    timeNames: [\n      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'\n    ]\n  };\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n/**\n * Get the ISO 8601 week number\n * Based on comments from\n * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n *\n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getWeek(date) {\n  // Remove time components of date\n  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  // Change date to Thursday same week\n  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);\n\n  // Take January 4th as it is always in week 1 (see ISO 8601)\n  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n\n  // Change date to Thursday same week\n  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);\n\n  // Check if daylight-saving-time-switch occurred and correct for it\n  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n  targetThursday.setHours(targetThursday.getHours() - ds);\n\n  // Number of weeks between target Thursday and first Thursday\n  var weekDiff = (targetThursday - firstThursday) / (86400000*7);\n  return 1 + Math.floor(weekDiff);\n}\n\n/**\n * Get ISO-8601 numeric representation of the day of the week\n * 1 (for Monday) through 7 (for Sunday)\n * \n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getDayOfWeek(date) {\n  var dow = date.getDay();\n  if(dow === 0) {\n    dow = 7;\n  }\n  return dow;\n}\n\n/**\n * kind-of shortcut\n * @param  {*} val\n * @return {String}\n */\nfunction kindOf(val) {\n  if (val === null) {\n    return 'null';\n  }\n\n  if (val === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof val !== 'object') {\n    return typeof val;\n  }\n\n  if (Array.isArray(val)) {\n    return 'array';\n  }\n\n  return {}.toString.call(val)\n    .slice(8, -1).toLowerCase();\n};\n\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dateFormat;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = dateFormat;\n  } else {\n    global.dateFormat = dateFormat;\n  }\n})(this);\n","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  str = str.toString();\n\n  if (typeof num === 'undefined') {\n    return str;\n  }\n\n  if (ch === 0) {\n    ch = '0';\n  } else if (ch) {\n    ch = ch.toString();\n  } else {\n    ch = ' ';\n  }\n\n  return repeat(ch, num - str.length) + str;\n};\n","import dateformat from 'dateformat';\nimport assign from 'object-assign';\nimport padLeft from 'pad-left';\nimport { getClientAPI } from './util';\n\nconst noop = () => {};\nlet link;\nlet defaultExts = { extension: '', prefix: '', suffix: '' };\n\n// Alternative solution for saving files,\n// a bit slower and does not work in Safari\n// function fetchBlobFromDataURL (dataURL) {\n//   return window.fetch(dataURL).then(res => res.blob());\n// }\n\nconst supportedEncodings = [\n  'image/png',\n  'image/jpeg',\n  'image/webp'\n];\n\nfunction stream (isStart, opts = {}) {\n  return new Promise((resolve, reject) => {\n    opts = assign({}, defaultExts, opts);\n    const filename = resolveFilename(Object.assign({}, opts, {\n      extension: '',\n      frame: undefined\n    }));\n    const func = isStart ? 'streamStart' : 'streamEnd';\n    const client = getClientAPI();\n    if (client && client.output && typeof client[func] === 'function') {\n      return client[func](assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      return resolve({ filename, client: false });\n    }\n  });\n}\n\nexport function streamStart (opts = {}) {\n  return stream(true, opts);\n}\n\nexport function streamEnd (opts = {}) {\n  return stream(false, opts);\n}\n\nexport function exportCanvas (canvas, opt = {}) {\n  const encoding = opt.encoding || 'image/png';\n  if (!supportedEncodings.includes(encoding)) throw new Error(`Invalid canvas encoding ${encoding}`);\n  let extension = (encoding.split('/')[1] || '').replace(/jpeg/i, 'jpg');\n  if (extension) extension = `.${extension}`.toLowerCase();\n  return {\n    extension,\n    type: encoding,\n    dataURL: canvas.toDataURL(encoding, opt.encodingQuality)\n  };\n}\n\nfunction createBlobFromDataURL (dataURL) {\n  return new Promise((resolve) => {\n    const splitIndex = dataURL.indexOf(',');\n    if (splitIndex === -1) {\n      resolve(new window.Blob());\n      return;\n    }\n    const base64 = dataURL.slice(splitIndex + 1);\n    const byteString = window.atob(base64);\n    const type = dataURL.slice(0, splitIndex);\n    const mimeMatch = /data:([^;]+)/.exec(type);\n    const mime = (mimeMatch ? mimeMatch[1] : '') || undefined;\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    resolve(new window.Blob([ ab ], { type: mime }));\n  });\n}\n\nexport function saveDataURL (dataURL, opts = {}) {\n  return createBlobFromDataURL(dataURL)\n    .then(blob => saveBlob(blob, opts));\n}\n\nexport function saveBlob (blob, opts = {}) {\n  return new Promise(resolve => {\n    opts = assign({}, defaultExts, opts);\n    const filename = opts.filename;\n\n    const client = getClientAPI();\n    if (client && typeof client.saveBlob === 'function' && client.output) {\n      // native saving using a CLI tool\n      return client.saveBlob(blob, assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      // force download\n      if (!link) {\n        link = document.createElement('a');\n        link.style.visibility = 'hidden';\n        link.target = '_blank';\n      }\n      link.download = filename;\n      link.href = window.URL.createObjectURL(blob);\n      document.body.appendChild(link);\n      link.onclick = () => {\n        link.onclick = noop;\n        setTimeout(() => {\n          window.URL.revokeObjectURL(blob);\n          if (link.parentElement) link.parentElement.removeChild(link);\n          link.removeAttribute('href');\n          resolve({ filename, client: false });\n        });\n      };\n      link.click();\n    }\n  });\n}\n\nexport function saveFile (data, opts = {}) {\n  const parts = Array.isArray(data) ? data : [ data ];\n  const blob = new window.Blob(parts, { type: opts.type || '' });\n  return saveBlob(blob, opts);\n}\n\nexport function getTimeStamp () {\n  const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  return dateformat(new Date(), dateFormatStr);\n}\n\nexport function getDefaultFile (prefix = '', suffix = '', ext) {\n  // const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  const dateFormatStr = `yyyy-mm-dd 'at' h.MM.ss TT`;\n  return `${prefix}${dateformat(new Date(), dateFormatStr)}${suffix}${ext}`;\n}\n\nexport function resolveFilename (opt = {}) {\n  opt = assign({}, opt);\n\n  // Custom filename function\n  if (typeof opt.file === 'function') {\n    return opt.file(opt);\n  } else if (opt.file) {\n    return opt.file;\n  }\n\n  let frame = null;\n  let extension = '';\n  if (typeof opt.extension === 'string') extension = opt.extension;\n\n  if (typeof opt.frame === 'number') {\n    let totalFrames;\n    if (typeof opt.totalFrames === 'number') {\n      totalFrames = opt.totalFrames;\n    } else {\n      totalFrames = Math.max(1000, opt.frame);\n    }\n    frame = padLeft(String(opt.frame), String(totalFrames).length, '0');\n  }\n\n  const layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? `${opt.layer}` : '';\n  if (frame != null) {\n    return [ layerStr, frame ].filter(Boolean).join('-') + extension;\n  } else {\n    const defaultFileName = opt.timeStamp;\n    return [ opt.prefix, opt.name || defaultFileName, layerStr, opt.hash, opt.suffix ].filter(Boolean).join('-') + extension;\n  }\n}\n","// Handle some common typos\nconst commonTypos = {\n  dimension: 'dimensions',\n  animated: 'animate',\n  animating: 'animate',\n  unit: 'units',\n  P5: 'p5',\n  pixellated: 'pixelated',\n  looping: 'loop',\n  pixelPerInch: 'pixels'\n};\n\n// Handle all other typos\nconst allKeys = [\n  'dimensions', 'units', 'pixelsPerInch', 'orientation',\n  'scaleToFit', 'scaleToView', 'bleed', 'pixelRatio',\n  'exportPixelRatio', 'maxPixelRatio', 'scaleContext',\n  'resizeCanvas', 'styleCanvas', 'canvas', 'context', 'attributes',\n  'parent', 'file', 'name', 'prefix', 'suffix', 'animate', 'playing',\n  'loop', 'duration', 'totalFrames', 'fps', 'playbackRate', 'timeScale',\n  'frame', 'time', 'flush', 'pixelated', 'hotkeys', 'p5', 'id',\n  'scaleToFitPadding', 'data', 'params', 'encoding', 'encodingQuality'\n];\n\n// This is fairly opinionated and forces users to use the 'data' parameter\n// if they want to pass along non-setting objects...\nexport const checkSettings = (settings) => {\n  const keys = Object.keys(settings);\n  keys.forEach(key => {\n    if (key in commonTypos) {\n      const actual = commonTypos[key];\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\", did you mean \"${actual}\"?`);\n    } else if (!allKeys.includes(key)) {\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\"`);\n    }\n  });\n};\n","const defaultUnits = 'mm';\n\nconst data = [\n  // Common Paper Sizes\n  // (Mostly North-American based)\n  [ 'postcard', 101.6, 152.4 ],\n  [ 'poster-small', 280, 430 ],\n  [ 'poster', 460, 610 ],\n  [ 'poster-large', 610, 910 ],\n  [ 'business-card', 50.8, 88.9 ],\n\n  // Photographic Print Paper Sizes\n  [ '2r', 64, 89 ],\n  [ '3r', 89, 127 ],\n  [ '4r', 102, 152 ],\n  [ '5r', 127, 178 ], // 5″x7″\n  [ '6r', 152, 203 ], // 6″x8″\n  [ '8r', 203, 254 ], // 8″x10″\n  [ '10r', 254, 305 ], // 10″x12″\n  [ '11r', 279, 356 ], // 11″x14″\n  [ '12r', 305, 381 ],\n\n  // Standard Paper Sizes\n  [ 'a0', 841, 1189 ],\n  [ 'a1', 594, 841 ],\n  [ 'a2', 420, 594 ],\n  [ 'a3', 297, 420 ],\n  [ 'a4', 210, 297 ],\n  [ 'a5', 148, 210 ],\n  [ 'a6', 105, 148 ],\n  [ 'a7', 74, 105 ],\n  [ 'a8', 52, 74 ],\n  [ 'a9', 37, 52 ],\n  [ 'a10', 26, 37 ],\n  [ '2a0', 1189, 1682 ],\n  [ '4a0', 1682, 2378 ],\n  [ 'b0', 1000, 1414 ],\n  [ 'b1', 707, 1000 ],\n  [ 'b1+', 720, 1020 ],\n  [ 'b2', 500, 707 ],\n  [ 'b2+', 520, 720 ],\n  [ 'b3', 353, 500 ],\n  [ 'b4', 250, 353 ],\n  [ 'b5', 176, 250 ],\n  [ 'b6', 125, 176 ],\n  [ 'b7', 88, 125 ],\n  [ 'b8', 62, 88 ],\n  [ 'b9', 44, 62 ],\n  [ 'b10', 31, 44 ],\n  [ 'b11', 22, 32 ],\n  [ 'b12', 16, 22 ],\n  [ 'c0', 917, 1297 ],\n  [ 'c1', 648, 917 ],\n  [ 'c2', 458, 648 ],\n  [ 'c3', 324, 458 ],\n  [ 'c4', 229, 324 ],\n  [ 'c5', 162, 229 ],\n  [ 'c6', 114, 162 ],\n  [ 'c7', 81, 114 ],\n  [ 'c8', 57, 81 ],\n  [ 'c9', 40, 57 ],\n  [ 'c10', 28, 40 ],\n  [ 'c11', 22, 32 ],\n  [ 'c12', 16, 22 ],\n\n  // Use inches for North American sizes,\n  // as it produces less float precision errors\n  [ 'half-letter', 5.5, 8.5, 'in' ],\n  [ 'letter', 8.5, 11, 'in' ],\n  [ 'legal', 8.5, 14, 'in' ],\n  [ 'junior-legal', 5, 8, 'in' ],\n  [ 'ledger', 11, 17, 'in' ],\n  [ 'tabloid', 11, 17, 'in' ],\n  [ 'ansi-a', 8.5, 11.0, 'in' ],\n  [ 'ansi-b', 11.0, 17.0, 'in' ],\n  [ 'ansi-c', 17.0, 22.0, 'in' ],\n  [ 'ansi-d', 22.0, 34.0, 'in' ],\n  [ 'ansi-e', 34.0, 44.0, 'in' ],\n  [ 'arch-a', 9, 12, 'in' ],\n  [ 'arch-b', 12, 18, 'in' ],\n  [ 'arch-c', 18, 24, 'in' ],\n  [ 'arch-d', 24, 36, 'in' ],\n  [ 'arch-e', 36, 48, 'in' ],\n  [ 'arch-e1', 30, 42, 'in' ],\n  [ 'arch-e2', 26, 38, 'in' ],\n  [ 'arch-e3', 27, 39, 'in' ]\n];\n\nexport default data.reduce((dict, preset) => {\n  const item = {\n    units: preset[3] || defaultUnits,\n    dimensions: [ preset[1], preset[2] ]\n  };\n  dict[preset[0]] = item;\n  dict[preset[0].replace(/-/g, ' ')] = item;\n  return dict;\n}, {});\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var defined = require('defined');\nvar units = [ 'mm', 'cm', 'm', 'pc', 'pt', 'in', 'ft', 'px' ];\n\nvar conversions = {\n  // metric\n  m: {\n    system: 'metric',\n    factor: 1\n  },\n  cm: {\n    system: 'metric',\n    factor: 1 / 100\n  },\n  mm: {\n    system: 'metric',\n    factor: 1 / 1000\n  },\n  // imperial\n  pt: {\n    system: 'imperial',\n    factor: 1 / 72\n  },\n  pc: {\n    system: 'imperial',\n    factor: 1 / 6\n  },\n  in: {\n    system: 'imperial',\n    factor: 1\n  },\n  ft: {\n    system: 'imperial',\n    factor: 12\n  }\n};\n\nconst anchors = {\n  metric: {\n    unit: 'm',\n    ratio: 1 / 0.0254\n  },\n  imperial: {\n    unit: 'in',\n    ratio: 0.0254\n  }\n};\n\nfunction round (value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nfunction convertDistance (value, fromUnit, toUnit, opts) {\n  if (typeof value !== 'number' || !isFinite(value)) throw new Error('Value must be a finite number');\n  if (!fromUnit || !toUnit) throw new Error('Must specify from and to units');\n\n  opts = opts || {};\n  var pixelsPerInch = defined(opts.pixelsPerInch, 96);\n  var precision = opts.precision;\n  var roundPixel = opts.roundPixel !== false;\n\n  fromUnit = fromUnit.toLowerCase();\n  toUnit = toUnit.toLowerCase();\n\n  if (units.indexOf(fromUnit) === -1) throw new Error('Invalid from unit \"' + fromUnit + '\", must be one of: ' + units.join(', '));\n  if (units.indexOf(toUnit) === -1) throw new Error('Invalid from unit \"' + toUnit + '\", must be one of: ' + units.join(', '));\n\n  if (fromUnit === toUnit) {\n    // We don't need to convert from A to B since they are the same already\n    return value;\n  }\n\n  var toFactor = 1;\n  var fromFactor = 1;\n  var isToPixel = false;\n\n  if (fromUnit === 'px') {\n    fromFactor = 1 / pixelsPerInch;\n    fromUnit = 'in';\n  }\n  if (toUnit === 'px') {\n    isToPixel = true;\n    toFactor = pixelsPerInch;\n    toUnit = 'in';\n  }\n\n  var fromUnitData = conversions[fromUnit];\n  var toUnitData = conversions[toUnit];\n\n  // source to anchor inside source's system\n  var anchor = value * fromUnitData.factor * fromFactor;\n\n  // if systems differ, convert one to another\n  if (fromUnitData.system !== toUnitData.system) {\n    // regular 'm' to 'in' and so forth\n    anchor *= anchors[fromUnitData.system].ratio;\n  }\n\n  var result = anchor / toUnitData.factor * toFactor;\n  if (isToPixel && roundPixel) {\n    result = Math.round(result);\n  } else if (typeof precision === 'number' && isFinite(precision)) {\n    result = round(result, precision);\n  }\n  return result;\n}\n\nmodule.exports = convertDistance;\nmodule.exports.units = units;\n","import paperSizes from './paper-sizes';\nimport convertLength from 'convert-length';\n\nexport function getDimensionsFromPreset (dimensions, unitsTo = 'px', pixelsPerInch = 72) {\n  if (typeof dimensions === 'string') {\n    const key = dimensions.toLowerCase();\n    if (!(key in paperSizes)) {\n      throw new Error(`The dimension preset \"${dimensions}\" is not supported or could not be found; try using a4, a3, postcard, letter, etc.`)\n    }\n    const preset = paperSizes[key];\n    return preset.dimensions.map(d => {\n      return convertDistance(d, preset.units, unitsTo, pixelsPerInch);\n    });\n  } else {\n    return dimensions;\n  }\n}\n\nexport function convertDistance (dimension, unitsFrom = 'px', unitsTo = 'px', pixelsPerInch = 72) {\n  return convertLength(dimension, unitsFrom, unitsTo, {\n    pixelsPerInch,\n    precision: 4,\n    roundPixel: true\n  });\n}\n","import { getDimensionsFromPreset, convertDistance } from '../distances';\nimport { isBrowser, defined } from '../util';\n\nfunction checkIfHasDimensions (settings) {\n  if (!settings.dimensions) return false;\n  if (typeof settings.dimensions === 'string') return true;\n  if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) return true;\n  return false;\n}\n\nfunction getParentSize (props, settings) {\n  // When no { dimension } is passed in node, we default to HTML canvas size\n  if (!isBrowser()) {\n    return [ 300, 150 ];\n  }\n\n  let element = settings.parent || window;\n\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return [ window.innerWidth, window.innerHeight ];\n  } else {\n    const { width, height } = element.getBoundingClientRect();\n    return [ width, height ];\n  }\n}\n\nexport default function resizeCanvas (props, settings) {\n  let width, height;\n  let styleWidth, styleHeight;\n  let canvasWidth, canvasHeight;\n\n  const browser = isBrowser();\n  const dimensions = settings.dimensions;\n  const hasDimensions = checkIfHasDimensions(settings);\n  const exporting = props.exporting;\n  let scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;\n  let scaleToView = (!exporting && hasDimensions) ? settings.scaleToView : true;\n  // in node, cancel both of these options\n  if (!browser) scaleToFit = scaleToView = false;\n  const units = settings.units;\n  const pixelsPerInch = (typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch)) ? settings.pixelsPerInch : 72;\n  const bleed = defined(settings.bleed, 0);\n\n  const devicePixelRatio = browser ? window.devicePixelRatio : 1;\n  const basePixelRatio = scaleToView ? devicePixelRatio : 1;\n\n  let pixelRatio, exportPixelRatio;\n\n  // If a pixel ratio is specified, we will use it.\n  // Otherwise:\n  //  -> If dimension is specified, use base ratio (i.e. size for export)\n  //  -> If no dimension is specified, use device ratio (i.e. size for screen)\n  if (typeof settings.pixelRatio === 'number' && isFinite(settings.pixelRatio)) {\n    // When { pixelRatio } is specified, it's also used as default exportPixelRatio.\n    pixelRatio = settings.pixelRatio;\n    exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n  } else {\n    if (hasDimensions) {\n      // When a dimension is specified, use the base ratio rather than screen ratio\n      pixelRatio = basePixelRatio;\n      // Default to a pixel ratio of 1 so that you end up with the same dimension\n      // you specified, i.e. [ 500, 500 ] is exported as 500x500 px\n      exportPixelRatio = defined(settings.exportPixelRatio, 1);\n    } else {\n      // No dimension is specified, assume full-screen retina sizing\n      pixelRatio = devicePixelRatio;\n      // Default to screen pixel ratio, so that it's like taking a device screenshot\n      exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n    }\n  }\n\n  // Clamp pixel ratio\n  if (typeof settings.maxPixelRatio === 'number' && isFinite(settings.maxPixelRatio)) {\n    pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);\n  }\n\n  // Handle export pixel ratio\n  if (exporting) {\n    pixelRatio = exportPixelRatio;\n  }\n\n  // parentWidth = typeof parentWidth === 'undefined' ? defaultNodeSize[0] : parentWidth;\n  // parentHeight = typeof parentHeight === 'undefined' ? defaultNodeSize[1] : parentHeight;\n\n  let [ parentWidth, parentHeight ] = getParentSize(props, settings);\n  let trimWidth, trimHeight;\n\n  // You can specify a dimensions in pixels or cm/m/in/etc\n  if (hasDimensions) {\n    const result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);\n    const highest = Math.max(result[0], result[1]);\n    const lowest = Math.min(result[0], result[1]);\n    if (settings.orientation) {\n      const landscape = settings.orientation === 'landscape';\n      width = landscape ? highest : lowest;\n      height = landscape ? lowest : highest;\n    } else {\n      width = result[0];\n      height = result[1];\n    }\n\n    trimWidth = width;\n    trimHeight = height;\n\n    // Apply bleed which is assumed to be in the same units\n    width += bleed * 2;\n    height += bleed * 2;\n  } else {\n    width = parentWidth;\n    height = parentHeight;\n    trimWidth = width;\n    trimHeight = height;\n  }\n\n  // Real size in pixels after PPI is taken into account\n  let realWidth = width;\n  let realHeight = height;\n  if (hasDimensions && units) {\n    // Convert to digital/pixel units if necessary\n    realWidth = convertDistance(width, units, 'px', pixelsPerInch);\n    realHeight = convertDistance(height, units, 'px', pixelsPerInch);\n  }\n\n  // How big to set the 'view' of the canvas in the browser (i.e. style)\n  styleWidth = Math.round(realWidth);\n  styleHeight = Math.round(realHeight);\n\n  // If we wish to scale the view to the browser window\n  if (scaleToFit && !exporting && hasDimensions) {\n    const aspect = width / height;\n    const windowAspect = parentWidth / parentHeight;\n    const scaleToFitPadding = defined(settings.scaleToFitPadding, 40);\n    const maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);\n    const maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);\n    if (styleWidth > maxWidth || styleHeight > maxHeight) {\n      if (windowAspect > aspect) {\n        styleHeight = maxHeight;\n        styleWidth = Math.round(styleHeight * aspect);\n      } else {\n        styleWidth = maxWidth;\n        styleHeight = Math.round(styleWidth / aspect);\n      }\n    }\n  }\n\n  canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(pixelRatio * realWidth);\n  canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(pixelRatio * realHeight);\n\n  const viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);\n  const viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);\n\n  const scaleX = canvasWidth / width;\n  const scaleY = canvasHeight / height;\n\n  // Assign to current props\n  return {\n    bleed,\n    pixelRatio,\n    width,\n    height,\n    dimensions: [ width, height ],\n    units: units || 'px',\n    scaleX,\n    scaleY,\n    pixelsPerInch,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    trimWidth,\n    trimHeight,\n    styleWidth,\n    styleHeight\n  };\n}\n","module.exports = getCanvasContext\nfunction getCanvasContext (type, opts) {\n  if (typeof type !== 'string') {\n    throw new TypeError('must specify type string')\n  }\n\n  opts = opts || {}\n\n  if (typeof document === 'undefined' && !opts.canvas) {\n    return null // check for Node\n  }\n\n  var canvas = opts.canvas || document.createElement('canvas')\n  if (typeof opts.width === 'number') {\n    canvas.width = opts.width\n  }\n  if (typeof opts.height === 'number') {\n    canvas.height = opts.height\n  }\n\n  var attribs = opts\n  var gl\n  try {\n    var names = [ type ]\n    // prefix GL contexts\n    if (type.indexOf('webgl') === 0) {\n      names.push('experimental-' + type)\n    }\n\n    for (var i = 0; i < names.length; i++) {\n      gl = canvas.getContext(names[i], attribs)\n      if (gl) return gl\n    }\n  } catch (e) {\n    gl = null\n  }\n  return (gl || null) // ensure null on fail\n}\n","import assign from 'object-assign';\nimport getCanvasContext from 'get-canvas-context';\nimport { isBrowser } from '../util';\n\nfunction createCanvasElement () {\n  if (!isBrowser()) {\n    throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');\n  }\n  return document.createElement('canvas');\n}\n\nexport default function createCanvas (settings = {}) {\n  let context, canvas;\n  let ownsCanvas = false;\n  if (settings.canvas !== false) {\n    // Determine the canvas and context to create\n    context = settings.context;\n    if (!context || typeof context === 'string') {\n      let newCanvas = settings.canvas;\n      if (!newCanvas) {\n        newCanvas = createCanvasElement();\n        ownsCanvas = true;\n      }\n      const type = context || '2d';\n      if (typeof newCanvas.getContext !== 'function') {\n        throw new Error(`The specified { canvas } element does not have a getContext() function, maybe it is not a <canvas> tag?`);\n      }\n      context = getCanvasContext(type, assign({}, settings.attributes, { canvas: newCanvas }));\n      if (!context) {\n        throw new Error(`Failed at canvas.getContext('${type}') - the browser may not support this context, or a different context may already be in use with this canvas.`);\n      }\n    }\n\n    canvas = context.canvas;\n    // Ensure context matches user's canvas expectations\n    if (settings.canvas && canvas !== settings.canvas) {\n      throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');\n    }\n\n    // Apply pixelation to canvas if necessary, this is mostly a convenience utility\n    if (settings.pixelated) {\n      context.imageSmoothingEnabled = false;\n      context.mozImageSmoothingEnabled = false;\n      context.oImageSmoothingEnabled = false;\n      context.webkitImageSmoothingEnabled = false;\n      context.msImageSmoothingEnabled = false;\n      canvas.style['image-rendering'] = 'pixelated';\n    }\n  }\n  return { canvas, context, ownsCanvas };\n}\n","import assign from 'object-assign';\nimport rightNow from 'right-now';\nimport isPromise from 'is-promise';\nimport { isBrowser, defined, isWebGLContext, isCanvas, getClientAPI } from '../util';\nimport deepEqual from 'deep-equal';\nimport {\n  resolveFilename,\n  saveFile,\n  saveDataURL,\n  getTimeStamp,\n  exportCanvas,\n  streamStart,\n  streamEnd\n} from '../save';\nimport { checkSettings } from '../accessibility';\n\nimport keyboardShortcuts from './keyboardShortcuts';\nimport resizeCanvas from './resizeCanvas';\nimport createCanvas from './createCanvas';\n\nclass SketchManager {\n  constructor () {\n    this._settings = {};\n    this._props = {};\n    this._sketch = undefined;\n    this._raf = null;\n    this._recordTimeout = null;\n\n    // Some hacky things required to get around p5.js structure\n    this._lastRedrawResult = undefined;\n    this._isP5Resizing = false;\n\n    this._keyboardShortcuts = keyboardShortcuts({\n      enabled: () => this.settings.hotkeys !== false,\n      save: (ev) => {\n        if (ev.shiftKey) {\n          if (this.props.recording) {\n            this.endRecord();\n            this.run();\n          } else this.record();\n        } else if (!this.props.recording) {\n          this.exportFrame();\n        }\n      },\n      togglePlay: () => {\n        if (this.props.playing) this.pause();\n        else this.play();\n      },\n      commit: (ev) => {\n        this.exportFrame({ commit: true });\n      }\n    });\n\n    this._animateHandler = () => this.animate();\n\n    this._resizeHandler = () => {\n      const changed = this.resize();\n      // Only re-render when size actually changes\n      if (changed) {\n        this.render();\n      }\n    };\n  }\n\n  get sketch () {\n    return this._sketch;\n  }\n\n  get settings () {\n    return this._settings;\n  }\n\n  get props () {\n    return this._props;\n  }\n\n  _computePlayhead (currentTime, duration) {\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    return hasDuration ? currentTime / duration : 0;\n  }\n\n  _computeFrame (playhead, time, totalFrames, fps) {\n    return (isFinite(totalFrames) && totalFrames > 1)\n      ? Math.floor(playhead * (totalFrames - 1))\n      : Math.floor(fps * time);\n  }\n\n  _computeCurrentFrame () {\n    return this._computeFrame(\n      this.props.playhead, this.props.time,\n      this.props.totalFrames, this.props.fps\n    );\n  }\n\n  _getSizeProps () {\n    const props = this.props;\n    return {\n      width: props.width,\n      height: props.height,\n      pixelRatio: props.pixelRatio,\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      viewportWidth: props.viewportWidth,\n      viewportHeight: props.viewportHeight\n    };\n  }\n\n  run () {\n    if (!this.sketch) throw new Error('should wait until sketch is loaded before trying to play()');\n\n    // Start an animation frame loop if necessary\n    if (this.settings.playing !== false) {\n      this.play();\n    }\n\n    // Let's let this warning hang around for a few versions...\n    if (typeof this.sketch.dispose === 'function') {\n      console.warn('In canvas-sketch@0.0.23 the dispose() event has been renamed to unload()');\n    }\n\n    // In case we aren't playing or animated, make sure we still trigger begin message...\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Render an initial frame\n    this.tick();\n    this.render();\n    return this;\n  }\n\n  _cancelTimeouts () {\n    if (this._raf != null && typeof window !== 'undefined' && typeof window.cancelAnimationFrame === 'function') {\n      window.cancelAnimationFrame(this._raf);\n      this._raf = null;\n    }\n    if (this._recordTimeout != null) {\n      clearTimeout(this._recordTimeout);\n      this._recordTimeout = null;\n    }\n  }\n\n  play () {\n    let animate = this.settings.animate;\n    if ('animation' in this.settings) {\n      animate = true;\n      console.warn('[canvas-sketch] { animation } has been renamed to { animate }');\n    }\n    if (!animate) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');\n      return;\n    }\n    if (this.props.playing) return;\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // console.log('play', this.props.time)\n\n    // Start a render loop\n    this.props.playing = true;\n    this._cancelTimeouts();\n    this._lastTime = rightNow();\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n  }\n\n  pause () {\n    if (this.props.recording) this.endRecord();\n    this.props.playing = false;\n\n    this._cancelTimeouts();\n  }\n\n  togglePlay () {\n    if (this.props.playing) this.pause();\n    else this.play();\n  }\n\n  // Stop and reset to frame zero\n  stop () {\n    this.pause();\n    this.props.frame = 0;\n    this.props.playhead = 0;\n    this.props.time = 0;\n    this.props.deltaTime = 0;\n    this.props.started = false;\n    this.render();\n  }\n\n  record () {\n    if (this.props.recording) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');\n      return;\n    }\n\n    this.stop();\n    this.props.playing = true;\n    this.props.recording = true;\n\n    const exportOpts = this._createExportOptions({ sequence: true });\n\n    const frameInterval = 1 / this.props.fps;\n    // Render each frame in the sequence\n    this._cancelTimeouts();\n    const tick = () => {\n      if (!this.props.recording) return Promise.resolve();\n      this.props.deltaTime = frameInterval;\n      this.tick();\n      return this.exportFrame(exportOpts)\n        .then(() => {\n          if (!this.props.recording) return; // was cancelled before\n          this.props.deltaTime = 0;\n          this.props.frame++;\n          if (this.props.frame < this.props.totalFrames) {\n            this.props.time += frameInterval;\n            this.props.playhead = this._computePlayhead(this.props.time, this.props.duration);\n            this._recordTimeout = setTimeout(tick, 0);\n          } else {\n            console.log('Finished recording');\n            this._signalEnd();\n            this.endRecord();\n            this.stop();\n            this.run();\n          }\n        });\n    };\n\n    // Trigger a start event before we begin recording\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Trigger 'begin record' event\n    if (this.sketch && typeof this.sketch.beginRecord === 'function') {\n      this._wrapContextScale(props => this.sketch.beginRecord(props));\n    }\n\n    // Initiate a streaming start if necessary\n    streamStart(exportOpts)\n      .catch(err => {\n        console.error(err);\n      })\n      .then(response => {\n        this._raf = window.requestAnimationFrame(tick);\n      });\n  }\n\n  _signalBegin () {\n    if (this.sketch && typeof this.sketch.begin === 'function') {\n      this._wrapContextScale(props => this.sketch.begin(props));\n    }\n  }\n\n  _signalEnd () {\n    if (this.sketch && typeof this.sketch.end === 'function') {\n      this._wrapContextScale(props => this.sketch.end(props));\n    }\n  }\n\n  endRecord () {\n    const wasRecording = this.props.recording;\n\n    this._cancelTimeouts();\n    this.props.recording = false;\n    this.props.deltaTime = 0;\n    this.props.playing = false;\n\n    // tell CLI that stream has finished\n    return streamEnd()\n      .catch(err => {\n        console.error(err);\n      })\n      .then(() => {\n        // Trigger 'end record' event\n        if (wasRecording && this.sketch && typeof this.sketch.endRecord === 'function') {\n          this._wrapContextScale(props => this.sketch.endRecord(props));\n        }\n      });\n  }\n\n  _createExportOptions (opt = {}) {\n    return {\n      sequence: opt.sequence,\n      save: opt.save,\n      fps: this.props.fps,\n      frame: opt.sequence ? this.props.frame : undefined,\n      file: this.settings.file,\n      name: this.settings.name,\n      prefix: this.settings.prefix,\n      suffix: this.settings.suffix,\n      encoding: this.settings.encoding,\n      encodingQuality: this.settings.encodingQuality,\n      timeStamp: opt.timeStamp || getTimeStamp(),\n      totalFrames: isFinite(this.props.totalFrames) ? Math.max(0, this.props.totalFrames) : 1000\n    };\n  }\n\n  exportFrame (opt = {}) {\n    if (!this.sketch) return Promise.all([]);\n    if (typeof this.sketch.preExport === 'function') {\n      this.sketch.preExport();\n    }\n\n    // Options for export function\n    let exportOpts = this._createExportOptions(opt);\n\n    const client = getClientAPI();\n    let p = Promise.resolve();\n    if (client && opt.commit && typeof client.commit === 'function') {\n      const commitOpts = assign({}, exportOpts);\n      const hash = client.commit(commitOpts);\n      if (isPromise(hash)) p = hash;\n      else p = Promise.resolve(hash);\n    }\n\n    return p.then(hash => {\n      return this._doExportFrame(assign({}, exportOpts, { hash: hash || '' }));\n    }).then(result => {\n      // Most common usecase is to export a single layer,\n      // so let's optimize the user experience for that.\n      if (result.length === 1) return result[0];\n      else return result;\n    });\n  }\n\n  _doExportFrame (exportOpts = {}) {\n    this._props.exporting = true;\n\n    // Resize to output resolution\n    this.resize();\n\n    // Draw at this output resolution\n    let drawResult = this.render();\n\n    // The self owned canvas (may be undefined...!)\n    const canvas = this.props.canvas;\n\n    // Get list of results from render\n    if (typeof drawResult === 'undefined') {\n      drawResult = [ canvas ];\n    }\n    drawResult = [].concat(drawResult).filter(Boolean);\n\n    // Transform the canvas/file descriptors into a consistent format,\n    // and pull out any data URLs from canvas elements\n    drawResult = drawResult.map(result => {\n      const hasDataObject = typeof result === 'object' && result && ('data' in result || 'dataURL' in result);\n      const data = hasDataObject ? result.data : result;\n      const opts = hasDataObject ? assign({}, result, { data }) : { data };\n      if (isCanvas(data)) {\n        const encoding = opts.encoding || exportOpts.encoding;\n        const encodingQuality = defined(opts.encodingQuality, exportOpts.encodingQuality, 0.95);\n        const { dataURL, extension, type } = exportCanvas(data, { encoding, encodingQuality });\n        return Object.assign(opts, { dataURL, extension, type });\n      } else {\n        return opts;\n      }\n    });\n\n    // Now return to regular rendering mode\n    this._props.exporting = false;\n    this.resize();\n    this.render();\n\n    // And now we can save each result\n    return Promise.all(drawResult.map((result, i, layerList) => {\n      // By default, if rendering multiple layers we will give them indices\n      const curOpt = assign({\n        extension: '',\n        prefix: '',\n        suffix: ''\n      }, exportOpts, result, {\n        layer: i,\n        totalLayers: layerList.length\n      });\n\n      // If export is explicitly not saving, make sure nothing saves\n      // Otherwise default to the layer save option, or fallback to true\n      const saveParam = exportOpts.save === false ? false : result.save;\n      curOpt.save = saveParam !== false;\n\n      // Resolve a full filename from all the options\n      curOpt.filename = resolveFilename(curOpt);\n\n      // Clean up some parameters that may be ambiguous to the user\n      delete curOpt.encoding;\n      delete curOpt.encodingQuality;\n\n      // Clean it up further by just removing undefined values\n      for (let k in curOpt) {\n        if (typeof curOpt[k] === 'undefined') delete curOpt[k];\n      }\n\n      let savePromise = Promise.resolve({});\n      if (curOpt.save) {\n        // Whether to actually save (download) this fragment\n        const data = curOpt.data;\n        if (curOpt.dataURL) {\n          const dataURL = curOpt.dataURL;\n          savePromise = saveDataURL(dataURL, curOpt);\n        } else {\n          savePromise = saveFile(data, curOpt);\n        }\n      }\n      return savePromise.then(saveResult => {\n        return Object.assign({}, curOpt, saveResult);\n      });\n    })).then(ev => {\n      const savedEvents = ev.filter(e => e.save);\n      if (savedEvents.length > 0) {\n        // Log the saved exports\n        const eventWithOutput = savedEvents.find(e => e.outputName);\n        const isClient = savedEvents.some(e => e.client);\n        const isStreaming = savedEvents.some(e => e.stream);\n        let item;\n        // many files, just log how many were exported\n        if (savedEvents.length > 1) item = savedEvents.length;\n        // in CLI, we know exact path dirname\n        else if (eventWithOutput) item = `${eventWithOutput.outputName}/${savedEvents[0].filename}`;\n        // in browser, we can only know it went to \"browser download folder\"\n        else item = `${savedEvents[0].filename}`;\n        let ofSeq = '';\n        if (exportOpts.sequence) {\n          const hasTotalFrames = isFinite(this.props.totalFrames);\n          ofSeq = hasTotalFrames ? ` (frame ${exportOpts.frame + 1} / ${this.props.totalFrames})` : ` (frame ${exportOpts.frame})`;\n        } else if (savedEvents.length > 1) {\n          ofSeq = ` files`;\n        }\n        const client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';\n        const action = isStreaming ? 'Streaming into' : 'Exported';\n        console.log(`%c[${client}]%c ${action} %c${item}%c${ofSeq}`, 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');\n      }\n      if (typeof this.sketch.postExport === 'function') {\n        this.sketch.postExport();\n      }\n      return ev;\n    });\n  }\n\n  _wrapContextScale (cb) {\n    this._preRender();\n    cb(this.props);\n    this._postRender();\n  }\n\n  _preRender () {\n    const props = this.props;\n\n    // Scale context for unit sizing\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.save();\n      if (this.settings.scaleContext !== false) {\n        props.context.scale(props.scaleX, props.scaleY);\n      }\n    } else if (props.p5) {\n      props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);\n    }\n  }\n\n  _postRender () {\n    const props = this.props;\n\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.restore();\n    }\n\n    // Flush by default, this may be revisited at a later point.\n    // We do this to ensure toDataURL can be called immediately after.\n    // Most likely browsers already handle this, so we may revisit this and\n    // remove it if it improves performance without any usability issues.\n    if (props.gl && this.settings.flush !== false && !props.p5) {\n      props.gl.flush();\n    }\n  }\n\n  tick () {\n    if (this.sketch && typeof this.sketch.tick === 'function') {\n      this._preRender();\n      this.sketch.tick(this.props);\n      this._postRender();\n    }\n  }\n\n  render () {\n    if (this.props.p5) {\n      this._lastRedrawResult = undefined;\n      this.props.p5.redraw();\n      return this._lastRedrawResult;\n    } else {\n      return this.submitDrawCall();\n    }\n  }\n\n  submitDrawCall () {\n    if (!this.sketch) return;\n\n    const props = this.props;\n    this._preRender();\n\n    let drawResult;\n\n    if (typeof this.sketch === 'function') {\n      drawResult = this.sketch(props);\n    } else if (typeof this.sketch.render === 'function') {\n      drawResult = this.sketch.render(props);\n    }\n\n    this._postRender();\n\n    return drawResult;\n  }\n\n  update (opt = {}) {\n    // Currently update() is only focused on resizing,\n    // but later we will support other options like switching\n    // frames and such.\n    const notYetSupported = [\n      'animate'\n    ];\n\n    Object.keys(opt).forEach(key => {\n      if (notYetSupported.indexOf(key) >= 0) {\n        throw new Error(`Sorry, the { ${key} } option is not yet supported with update().`);\n      }\n    });\n\n    const oldCanvas = this._settings.canvas;\n    const oldContext = this._settings.context;\n\n    // Merge new options into settings\n    for (let key in opt) {\n      const value = opt[key];\n      if (typeof value !== 'undefined') { // ignore undefined\n        this._settings[key] = value;\n      }\n    }\n\n    // Merge in time props\n    const timeOpts = Object.assign({}, this._settings, opt);\n    if ('time' in opt && 'frame' in opt) throw new Error('You should specify { time } or { frame } but not both');\n    else if ('time' in opt) delete timeOpts.frame;\n    else if ('frame' in opt) delete timeOpts.time;\n    if ('duration' in opt && 'totalFrames' in opt) throw new Error('You should specify { duration } or { totalFrames } but not both');\n    else if ('duration' in opt) delete timeOpts.totalFrames;\n    else if ('totalFrames' in opt) delete timeOpts.duration;\n\n    // Merge in user data without copying\n    if ('data' in opt) this._props.data = opt.data;\n\n    const timeProps = this.getTimeProps(timeOpts);\n    Object.assign(this._props, timeProps);\n\n    // If either canvas or context is changed, we should re-update\n    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {\n      const { canvas, context } = createCanvas(this._settings);\n\n      this.props.canvas = canvas;\n      this.props.context = context;\n\n      // Delete or add a 'gl' prop for convenience\n      this._setupGLKey();\n\n      // Re-mount the new canvas if it has no parent\n      this._appendCanvasIfNeeded();\n    }\n\n    // Special case to support P5.js\n    if (opt.p5 && typeof opt.p5 !== 'function') {\n      this.props.p5 = opt.p5;\n      this.props.p5.draw = () => {\n        if (this._isP5Resizing) return;\n        this._lastRedrawResult = this.submitDrawCall();\n      };\n    }\n\n    // Update playing state if necessary\n    if ('playing' in opt) {\n      if (opt.playing) this.play();\n      else this.pause();\n    }\n\n    checkSettings(this._settings);\n\n    // Draw new frame\n    this.resize();\n    this.render();\n    return this.props;\n  }\n\n  resize () {\n    const oldSizes = this._getSizeProps();\n\n    const settings = this.settings;\n    const props = this.props;\n\n    // Recompute new properties based on current setup\n    const newProps = resizeCanvas(props, settings);\n\n    // Assign to current props\n    Object.assign(this._props, newProps);\n\n    // Now we actually update the canvas width/height and style props\n    const {\n      pixelRatio,\n      canvasWidth,\n      canvasHeight,\n      styleWidth,\n      styleHeight\n    } = this.props;\n\n    // Update canvas settings\n    const canvas = this.props.canvas;\n    if (canvas && settings.resizeCanvas !== false) {\n      if (props.p5) {\n        // P5.js specific edge case\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n          this._isP5Resizing = true;\n          // This causes a re-draw :\\ so we ignore draws in the mean time... sorta hacky\n          props.p5.pixelDensity(pixelRatio);\n          props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);\n          this._isP5Resizing = false;\n        }\n      } else {\n        // Force canvas size\n        if (canvas.width !== canvasWidth) canvas.width = canvasWidth;\n        if (canvas.height !== canvasHeight) canvas.height = canvasHeight;\n      }\n      // Update canvas style\n      if (isBrowser() && settings.styleCanvas !== false) {\n        canvas.style.width = `${styleWidth}px`;\n        canvas.style.height = `${styleHeight}px`;\n      }\n    }\n\n    const newSizes = this._getSizeProps();\n    let changed = !deepEqual(oldSizes, newSizes);\n    if (changed) {\n      this._sizeChanged();\n    }\n    return changed;\n  }\n\n  _sizeChanged () {\n    // Send resize event to sketch\n    if (this.sketch && typeof this.sketch.resize === 'function') {\n      this.sketch.resize(this.props);\n    }\n  }\n\n  animate () {\n    if (!this.props.playing) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');\n      return;\n    }\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n\n    let now = rightNow();\n\n    const fps = this.props.fps;\n    const frameIntervalMS = 1000 / fps;\n    let deltaTimeMS = now - this._lastTime;\n\n    const duration = this.props.duration;\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n\n    let isNewFrame = true;\n    const playbackRate = this.settings.playbackRate;\n    if (playbackRate === 'fixed') {\n      deltaTimeMS = frameIntervalMS;\n    } else if (playbackRate === 'throttle') {\n      if (deltaTimeMS > frameIntervalMS) {\n        now = now - (deltaTimeMS % frameIntervalMS);\n        this._lastTime = now;\n      } else {\n        isNewFrame = false;\n      }\n    } else {\n      this._lastTime = now;\n    }\n\n    const deltaTime = deltaTimeMS / 1000;\n    let newTime = this.props.time + deltaTime * this.props.timeScale;\n\n    // Handle reverse time scale\n    if (newTime < 0 && hasDuration) {\n      newTime = duration + newTime;\n    }\n\n    // Re-start animation\n    let isFinished = false;\n    let isLoopStart = false;\n\n    const looping = this.settings.loop !== false;\n\n    if (hasDuration && newTime >= duration) {\n      // Re-start animation\n      if (looping) {\n        isNewFrame = true;\n        newTime = newTime % duration;\n        isLoopStart = true;\n      } else {\n        isNewFrame = false;\n        newTime = duration;\n        isFinished = true;\n      }\n\n      this._signalEnd();\n    }\n\n    if (isNewFrame) {\n      this.props.deltaTime = deltaTime;\n      this.props.time = newTime;\n      this.props.playhead = this._computePlayhead(newTime, duration);\n      const lastFrame = this.props.frame;\n      this.props.frame = this._computeCurrentFrame();\n      if (isLoopStart) this._signalBegin();\n      if (lastFrame !== this.props.frame) this.tick();\n      this.render();\n      this.props.deltaTime = 0;\n    }\n\n    if (isFinished) {\n      this.pause();\n    }\n  }\n\n  dispatch (cb) {\n    if (typeof cb !== 'function') throw new Error('must pass function into dispatch()');\n    cb(this.props);\n    this.render();\n  }\n\n  mount () {\n    this._appendCanvasIfNeeded();\n  }\n\n  unmount () {\n    if (isBrowser()) {\n      window.removeEventListener('resize', this._resizeHandler);\n      this._keyboardShortcuts.detach();\n    }\n    if (this.props.canvas.parentElement) {\n      this.props.canvas.parentElement.removeChild(this.props.canvas);\n    }\n  }\n\n  _appendCanvasIfNeeded () {\n    if (!isBrowser()) return;\n    if (this.settings.parent !== false && (this.props.canvas && !this.props.canvas.parentElement)) {\n      const defaultParent = this.settings.parent || document.body;\n      defaultParent.appendChild(this.props.canvas);\n    }\n  }\n\n  _setupGLKey () {\n    if (this.props.context) {\n      if (isWebGLContext(this.props.context)) {\n        this._props.gl = this.props.context;\n      } else {\n        delete this._props.gl;\n      }\n    }\n  }\n\n  getTimeProps (settings = {}) {\n    // Get timing data\n    let duration = settings.duration;\n    let totalFrames = settings.totalFrames;\n    const timeScale = defined(settings.timeScale, 1);\n    const fps = defined(settings.fps, 24);\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    const hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);\n\n    const totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;\n    const durationFromTotalFrames = hasTotalFrames ? (totalFrames / fps) : undefined;\n    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {\n      throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');\n    }\n\n    if (typeof settings.dimensions === 'undefined' && typeof settings.units !== 'undefined') {\n      console.warn(`You've specified a { units } setting but no { dimension }, so the units will be ignored.`);\n    }\n\n    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);\n    duration = defined(duration, durationFromTotalFrames, Infinity);\n\n    const startTime = settings.time;\n    const startFrame = settings.frame;\n    const hasStartTime = typeof startTime === 'number' && isFinite(startTime);\n    const hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);\n\n    // start at zero unless user specifies frame or time (but not both mismatched)\n    let time = 0;\n    let frame = 0;\n    let playhead = 0;\n    if (hasStartTime && hasStartFrame) {\n      throw new Error('You should specify either start frame or time, but not both.');\n    } else if (hasStartTime) {\n      // User specifies time, we infer frames from FPS\n      time = startTime;\n      playhead = this._computePlayhead(time, duration);\n      frame = this._computeFrame(\n        playhead, time,\n        totalFrames, fps\n      );\n    } else if (hasStartFrame) {\n      // User specifies frame number, we infer time from FPS\n      frame = startFrame;\n      time = frame / fps;\n      playhead = this._computePlayhead(time, duration);\n    }\n\n    return {\n      playhead,\n      time,\n      frame,\n      duration,\n      totalFrames,\n      fps,\n      timeScale\n    };\n  }\n\n  setup (settings = {}) {\n    if (this.sketch) throw new Error('Multiple setup() calls not yet supported.');\n\n    this._settings = Object.assign({}, settings, this._settings);\n\n    checkSettings(this._settings);\n\n    // Get initial canvas & context\n    const { context, canvas } = createCanvas(this._settings);\n\n    const timeProps = this.getTimeProps(this._settings);\n\n    // Initial render state features\n    this._props = {\n      ...timeProps,\n      canvas,\n      context,\n      deltaTime: 0,\n      started: false,\n      exporting: false,\n      playing: false,\n      recording: false,\n      settings: this.settings,\n      data: this.settings.data,\n\n      // Export some specific actions to the sketch\n      render: () => this.render(),\n      togglePlay: () => this.togglePlay(),\n      dispatch: (cb) => this.dispatch(cb),\n      tick: () => this.tick(),\n      resize: () => this.resize(),\n      update: (opt) => this.update(opt),\n      exportFrame: opt => this.exportFrame(opt),\n      record: () => this.record(),\n      play: () => this.play(),\n      pause: () => this.pause(),\n      stop: () => this.stop()\n    };\n\n    // For WebGL sketches, a gl variable reads a bit better\n    this._setupGLKey();\n\n    // Trigger initial resize now so that canvas is already sized\n    // by the time we load the sketch\n    this.resize();\n  }\n\n  loadAndRun (canvasSketch, newSettings) {\n    return this.load(canvasSketch, newSettings).then(() => {\n      this.run();\n      return this;\n    });\n  }\n\n  unload () {\n    this.pause();\n    if (!this.sketch) return;\n    if (typeof this.sketch.unload === 'function') {\n      this._wrapContextScale(props => this.sketch.unload(props));\n    }\n    this._sketch = null;\n  }\n\n  destroy () {\n    this.unload();\n    this.unmount();\n  }\n\n  load (createSketch, newSettings) {\n    // User didn't specify a function\n    if (typeof createSketch !== 'function') {\n      throw new Error('The function must take in a function as the first parameter. Example:\\n  canvasSketcher(() => { ... }, settings)');\n    }\n\n    if (this.sketch) {\n      this.unload();\n    }\n\n    if (typeof newSettings !== 'undefined') {\n      this.update(newSettings);\n    }\n\n    // This is a bit of a tricky case; we set up the auto-scaling here\n    // in case the user decides to render anything to the context *before* the\n    // render() function... However, users should instead use begin() function for that.\n    this._preRender();\n\n    let preload = Promise.resolve();\n\n    // Because of P5.js's unusual structure, we have to do a bit of\n    // library-specific changes to support it properly.\n    if (this.settings.p5) {\n      if (!isBrowser()) {\n        throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');\n      }\n      preload = new Promise(resolve => {\n        let P5Constructor = this.settings.p5;\n        let preload;\n        if (P5Constructor.p5) {\n          preload = P5Constructor.preload;\n          P5Constructor = P5Constructor.p5;\n        }\n\n        // The sketch setup; disable loop, set sizing, etc.\n        const p5Sketch = p5 => {\n          // Hook in preload if necessary\n          if (preload) p5.preload = () => preload(p5);\n          p5.setup = () => {\n            const props = this.props;\n            const isGL = this.settings.context === 'webgl';\n            const renderer = isGL ? p5.WEBGL : p5.P2D;\n            p5.noLoop();\n            p5.pixelDensity(props.pixelRatio);\n            p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);\n            if (isGL && this.settings.attributes) {\n              p5.setAttributes(this.settings.attributes);\n            }\n\n            this.update({ p5, canvas: p5.canvas, context: p5._renderer.drawingContext });\n            resolve();\n          };\n        };\n\n        // Support global and instance P5.js modes\n        if (typeof P5Constructor === 'function') {\n          new P5Constructor(p5Sketch);\n        } else {\n          if (typeof window.createCanvas !== 'function') {\n            throw new Error(\"{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\\nnew p5(); // <-- attaches to global scope\");\n          }\n          p5Sketch(window);\n        }\n      });\n    }\n\n    return preload.then(() => {\n      // Load the user's sketch\n      let loader = createSketch(this.props);\n      if (!isPromise(loader)) {\n        loader = Promise.resolve(loader);\n      }\n      return loader;\n    }).then(sketch => {\n      if (!sketch) sketch = {};\n      this._sketch = sketch;\n\n      // Once the sketch is loaded we can add the events\n      if (isBrowser()) {\n        this._keyboardShortcuts.attach();\n        window.addEventListener('resize', this._resizeHandler);\n      }\n\n      this._postRender();\n\n      // The initial resize() in the constructor will not have\n      // triggered a resize() event on the sketch, since it was before\n      // the sketch was loaded. So we send the signal here, allowing\n      // users to react to the initial size before first render.\n      this._sizeChanged();\n      return this;\n    }).catch(err => {\n      console.warn('Could not start sketch, the async loading function rejected with an error:\\n    Error: ' + err.message);\n      throw err;\n    });\n  }\n}\n\nexport default SketchManager;\n","import { getClientAPI } from '../util';\n\nexport default function (opt = {}) {\n  const handler = ev => {\n    if (!opt.enabled()) return;\n\n    const client = getClientAPI();\n    if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + S\n      ev.preventDefault();\n      opt.save(ev);\n    } else if (ev.keyCode === 32) {\n      // Space\n      // TODO: what to do with this? keep it, or remove it?\n      opt.togglePlay(ev);\n    } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + K, only when canvas-sketch-cli is used\n      ev.preventDefault();\n      opt.commit(ev);\n    }\n  };\n\n  const attach = () => {\n    window.addEventListener('keydown', handler);\n  };\n\n  const detach = () => {\n    window.removeEventListener('keydown', handler);\n  };\n\n  return {\n    attach,\n    detach\n  };\n}\n","import SketchManager from './core/SketchManager';\nimport PaperSizes from './paper-sizes';\nimport { getClientAPI, defined } from './util';\n\nconst CACHE = 'hot-id-cache';\nconst runtimeCollisions = [];\n\nfunction isHotReload () {\n  const client = getClientAPI();\n  return client && client.hot;\n}\n\nfunction cacheGet (id) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  return client[CACHE][id];\n}\n\nfunction cachePut (id, data) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  client[CACHE][id] = data;\n}\n\nfunction getTimeProp (oldManager, newSettings) {\n  // Static sketches ignore the time persistency\n  return newSettings.animate ? { time: oldManager.props.time } : undefined;\n}\n\nfunction canvasSketch (sketch, settings = {}) {\n  if (settings.p5) {\n    if (settings.canvas || (settings.context && typeof settings.context !== 'string')) {\n      throw new Error(`In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string`);\n    }\n\n    // Do not create a canvas on startup, since P5.js does that for us\n    const context = typeof settings.context === 'string' ? settings.context : false;\n    settings = Object.assign({}, settings, { canvas: false, context });\n  }\n\n  const isHot = isHotReload();\n  let hotID;\n  if (isHot) {\n    // Use a magic name by default, force user to define each sketch if they\n    // require more than one in an application. Open to other ideas on how to tackle\n    // this as well...\n    hotID = defined(settings.id, '$__DEFAULT_CANVAS_SKETCH_ID__$');\n  }\n  let isInjecting = isHot && typeof hotID === 'string';\n\n  if (isInjecting && runtimeCollisions.includes(hotID)) {\n    console.warn(`Warning: You have multiple calls to canvasSketch() in --hot mode. You must pass unique { id } strings in settings to enable hot reload across multiple sketches. `, hotID);\n    isInjecting = false;\n  }\n\n  let preload = Promise.resolve();\n\n  if (isInjecting) {\n    // Mark this as already spotted in this runtime instance\n    runtimeCollisions.push(hotID);\n\n    const previousData = cacheGet(hotID);\n    if (previousData) {\n      const next = () => {\n        // Grab new props from old sketch instance\n        const newProps = getTimeProp(previousData.manager, settings);\n        // Destroy the old instance\n        previousData.manager.destroy();\n        // Pass along new props\n        return newProps;\n      };\n\n      // Move along the next data...\n      preload = previousData.load.then(next).catch(next);\n    }\n  }\n\n  return preload.then(newProps => {\n    const manager = new SketchManager();\n    let result;\n    if (sketch) {\n      // Merge with incoming data\n      settings = Object.assign({}, settings, newProps);\n\n      // Apply settings and create a canvas\n      manager.setup(settings);\n\n      // Mount to DOM\n      manager.mount();\n\n      // load the sketch first\n      result = manager.loadAndRun(sketch);\n    } else {\n      result = Promise.resolve(manager);\n    }\n    if (isInjecting) {\n      cachePut(hotID, { load: result, manager });\n    }\n    return result;\n  });\n}\n\n// TODO: Figure out a nice way to export things.\ncanvasSketch.canvasSketch = canvasSketch;\ncanvasSketch.PaperSizes = PaperSizes;\n\nexport default canvasSketch;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '120';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar CineonToneMapping = 3;\n\tvar ACESFilmicToneMapping = 4;\n\tvar CustomToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar NormalAnimationBlendMode = 2500;\n\tvar AdditiveAnimationBlendMode = 2501;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\tvar GLSL1 = \"100\";\n\tvar GLSL3 = \"300 es\";\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar _seed = 1234567;\n\n\tvar MathUtils = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\t// Deterministic pseudo-random float in the interval [ 0, 1 ]\n\n\t\tseededRandom: function ( s ) {\n\n\t\t\tif ( s !== undefined ) { _seed = s % 2147483647; }\n\n\t\t\t// Park-Miller algorithm\n\n\t\t\t_seed = _seed * 16807 % 2147483647;\n\n\t\t\treturn ( _seed - 1 ) / 2147483646;\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tsetQuaternionFromProperEuler: function ( q, a, b, c, order ) {\n\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c2 = cos( b / 2 );\n\t\t\tvar s2 = sin( b / 2 );\n\n\t\t\tvar c13 = cos( ( a + c ) / 2 );\n\t\t\tvar s13 = sin( ( a + c ) / 2 );\n\n\t\t\tvar c1_3 = cos( ( a - c ) / 2 );\n\t\t\tvar s1_3 = sin( ( a - c ) / 2 );\n\n\t\t\tvar c3_1 = cos( ( c - a ) / 2 );\n\t\t\tvar s3_1 = sin( ( c - a ) / 2 );\n\n\t\t\tswitch ( order ) {\n\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tvar Vector2 = function Vector2( x, y ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\n\n\t\tObject.defineProperty( this, 'isVector2', { value: true } );\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t};\n\n\tvar prototypeAccessors = { width: { configurable: true },height: { configurable: true } };\n\n\tprototypeAccessors.width.get = function () {\n\n\t\treturn this.x;\n\n\t};\n\n\tprototypeAccessors.width.set = function ( value ) {\n\n\t\tthis.x = value;\n\n\t};\n\n\tprototypeAccessors.height.get = function () {\n\n\t\treturn this.y;\n\n\t};\n\n\tprototypeAccessors.height.set = function ( value ) {\n\n\t\tthis.y = value;\n\n\t};\n\n\tVector2.prototype.set = function set ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.setScalar = function setScalar ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.setX = function setX ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.setY = function setY ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.setComponent = function setComponent ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.getComponent = function getComponent ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t};\n\n\tVector2.prototype.clone = function clone () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t};\n\n\tVector2.prototype.copy = function copy ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.add = function add ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.addScalar = function addScalar ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.addVectors = function addVectors ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.addScaledVector = function addScaledVector ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.sub = function sub ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.subScalar = function subScalar ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.subVectors = function subVectors ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.multiply = function multiply ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.multiplyScalar = function multiplyScalar ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.divide = function divide ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.divideScalar = function divideScalar ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t};\n\n\tVector2.prototype.applyMatrix3 = function applyMatrix3 ( m ) {\n\n\t\tvar x = this.x, y = this.y;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.min = function min ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.max = function max ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.clamp = function clamp ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.clampScalar = function clampScalar ( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.clampLength = function clampLength ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t};\n\n\tVector2.prototype.floor = function floor () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.ceil = function ceil () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.round = function round () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.roundToZero = function roundToZero () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.negate = function negate () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.dot = function dot ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t};\n\n\tVector2.prototype.cross = function cross ( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t};\n\n\tVector2.prototype.lengthSq = function lengthSq () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t};\n\n\tVector2.prototype.length = function length () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t};\n\n\tVector2.prototype.manhattanLength = function manhattanLength () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t};\n\n\tVector2.prototype.normalize = function normalize () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t};\n\n\tVector2.prototype.angle = function angle () {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tvar angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t};\n\n\tVector2.prototype.distanceTo = function distanceTo ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t};\n\n\tVector2.prototype.distanceToSquared = function distanceToSquared ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t};\n\n\tVector2.prototype.manhattanDistanceTo = function manhattanDistanceTo ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t};\n\n\tVector2.prototype.setLength = function setLength ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t};\n\n\tVector2.prototype.lerp = function lerp ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.lerpVectors = function lerpVectors ( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.equals = function equals ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t};\n\n\tVector2.prototype.fromArray = function fromArray ( array, offset ) {\n\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.toArray = function toArray ( array, offset ) {\n\n\t\tif ( array === undefined ) { array = []; }\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t};\n\n\tVector2.prototype.fromBufferAttribute = function fromBufferAttribute ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.rotateAround = function rotateAround ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t};\n\n\tVector2.prototype.random = function random () {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t};\n\n\tObject.defineProperties( Vector2.prototype, prototypeAccessors );\n\n\tvar Matrix3 = function Matrix3() {\n\n\t\tObject.defineProperty( this, 'isMatrix3', { value: true } );\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t};\n\n\tMatrix3.prototype.set = function set ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.identity = function identity () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t};\n\n\tMatrix3.prototype.copy = function copy ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.extractBasis = function extractBasis ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.setFromMatrix4 = function setFromMatrix4 ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.multiply = function multiply ( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t};\n\n\tMatrix3.prototype.premultiply = function premultiply ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t};\n\n\tMatrix3.prototype.multiplyMatrices = function multiplyMatrices ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.multiplyScalar = function multiplyScalar ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.determinant = function determinant () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t};\n\n\tMatrix3.prototype.getInverse = function getInverse ( matrix, throwOnDegenerate ) {\n\n\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t}\n\n\t\tvar me = matrix.elements,\n\t\t\tte = this.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.transpose = function transpose () {\n\n\t\tvar tmp;\n\t\tvar m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.getNormalMatrix = function getNormalMatrix ( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t};\n\n\tMatrix3.prototype.transposeIntoArray = function transposeIntoArray ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.setUvTransform = function setUvTransform ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tvar c = Math.cos( rotation );\n\t\tvar s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t};\n\n\tMatrix3.prototype.scale = function scale ( sx, sy ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.rotate = function rotate ( theta ) {\n\n\t\tvar c = Math.cos( theta );\n\t\tvar s = Math.sin( theta );\n\n\t\tvar te = this.elements;\n\n\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.translate = function translate ( tx, ty ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.equals = function equals ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n\tMatrix3.prototype.fromArray = function fromArray ( array, offset ) {\n\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tMatrix3.prototype.toArray = function toArray ( array, offset ) {\n\n\t\tif ( array === undefined ) { array = []; }\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t};\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t}\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t}\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tvar Vector4 = function Vector4( x, y, z, w ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\t\tif ( w === void 0 ) w = 1;\n\n\n\t\tObject.defineProperty( this, 'isVector4', { value: true } );\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t};\n\n\tvar prototypeAccessors$1 = { width: { configurable: true },height: { configurable: true } };\n\n\tprototypeAccessors$1.width.get = function () {\n\n\t\treturn this.z;\n\n\t};\n\n\tprototypeAccessors$1.width.set = function ( value ) {\n\n\t\tthis.z = value;\n\n\t};\n\n\tprototypeAccessors$1.height.get = function () {\n\n\t\treturn this.w;\n\n\t};\n\n\tprototypeAccessors$1.height.set = function ( value ) {\n\n\t\tthis.w = value;\n\n\t};\n\n\tVector4.prototype.set = function set ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.setScalar = function setScalar ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.setX = function setX ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.setY = function setY ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.setZ = function setZ ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.setW = function setW ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.setComponent = function setComponent ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.getComponent = function getComponent ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t};\n\n\tVector4.prototype.clone = function clone () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t};\n\n\tVector4.prototype.copy = function copy ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.add = function add ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.addScalar = function addScalar ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.addVectors = function addVectors ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.addScaledVector = function addScaledVector ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.sub = function sub ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.subScalar = function subScalar ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.subVectors = function subVectors ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.multiplyScalar = function multiplyScalar ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.applyMatrix4 = function applyMatrix4 ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.divideScalar = function divideScalar ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t};\n\n\tVector4.prototype.setAxisAngleFromQuaternion = function setAxisAngleFromQuaternion ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.setAxisAngleFromRotationMatrix = function setAxisAngleFromRotationMatrix ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z; // variables for result\n\t\tvar epsilon = 0.01,\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.min = function min ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.max = function max ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.clamp = function clamp ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.clampScalar = function clampScalar ( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.clampLength = function clampLength ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t};\n\n\tVector4.prototype.floor = function floor () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.ceil = function ceil () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.round = function round () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.roundToZero = function roundToZero () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.negate = function negate () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.dot = function dot ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t};\n\n\tVector4.prototype.lengthSq = function lengthSq () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t};\n\n\tVector4.prototype.length = function length () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t};\n\n\tVector4.prototype.manhattanLength = function manhattanLength () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t};\n\n\tVector4.prototype.normalize = function normalize () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t};\n\n\tVector4.prototype.setLength = function setLength ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t};\n\n\tVector4.prototype.lerp = function lerp ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.lerpVectors = function lerpVectors ( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.equals = function equals ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t};\n\n\tVector4.prototype.fromArray = function fromArray ( array, offset ) {\n\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.toArray = function toArray ( array, offset ) {\n\n\t\tif ( array === undefined ) { array = []; }\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t};\n\n\tVector4.prototype.fromBufferAttribute = function fromBufferAttribute ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t};\n\n\tVector4.prototype.random = function random () {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t};\n\n\tObject.defineProperties( Vector4.prototype, prototypeAccessors$1 );\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar Quaternion = function Quaternion( x, y, z, w ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\t\tif ( w === void 0 ) w = 1;\n\n\n\t\tObject.defineProperty( this, 'isQuaternion', { value: true } );\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t};\n\n\tvar prototypeAccessors$2 = { x: { configurable: true },y: { configurable: true },z: { configurable: true },w: { configurable: true } };\n\n\tQuaternion.slerp = function slerp ( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t};\n\n\tQuaternion.slerpFlat = function slerpFlat ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tvar x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t;\n\t\t\tvar cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t};\n\n\tQuaternion.multiplyQuaternionsFlat = function multiplyQuaternionsFlat ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tvar x0 = src0[ srcOffset0 ];\n\t\tvar y0 = src0[ srcOffset0 + 1 ];\n\t\tvar z0 = src0[ srcOffset0 + 2 ];\n\t\tvar w0 = src0[ srcOffset0 + 3 ];\n\n\t\tvar x1 = src1[ srcOffset1 ];\n\t\tvar y1 = src1[ srcOffset1 + 1 ];\n\t\tvar z1 = src1[ srcOffset1 + 2 ];\n\t\tvar w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t};\n\n\tprototypeAccessors$2.x.get = function () {\n\n\t\treturn this._x;\n\n\t};\n\n\tprototypeAccessors$2.x.set = function ( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t};\n\n\tprototypeAccessors$2.y.get = function () {\n\n\t\treturn this._y;\n\n\t};\n\n\tprototypeAccessors$2.y.set = function ( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t};\n\n\tprototypeAccessors$2.z.get = function () {\n\n\t\treturn this._z;\n\n\t};\n\n\tprototypeAccessors$2.z.set = function ( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t};\n\n\tprototypeAccessors$2.w.get = function () {\n\n\t\treturn this._w;\n\n\t};\n\n\tprototypeAccessors$2.w.set = function ( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t};\n\n\tQuaternion.prototype.set = function set ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.clone = function clone () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t};\n\n\tQuaternion.prototype.copy = function copy ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.setFromEuler = function setFromEuler ( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// 20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//content/SpinCalc.m\n\n\t\tvar cos = Math.cos;\n\t\tvar sin = Math.sin;\n\n\t\tvar c1 = cos( x / 2 );\n\t\tvar c2 = cos( y / 2 );\n\t\tvar c3 = cos( z / 2 );\n\n\t\tvar s1 = sin( x / 2 );\n\t\tvar s2 = sin( y / 2 );\n\t\tvar s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.setFromAxisAngle = function setFromAxisAngle ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.setFromRotationMatrix = function setFromRotationMatrix ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tvar s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tvar s$1 = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s$1;\n\t\t\tthis._x = 0.25 * s$1;\n\t\t\tthis._y = ( m12 + m21 ) / s$1;\n\t\t\tthis._z = ( m13 + m31 ) / s$1;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tvar s$2 = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s$2;\n\t\t\tthis._x = ( m12 + m21 ) / s$2;\n\t\t\tthis._y = 0.25 * s$2;\n\t\t\tthis._z = ( m23 + m32 ) / s$2;\n\n\t\t} else {\n\n\t\t\tvar s$3 = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s$3;\n\t\t\tthis._x = ( m13 + m31 ) / s$3;\n\t\t\tthis._y = ( m23 + m32 ) / s$3;\n\t\t\tthis._z = 0.25 * s$3;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.setFromUnitVectors = function setFromUnitVectors ( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar EPS = 0.000001;\n\n\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < EPS ) {\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t};\n\n\tQuaternion.prototype.angleTo = function angleTo ( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t};\n\n\tQuaternion.prototype.rotateTowards = function rotateTowards ( q, step ) {\n\n\t\tvar angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) { return this; }\n\n\t\tvar t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.identity = function identity () {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t};\n\n\tQuaternion.prototype.inverse = function inverse () {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t};\n\n\tQuaternion.prototype.conjugate = function conjugate () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.dot = function dot ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t};\n\n\tQuaternion.prototype.lengthSq = function lengthSq () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t};\n\n\tQuaternion.prototype.length = function length () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t};\n\n\tQuaternion.prototype.normalize = function normalize () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.multiply = function multiply ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t};\n\n\tQuaternion.prototype.premultiply = function premultiply ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t};\n\n\tQuaternion.prototype.multiplyQuaternions = function multiplyQuaternions ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.slerp = function slerp ( qb, t ) {\n\n\t\tif ( t === 0 ) { return this; }\n\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tvar s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.equals = function equals ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t};\n\n\tQuaternion.prototype.fromArray = function fromArray ( array, offset ) {\n\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype.toArray = function toArray ( array, offset ) {\n\n\t\tif ( array === undefined ) { array = []; }\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t};\n\n\tQuaternion.prototype.fromBufferAttribute = function fromBufferAttribute ( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype._onChange = function _onChange ( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t};\n\n\tQuaternion.prototype._onChangeCallback = function _onChangeCallback () {};\n\n\tObject.defineProperties( Quaternion.prototype, prototypeAccessors$2 );\n\n\tvar Vector3 = function Vector3( x, y, z ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\n\n\t\tObject.defineProperty( this, 'isVector3', { value: true } );\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t};\n\n\tVector3.prototype.set = function set ( x, y, z ) {\n\n\t\tif ( z === undefined ) { z = this.z; } // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.setScalar = function setScalar ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.setX = function setX ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.setY = function setY ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.setZ = function setZ ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.setComponent = function setComponent ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.getComponent = function getComponent ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t};\n\n\tVector3.prototype.clone = function clone () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t};\n\n\tVector3.prototype.copy = function copy ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.add = function add ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.addScalar = function addScalar ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.addVectors = function addVectors ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.addScaledVector = function addScaledVector ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.sub = function sub ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.subScalar = function subScalar ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.subVectors = function subVectors ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.multiply = function multiply ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.multiplyScalar = function multiplyScalar ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.multiplyVectors = function multiplyVectors ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.applyEuler = function applyEuler ( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t};\n\n\tVector3.prototype.applyAxisAngle = function applyAxisAngle ( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t};\n\n\tVector3.prototype.applyMatrix3 = function applyMatrix3 ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.applyNormalMatrix = function applyNormalMatrix ( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t};\n\n\tVector3.prototype.applyMatrix4 = function applyMatrix4 ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.applyQuaternion = function applyQuaternion ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix = qw * x + qy * z - qz * y;\n\t\tvar iy = qw * y + qz * x - qx * z;\n\t\tvar iz = qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.project = function project ( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t};\n\n\tVector3.prototype.unproject = function unproject ( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t};\n\n\tVector3.prototype.transformDirection = function transformDirection ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t};\n\n\tVector3.prototype.divide = function divide ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.divideScalar = function divideScalar ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t};\n\n\tVector3.prototype.min = function min ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.max = function max ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.clamp = function clamp ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.clampScalar = function clampScalar ( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.clampLength = function clampLength ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t};\n\n\tVector3.prototype.floor = function floor () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.ceil = function ceil () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.round = function round () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.roundToZero = function roundToZero () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.negate = function negate () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.dot = function dot ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t};\n\n\t// TODO lengthSquared?\n\n\tVector3.prototype.lengthSq = function lengthSq () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t};\n\n\tVector3.prototype.length = function length () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t};\n\n\tVector3.prototype.manhattanLength = function manhattanLength () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t};\n\n\tVector3.prototype.normalize = function normalize () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t};\n\n\tVector3.prototype.setLength = function setLength ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t};\n\n\tVector3.prototype.lerp = function lerp ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.lerpVectors = function lerpVectors ( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.cross = function cross ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t};\n\n\tVector3.prototype.crossVectors = function crossVectors ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.projectOnVector = function projectOnVector ( v ) {\n\n\t\tvar denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) { return this.set( 0, 0, 0 ); }\n\n\t\tvar scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t};\n\n\tVector3.prototype.projectOnPlane = function projectOnPlane ( planeNormal ) {\n\n\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector );\n\n\t};\n\n\tVector3.prototype.reflect = function reflect ( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t};\n\n\tVector3.prototype.angleTo = function angleTo ( v ) {\n\n\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) { return Math.PI / 2; }\n\n\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\n\n\t};\n\n\tVector3.prototype.distanceTo = function distanceTo ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t};\n\n\tVector3.prototype.distanceToSquared = function distanceToSquared ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t};\n\n\tVector3.prototype.manhattanDistanceTo = function manhattanDistanceTo ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t};\n\n\tVector3.prototype.setFromSpherical = function setFromSpherical ( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t};\n\n\tVector3.prototype.setFromSphericalCoords = function setFromSphericalCoords ( radius, phi, theta ) {\n\n\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.setFromCylindrical = function setFromCylindrical ( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t};\n\n\tVector3.prototype.setFromCylindricalCoords = function setFromCylindricalCoords ( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.setFromMatrixPosition = function setFromMatrixPosition ( m ) {\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.setFromMatrixScale = function setFromMatrixScale ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.setFromMatrixColumn = function setFromMatrixColumn ( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t};\n\n\tVector3.prototype.setFromMatrix3Column = function setFromMatrix3Column ( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t};\n\n\tVector3.prototype.equals = function equals ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t};\n\n\tVector3.prototype.fromArray = function fromArray ( array, offset ) {\n\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.toArray = function toArray ( array, offset ) {\n\n\t\tif ( array === undefined ) { array = []; }\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t};\n\n\tVector3.prototype.fromBufferAttribute = function fromBufferAttribute ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t};\n\n\tVector3.prototype.random = function random () {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t};\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tvar Box3 = function Box3( min, max ) {\n\n\t\tObject.defineProperty( this, 'isBox3', { value: true } );\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t};\n\n\tBox3.prototype.set = function set ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.setFromArray = function setFromArray ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) { minX = x; }\n\t\t\tif ( y < minY ) { minY = y; }\n\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.setFromBufferAttribute = function setFromBufferAttribute ( attribute ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tvar x = attribute.getX( i );\n\t\t\tvar y = attribute.getY( i );\n\t\t\tvar z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) { minX = x; }\n\t\t\tif ( y < minY ) { minY = y; }\n\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.setFromPoints = function setFromPoints ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.setFromCenterAndSize = function setFromCenterAndSize ( center, size ) {\n\n\t\tvar halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.setFromObject = function setFromObject ( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t};\n\n\tBox3.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tBox3.prototype.copy = function copy ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.makeEmpty = function makeEmpty () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.isEmpty = function isEmpty () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t};\n\n\tBox3.prototype.getCenter = function getCenter ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t};\n\n\tBox3.prototype.getSize = function getSize ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t};\n\n\tBox3.prototype.expandByPoint = function expandByPoint ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.expandByVector = function expandByVector ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.expandByScalar = function expandByScalar ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.expandByObject = function expandByObject ( object ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\tthis.union( _box );\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.containsPoint = function containsPoint ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t};\n\n\tBox3.prototype.containsBox = function containsBox ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t};\n\n\tBox3.prototype.getParameter = function getParameter ( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t};\n\n\tBox3.prototype.intersectsBox = function intersectsBox ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t};\n\n\tBox3.prototype.intersectsSphere = function intersectsSphere ( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$1 );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t};\n\n\tBox3.prototype.intersectsPlane = function intersectsPlane ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t};\n\n\tBox3.prototype.intersectsTriangle = function intersectsTriangle ( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0.subVectors( triangle.a, _center );\n\t\t_v1.subVectors( triangle.b, _center );\n\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1, _v0 );\n\t\t_f1.subVectors( _v2, _v1 );\n\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tvar axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\n\n\t};\n\n\tBox3.prototype.clampPoint = function clampPoint ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t};\n\n\tBox3.prototype.distanceToPoint = function distanceToPoint ( point ) {\n\n\t\tvar clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t};\n\n\tBox3.prototype.getBoundingSphere = function getBoundingSphere ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t}\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector$1 ).length() * 0.5;\n\n\t\treturn target;\n\n\t};\n\n\tBox3.prototype.intersect = function intersect ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.union = function union ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.applyMatrix4 = function applyMatrix4 ( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.translate = function translate ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t};\n\n\tBox3.prototype.equals = function equals ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t};\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tfor ( var i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$1 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\tvar _box$1 = new Box3();\n\n\tvar Sphere = function Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : - 1;\n\n\t};\n\n\tSphere.prototype.set = function set ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t};\n\n\tSphere.prototype.setFromPoints = function setFromPoints ( points, optionalCenter ) {\n\n\t\tvar center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tvar maxRadiusSq = 0;\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t};\n\n\tSphere.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tSphere.prototype.copy = function copy ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t};\n\n\tSphere.prototype.isEmpty = function isEmpty () {\n\n\t\treturn ( this.radius < 0 );\n\n\t};\n\n\tSphere.prototype.makeEmpty = function makeEmpty () {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t};\n\n\tSphere.prototype.containsPoint = function containsPoint ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t};\n\n\tSphere.prototype.distanceToPoint = function distanceToPoint ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t};\n\n\tSphere.prototype.intersectsSphere = function intersectsSphere ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t};\n\n\tSphere.prototype.intersectsBox = function intersectsBox ( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t};\n\n\tSphere.prototype.intersectsPlane = function intersectsPlane ( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t};\n\n\tSphere.prototype.clampPoint = function clampPoint ( point, target ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t};\n\n\tSphere.prototype.getBoundingBox = function getBoundingBox ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\ttarget = new Box3();\n\n\t\t}\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t};\n\n\tSphere.prototype.applyMatrix4 = function applyMatrix4 ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t};\n\n\tSphere.prototype.translate = function translate ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t};\n\n\tSphere.prototype.equals = function equals ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t};\n\n\tvar _vector$2 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\tvar Ray = function Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t};\n\n\tRay.prototype.set = function set ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t};\n\n\tRay.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tRay.prototype.copy = function copy ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t};\n\n\tRay.prototype.at = function at ( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t};\n\n\tRay.prototype.lookAt = function lookAt ( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t};\n\n\tRay.prototype.recast = function recast ( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$2 ) );\n\n\t\treturn this;\n\n\t};\n\n\tRay.prototype.closestPointToPoint = function closestPointToPoint ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tvar directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t};\n\n\tRay.prototype.distanceToPoint = function distanceToPoint ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t};\n\n\tRay.prototype.distanceSqToPoint = function distanceSqToPoint ( point ) {\n\n\t\tvar directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\treturn _vector$2.distanceToSquared( point );\n\n\t};\n\n\tRay.prototype.distanceSqToSegment = function distanceSqToSegment ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tvar a01 = - this.direction.dot( _segDir );\n\t\tvar b0 = _diff.dot( this.direction );\n\t\tvar b1 = - _diff.dot( _segDir );\n\t\tvar c = _diff.lengthSq();\n\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\tvar s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t};\n\n\tRay.prototype.intersectSphere = function intersectSphere ( sphere, target ) {\n\n\t\t_vector$2.subVectors( sphere.center, this.origin );\n\t\tvar tca = _vector$2.dot( this.direction );\n\t\tvar d2 = _vector$2.dot( _vector$2 ) - tca * tca;\n\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) { return null; }\n\n\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tvar t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tvar t1 = tca + thc;\n\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t};\n\n\tRay.prototype.intersectsSphere = function intersectsSphere ( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t};\n\n\tRay.prototype.distanceToPlane = function distanceToPlane ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t};\n\n\tRay.prototype.intersectPlane = function intersectPlane ( plane, target ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t};\n\n\tRay.prototype.intersectsPlane = function intersectsPlane ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t};\n\n\tRay.prototype.intersectBox = function intersectBox ( box, target ) {\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) { return null; }\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t};\n\n\tRay.prototype.intersectsBox = function intersectsBox ( box ) {\n\n\t\treturn this.intersectBox( box, _vector$2 ) !== null;\n\n\t};\n\n\tRay.prototype.intersectTriangle = function intersectTriangle ( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tvar DdN = this.direction.dot( _normal );\n\t\tvar sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t};\n\n\tRay.prototype.applyMatrix4 = function applyMatrix4 ( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t};\n\n\tRay.prototype.equals = function equals ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t};\n\n\tvar Matrix4 = function Matrix4() {\n\n\t\tObject.defineProperty( this, 'isMatrix4', { value: true } );\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t};\n\n\tMatrix4.prototype.set = function set ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.identity = function identity () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.clone = function clone () {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t};\n\n\tMatrix4.prototype.copy = function copy ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.copyPosition = function copyPosition ( m ) {\n\n\t\tvar te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.extractBasis = function extractBasis ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeBasis = function makeBasis ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.extractRotation = function extractRotation ( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tvar scaleX = 1 / _v1$1.setFromMatrixColumn( m, 0 ).length();\n\t\tvar scaleY = 1 / _v1$1.setFromMatrixColumn( m, 1 ).length();\n\t\tvar scaleZ = 1 / _v1$1.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeRotationFromEuler = function makeRotationFromEuler ( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce$1 = c * e, cf$1 = c * f, de$1 = d * e, df$1 = d * f;\n\n\t\t\tte[ 0 ] = ce$1 - df$1 * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de$1 + cf$1 * b;\n\n\t\t\tte[ 1 ] = cf$1 + de$1 * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df$1 - ce$1 * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae$1 = a * e, af$1 = a * f, be$1 = b * e, bf$1 = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be$1 * d - af$1;\n\t\t\tte[ 8 ] = ae$1 * d + bf$1;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf$1 * d + ae$1;\n\t\t\tte[ 9 ] = af$1 * d - be$1;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac$1 = a * c, ad$1 = a * d, bc$1 = b * c, bd$1 = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac$1 * f + bd$1;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad$1 * f - bc$1;\n\n\t\t\tte[ 2 ] = bc$1 * f - ad$1;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd$1 * f + ac$1;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeRotationFromQuaternion = function makeRotationFromQuaternion ( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t};\n\n\tMatrix4.prototype.lookAt = function lookAt ( eye, target, up ) {\n\n\t\tvar te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.multiply = function multiply ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t};\n\n\tMatrix4.prototype.premultiply = function premultiply ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t};\n\n\tMatrix4.prototype.multiplyMatrices = function multiplyMatrices ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.multiplyScalar = function multiplyScalar ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.determinant = function determinant () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t};\n\n\tMatrix4.prototype.transpose = function transpose () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.setPosition = function setPosition ( x, y, z ) {\n\n\t\tvar te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.getInverse = function getInverse ( m, throwOnDegenerate ) {\n\n\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t}\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements,\n\t\t\tme = m.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.scale = function scale ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.getMaxScaleOnAxis = function getMaxScaleOnAxis () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t};\n\n\tMatrix4.prototype.makeTranslation = function makeTranslation ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeRotationX = function makeRotationX ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeRotationY = function makeRotationY ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeRotationZ = function makeRotationZ ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeRotationAxis = function makeRotationAxis ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeScale = function makeScale ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeShear = function makeShear ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, y, z, 0,\n\t\t\tx, 1, z, 0,\n\t\t\tx, y, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.compose = function compose ( position, quaternion, scale ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tvar x2 = x + x,y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.decompose = function decompose ( position, quaternion, scale ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar sx = _v1$1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tvar sy = _v1$1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tvar sz = _v1$1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tvar det = this.determinant();\n\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1.copy( this );\n\n\t\tvar invSX = 1 / sx;\n\t\tvar invSY = 1 / sy;\n\t\tvar invSZ = 1 / sz;\n\n\t\t_m1.elements[ 0 ] *= invSX;\n\t\t_m1.elements[ 1 ] *= invSX;\n\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t_m1.elements[ 4 ] *= invSY;\n\t\t_m1.elements[ 5 ] *= invSY;\n\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makePerspective = function makePerspective ( left, right, top, bottom, near, far ) {\n\n\t\tif ( far === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;te[ 4 ] = 0;te[ 8 ] = a;te[ 12 ] = 0;\n\t\tte[ 1 ] = 0;te[ 5 ] = y;te[ 9 ] = b;te[ 13 ] = 0;\n\t\tte[ 2 ] = 0;te[ 6 ] = 0;te[ 10 ] = c;te[ 14 ] = d;\n\t\tte[ 3 ] = 0;te[ 7 ] = 0;te[ 11 ] = - 1;te[ 15 ] = 0;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.makeOrthographic = function makeOrthographic ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = 1.0 / ( right - left );\n\t\tvar h = 1.0 / ( top - bottom );\n\t\tvar p = 1.0 / ( far - near );\n\n\t\tvar x = ( right + left ) * w;\n\t\tvar y = ( top + bottom ) * h;\n\t\tvar z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;te[ 4 ] = 0;te[ 8 ] = 0;te[ 12 ] = - x;\n\t\tte[ 1 ] = 0;te[ 5 ] = 2 * h;te[ 9 ] = 0;te[ 13 ] = - y;\n\t\tte[ 2 ] = 0;te[ 6 ] = 0;te[ 10 ] = - 2 * p;te[ 14 ] = - z;\n\t\tte[ 3 ] = 0;te[ 7 ] = 0;te[ 11 ] = 0;te[ 15 ] = 1;\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.equals = function equals ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n\tMatrix4.prototype.fromArray = function fromArray ( array, offset ) {\n\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tMatrix4.prototype.toArray = function toArray ( array, offset ) {\n\n\t\tif ( array === undefined ) { array = []; }\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t};\n\n\tvar _v1$1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\tvar Euler = function Euler( x, y, z, order ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\t\tif ( order === void 0 ) order = Euler.DefaultOrder;\n\n\n\t\tObject.defineProperty( this, 'isEuler', { value: true } );\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t};\n\n\tvar prototypeAccessors$3 = { x: { configurable: true },y: { configurable: true },z: { configurable: true },order: { configurable: true } };\n\n\tprototypeAccessors$3.x.get = function () {\n\n\t\treturn this._x;\n\n\t};\n\n\tprototypeAccessors$3.x.set = function ( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t};\n\n\tprototypeAccessors$3.y.get = function () {\n\n\t\treturn this._y;\n\n\t};\n\n\tprototypeAccessors$3.y.set = function ( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t};\n\n\tprototypeAccessors$3.z.get = function () {\n\n\t\treturn this._z;\n\n\t};\n\n\tprototypeAccessors$3.z.set = function ( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t};\n\n\tprototypeAccessors$3.order.get = function () {\n\n\t\treturn this._order;\n\n\t};\n\n\tprototypeAccessors$3.order.set = function ( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t};\n\n\tEuler.prototype.set = function set ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tEuler.prototype.clone = function clone () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t};\n\n\tEuler.prototype.copy = function copy ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tEuler.prototype.setFromRotationMatrix = function setFromRotationMatrix ( m, order, update ) {\n\n\t\tvar clamp = MathUtils.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\treturn this;\n\n\t};\n\n\tEuler.prototype.setFromQuaternion = function setFromQuaternion ( q, order, update ) {\n\n\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t};\n\n\tEuler.prototype.setFromVector3 = function setFromVector3 ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t};\n\n\tEuler.prototype.reorder = function reorder ( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$1.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t};\n\n\tEuler.prototype.equals = function equals ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t};\n\n\tEuler.prototype.fromArray = function fromArray ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t};\n\n\tEuler.prototype.toArray = function toArray ( array, offset ) {\n\n\t\tif ( array === undefined ) { array = []; }\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t};\n\n\tEuler.prototype.toVector3 = function toVector3 ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t};\n\n\tEuler.prototype._onChange = function _onChange ( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t};\n\n\tEuler.prototype._onChangeCallback = function _onChangeCallback () {};\n\n\tObject.defineProperties( Euler.prototype, prototypeAccessors$3 );\n\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tvar Layers = function Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t};\n\n\tLayers.prototype.set = function set ( channel ) {\n\n\t\tthis.mask = 1 << channel | 0;\n\n\t};\n\n\tLayers.prototype.enable = function enable ( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t};\n\n\tLayers.prototype.enableAll = function enableAll () {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t};\n\n\tLayers.prototype.toggle = function toggle ( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t};\n\n\tLayers.prototype.disable = function disable ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t};\n\n\tLayers.prototype.disableAll = function disableAll () {\n\n\t\tthis.mask = 0;\n\n\t};\n\n\tLayers.prototype.test = function test ( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t};\n\n\tvar _object3DId = 0;\n\n\tvar _v1$2 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$2.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$2.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix4( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i$1 = 0, l$1 = this.material.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i$1 ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i$2 = 0; i$2 < this.children.length; i$2 ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i$2 ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes$1 = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes$1.length > 0 ) { output.shapes = shapes$1; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tvar Plane = function Plane( normal, constant ) {\n\n\t\tObject.defineProperty( this, 'isPlane', { value: true } );\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t};\n\n\tPlane.prototype.set = function set ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t};\n\n\tPlane.prototype.setComponents = function setComponents ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t};\n\n\tPlane.prototype.setFromNormalAndCoplanarPoint = function setFromNormalAndCoplanarPoint ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t};\n\n\tPlane.prototype.setFromCoplanarPoints = function setFromCoplanarPoints ( a, b, c ) {\n\n\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t};\n\n\tPlane.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tPlane.prototype.copy = function copy ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t};\n\n\tPlane.prototype.normalize = function normalize () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t};\n\n\tPlane.prototype.negate = function negate () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t};\n\n\tPlane.prototype.distanceToPoint = function distanceToPoint ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t};\n\n\tPlane.prototype.distanceToSphere = function distanceToSphere ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t};\n\n\tPlane.prototype.projectPoint = function projectPoint ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t};\n\n\tPlane.prototype.intersectLine = function intersectLine ( line, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tvar direction = line.delta( _vector1 );\n\n\t\tvar denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn undefined;\n\n\t\t}\n\n\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t};\n\n\tPlane.prototype.intersectsLine = function intersectsLine ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t};\n\n\tPlane.prototype.intersectsBox = function intersectsBox ( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t};\n\n\tPlane.prototype.intersectsSphere = function intersectsSphere ( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t};\n\n\tPlane.prototype.coplanarPoint = function coplanarPoint ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t};\n\n\tPlane.prototype.applyMatrix4 = function applyMatrix4 ( matrix, optionalNormalMatrix ) {\n\n\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t};\n\n\tPlane.prototype.translate = function translate ( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t};\n\n\tPlane.prototype.equals = function equals ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t};\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tvar Triangle = function Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t};\n\n\tTriangle.getNormal = function getNormal ( a, b, c, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tvar targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t};\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tTriangle.getBarycoord = function getBarycoord ( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$1.subVectors( point, a );\n\n\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tvar invDenom = 1 / denom;\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t};\n\n\tTriangle.containsPoint = function containsPoint ( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3 );\n\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t};\n\n\tTriangle.getUV = function getUV ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\treturn target;\n\n\t};\n\n\tTriangle.isFrontFacing = function isFrontFacing ( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t};\n\n\tTriangle.prototype.set = function set ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t};\n\n\tTriangle.prototype.setFromPointsAndIndices = function setFromPointsAndIndices ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t};\n\n\tTriangle.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tTriangle.prototype.copy = function copy ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t};\n\n\tTriangle.prototype.getArea = function getArea () {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t};\n\n\tTriangle.prototype.getMidpoint = function getMidpoint ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t};\n\n\tTriangle.prototype.getNormal = function getNormal ( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t};\n\n\tTriangle.prototype.getPlane = function getPlane ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\ttarget = new Plane();\n\n\t\t}\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t};\n\n\tTriangle.prototype.getBarycoord = function getBarycoord ( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t};\n\n\tTriangle.prototype.getUV = function getUV ( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t};\n\n\tTriangle.prototype.containsPoint = function containsPoint ( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t};\n\n\tTriangle.prototype.isFrontFacing = function isFrontFacing ( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t};\n\n\tTriangle.prototype.intersectsBox = function intersectsBox ( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t};\n\n\tTriangle.prototype.closestPointToPoint = function closestPointToPoint ( p, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tvar a = this.a, b = this.b, c = this.c;\n\t\tvar v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tvar d1 = _vab.dot( _vap );\n\t\tvar d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tvar d3 = _vab.dot( _vbp );\n\t\tvar d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tvar vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tvar d5 = _vab.dot( _vcp );\n\t\tvar d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tvar vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tvar va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tvar denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t};\n\n\tTriangle.prototype.equals = function equals ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t};\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tvar Color = function Color( r, g, b ) {\n\n\t\tObject.defineProperty( this, 'isColor', { value: true } );\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t};\n\n\tColor.prototype.set = function set ( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.setScalar = function setScalar ( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.setHex = function setHex ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.setRGB = function setRGB ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.setHSL = function setHSL ( h, s, l ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = MathUtils.euclideanModulo( h, 1 );\n\t\ts = MathUtils.clamp( s, 0, 1 );\n\t\tl = MathUtils.clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.setStyle = function setStyle ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) { return; }\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.setColorName = function setColorName ( style ) {\n\n\t\t// color keywords\n\t\tvar hex = _colorKeywords[ style ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.clone = function clone () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t};\n\n\tColor.prototype.copy = function copy ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.copyGammaToLinear = function copyGammaToLinear ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.copyLinearToGamma = function copyLinearToGamma ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.convertGammaToLinear = function convertGammaToLinear ( gammaFactor ) {\n\n\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.convertLinearToGamma = function convertLinearToGamma ( gammaFactor ) {\n\n\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.copySRGBToLinear = function copySRGBToLinear ( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.copyLinearToSRGB = function copyLinearToSRGB ( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.convertSRGBToLinear = function convertSRGBToLinear () {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.convertLinearToSRGB = function convertLinearToSRGB () {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.getHex = function getHex () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t};\n\n\tColor.prototype.getHexString = function getHexString () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t};\n\n\tColor.prototype.getHSL = function getHSL ( target ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t}\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t};\n\n\tColor.prototype.getStyle = function getStyle () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t};\n\n\tColor.prototype.offsetHSL = function offsetHSL ( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.add = function add ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.addColors = function addColors ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.addScalar = function addScalar ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.sub = function sub ( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.multiply = function multiply ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.multiplyScalar = function multiplyScalar ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.lerp = function lerp ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.lerpHSL = function lerpHSL ( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tvar h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );\n\t\tvar s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );\n\t\tvar l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.equals = function equals ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t};\n\n\tColor.prototype.fromArray = function fromArray ( array, offset ) {\n\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.toArray = function toArray ( array, offset ) {\n\n\t\tif ( array === undefined ) { array = []; }\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t};\n\n\tColor.prototype.fromBufferAttribute = function fromBufferAttribute ( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\tif ( attribute.normalized === true ) {\n\n\t\t\t// assuming Uint8Array\n\n\t\t\tthis.r /= 255;\n\t\t\tthis.g /= 255;\n\t\t\tthis.b /= 255;\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tColor.prototype.toJSON = function toJSON () {\n\n\t\treturn this.getHex();\n\n\t};\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\tvar Face3 = function Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t};\n\n\tFace3.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tFace3.prototype.copy = function copy ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i$1 = 0, il$1 = source.vertexColors.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\tthis.vertexColors[ i$1 ] = source.vertexColors[ i$1 ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function ( /* shaderobject, renderer */ ) {},\n\n\t\tcustomProgramCacheKey: function () {\n\n\t\t\treturn this.onBeforeCompile.toString();\n\n\t\t},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors ) { data.vertexColors = true; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes;\n\t\t\tvar dstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\tvar _vector$3 = new Vector3();\n\tvar _vector2$1 = new Vector2();\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tif ( this.itemSize === 2 ) {\n\n\t\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = this.count; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\t_vector$3.fromBufferAttribute( this, i$1 );\n\t\t\t\t\t_vector$3.applyMatrix3( m );\n\n\t\t\t\t\tthis.setXYZ( i$1, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyNormalMatrix( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.transformDirection( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\tvar DirectGeometry = function DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t};\n\n\tDirectGeometry.prototype.computeGroups = function computeGroups ( geometry ) {\n\n\t\tvar groups = [];\n\n\t\tvar group, i;\n\t\tvar materialIndex = undefined;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t};\n\n\tDirectGeometry.prototype.fromGeometry = function fromGeometry ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t data: []\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i$1 = 0; i$1 < morphNormalsLength; i$1 ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i$1 ] = {\n\t\t\t\t\tname: morphNormals[ i$1 ].name,\n\t\t\t\t\t data: []\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t}\n\n\t\tfor ( var i$2 = 0; i$2 < faces.length; i$2 ++ ) {\n\n\t\t\tvar face = faces[ i$2 ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i$2 ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i$2 );\n\n\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs$1 = faceVertexUvs[ 1 ][ i$2 ];\n\n\t\t\t\tif ( vertexUvs$1 !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs$1[ 0 ], vertexUvs$1[ 1 ], vertexUvs$1[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i$2 );\n\n\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j$1 = 0; j$1 < morphNormalsLength; j$1 ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j$1 ].vertexNormals[ i$2 ];\n\n\t\t\t\tmorphTargetsNormal[ j$1 ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\ttangent.transformDirection( matrix );\n\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tvar attribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tvar attribute$1 = this.attributes.normal;\n\n\t\t\t\tif ( attribute$1 !== undefined ) {\n\n\t\t\t\t\tattribute$1.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute$1.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tvar attribute$2 = this.attributes.color;\n\n\t\t\t\tif ( attribute$2 !== undefined ) {\n\n\t\t\t\t\tattribute$2.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute$2.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tvar attribute$3 = this.attributes.uv;\n\n\t\t\t\tif ( attribute$3 !== undefined ) {\n\n\t\t\t\t\tattribute$3.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute$3.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tvar attribute$4 = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute$4 !== undefined ) {\n\n\t\t\t\t\tattribute$4.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute$4.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\t\tthis.boundingBox.set(\n\t\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t\t);\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i$1 = 0, il$1 = position.count; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i$1 );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = morphAttributesPosition.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute$1 = morphAttributesPosition[ i$2 ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute$1.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute$1, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar positionAttribute = this.getAttribute( 'position' );\n\n\t\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\t\tvar normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tfor ( var i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tfor ( var i$1 = 0, il$1 = index.count; i$1 < il$1; i$1 += 3 ) {\n\n\t\t\t\t\t\tvar vA = index.getX( i$1 + 0 );\n\t\t\t\t\t\tvar vB = index.getX( i$1 + 1 );\n\t\t\t\t\t\tvar vC = index.getX( i$1 + 2 );\n\n\t\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\t\tnA.add( cb );\n\t\t\t\t\t\tnB.add( cb );\n\t\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = positionAttribute.count; i$2 < il$2; i$2 += 3 ) {\n\n\t\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i$2 + 0 );\n\t\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i$2 + 1 );\n\t\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i$2 + 2 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormalAttribute.setXYZ( i$2 + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( i$2 + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( i$2 + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.fromBufferAttribute( normals, i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\tvar normalized = attribute.normalized;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( var name$1 in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name$1 ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute$1 = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute$1 = convertBufferAttribute( attribute$1, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute$1 );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name$1 ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i$1 = 0, l = groups.length; i$1 < l; i$1 ++ ) {\n\n\t\t\t\tvar group = groups[ i$1 ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key$1 in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key$1 ];\n\n\t\t\t\tvar attributeData = attribute.toJSON( data.data );\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key$1 ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key$2 in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key$2 ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute$1 = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData$1 = attribute$1.toJSON( data.data );\n\n\t\t\t\t\tif ( attribute$1.name !== '' ) { attributeData$1.name = attribute$1.name; }\n\n\t\t\t\t\tarray.push( attributeData$1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key$2 ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t const parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t const values = [];\n\n\t\t\t for ( const key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// used for storing cloned, shared data\n\n\t\t\tvar data = {};\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( var name$1 in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name$1 ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name$1 ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( var i$1 = 0, l$1 = groups.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\tvar group = groups[ i$1 ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tvar name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tvar start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tvar end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( var j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\tvar a = index.getX( j );\n\t\t\t\t\t\t\t\tvar b = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tvar c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar start$1 = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tvar end$1 = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( var i$1 = start$1, il$1 = end$1; i$1 < il$1; i$1 += 3 ) {\n\n\t\t\t\t\t\t\tvar a$1 = index.getX( i$1 );\n\t\t\t\t\t\t\tvar b$1 = index.getX( i$1 + 1 );\n\t\t\t\t\t\t\tvar c$1 = index.getX( i$1 + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$1, b$1, c$1 );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i$1 / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( var i$2 = 0, il$2 = groups.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\t\tvar group$1 = groups[ i$2 ];\n\t\t\t\t\t\t\tvar groupMaterial$1 = material[ group$1.materialIndex ];\n\n\t\t\t\t\t\t\tvar start$2 = Math.max( group$1.start, drawRange.start );\n\t\t\t\t\t\t\tvar end$2 = Math.min( ( group$1.start + group$1.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( var j$1 = start$2, jl$1 = end$2; j$1 < jl$1; j$1 += 3 ) {\n\n\t\t\t\t\t\t\t\tvar a$2 = j$1;\n\t\t\t\t\t\t\t\tvar b$2 = j$1 + 1;\n\t\t\t\t\t\t\t\tvar c$2 = j$1 + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial$1, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$2, b$2, c$2 );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j$1 / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group$1.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar start$3 = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tvar end$3 = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( var i$3 = start$3, il$3 = end$3; i$3 < il$3; i$3 += 3 ) {\n\n\t\t\t\t\t\t\tvar a$3 = i$3;\n\t\t\t\t\t\t\tvar b$3 = i$3 + 1;\n\t\t\t\t\t\t\tvar c$3 = i$3 + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$3, b$3, c$3 );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i$3 / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tvar fvA = vertices[ face.a ];\n\t\t\t\t\tvar fvB = vertices[ face.b ];\n\t\t\t\t\tvar fvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.boneTransform( a, _vA );\n\t\t\tobject.boneTransform( b, _vB );\n\t\t\tobject.boneTransform( c, _vC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.faces.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tvar face = this.faces[ i$1 ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar index = geometry.index !== null ? geometry.index : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar position = attributes.position;\n\t\t\tvar normal = attributes.normal;\n\t\t\tvar color = attributes.color;\n\t\t\tvar uv = attributes.uv;\n\t\t\tvar uv2 = attributes.uv2;\n\n\t\t\tif ( uv2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromBufferAttribute( position, i ) );\n\n\t\t\t\tif ( color !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromBufferAttribute( color, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( color === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone()\n\t\t\t\t];\n\n\t\t\t\tvar vertexNormals = ( normal === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromBufferAttribute( normal, a ),\n\t\t\t\t\tnew Vector3().fromBufferAttribute( normal, b ),\n\t\t\t\t\tnew Vector3().fromBufferAttribute( normal, c )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uv !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, a ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, b ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, c )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, a ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, b ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, c )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < groups.length; i$1 ++ ) {\n\n\t\t\t\t\tvar group = groups[ i$1 ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( index.getX( j ), index.getX( j + 1 ), index.getX( j + 2 ), group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tfor ( var i$2 = 0; i$2 < index.count; i$2 += 3 ) {\n\n\t\t\t\t\t\taddFace( index.getX( i$2 ), index.getX( i$2 + 1 ), index.getX( i$2 + 2 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i$3 = 0; i$3 < position.count; i$3 += 3 ) {\n\n\t\t\t\t\t\taddFace( i$3, i$3 + 1, i$3 + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar vertices = new Array( this.vertices.length );\n\n\t\t\tfor ( var v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( var f$1 = 0, fl$1 = this.faces.length; f$1 < fl$1; f$1 ++ ) {\n\n\t\t\t\t\tvar face$1 = this.faces[ f$1 ];\n\n\t\t\t\t\tvertices[ face$1.a ].add( face$1.normal );\n\t\t\t\t\tvertices[ face$1.b ].add( face$1.normal );\n\t\t\t\t\tvertices[ face$1.c ].add( face$1.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var v$1 = 0, vl$1 = this.vertices.length; v$1 < vl$1; v$1 ++ ) {\n\n\t\t\t\tvertices[ v$1 ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var f$2 = 0, fl$2 = this.faces.length; f$2 < fl$2; f$2 ++ ) {\n\n\t\t\t\tvar face$2 = this.faces[ f$2 ];\n\n\t\t\t\tvar vertexNormals = face$2.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face$2.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face$2.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face$2.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face$2.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face$2.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face$2.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( var i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.morphTargets.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i$1 ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i$1 ] = {};\n\t\t\t\t\tthis.morphNormals[ i$1 ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i$1 ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i$1 ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i$1 ].vertexNormals;\n\n\t\t\t\t\tfor ( var f$1 = 0, fl$1 = this.faces.length; f$1 < fl$1; f$1 ++ ) {\n\n\t\t\t\t\t\tvar faceNormal = new Vector3();\n\t\t\t\t\t\tvar vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i$1 ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i$1 ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tfor ( var f$2 = 0, fl$2 = this.faces.length; f$2 < fl$2; f$2 ++ ) {\n\n\t\t\t\t\tvar face$1 = this.faces[ f$2 ];\n\n\t\t\t\t\tvar faceNormal$1 = morphNormals.faceNormals[ f$2 ];\n\t\t\t\t\tvar vertexNormals$1 = morphNormals.vertexNormals[ f$2 ];\n\n\t\t\t\t\tfaceNormal$1.copy( face$1.normal );\n\n\t\t\t\t\tvertexNormals$1.a.copy( face$1.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals$1.b.copy( face$1.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals$1.c.copy( face$1.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( var f$3 = 0, fl$3 = this.faces.length; f$3 < fl$3; f$3 ++ ) {\n\n\t\t\t\tvar face$2 = this.faces[ f$3 ];\n\n\t\t\t\tface$2.normal = face$2.__originalFaceNormal;\n\t\t\t\tface$2.vertexNormals = face$2.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix;\n\t\t\tvar vertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i$1 = 0, il$1 = colors2.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i$1 ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( var i$2 = 0, il$2 = faces2.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\tvar face = faces2[ i$2 ];\n\t\t\t\tvar normal = (void 0), color = (void 0);\n\t\t\t\tvar faceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tvar faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j$1 = 0, jl$1 = faceVertexColors.length; j$1 < jl$1; j$1 ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j$1 ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i$3 = 0, il$3 = geometry.faceVertexUvs.length; i$3 < il$3; i$3 ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i$3 ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i$3 ] === undefined ) { this.faceVertexUvs[ i$3 ] = []; }\n\n\t\t\t\tfor ( var j$2 = 0, jl$2 = faceVertexUvs2.length; j$2 < jl$2; j$2 ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j$2 ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i$3 ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar v = this.vertices[ i ];\n\t\t\t\tvar key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.faces.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tvar face = this.faces[ i$1 ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tvar indices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i$1 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i$2 = faceIndicesToRemove.length - 1; i$2 >= 0; i$2 -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i$2 ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( var j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i$1 = 0; i$1 < length; i$1 ++ ) {\n\n\t\t\t\tvar id = faces[ i$1 ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i$1 = 0; i$1 < this.faces.length; i$1 ++ ) {\n\n\t\t\t\tvar face = this.faces[ i$1 ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i$1 ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i$1 ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t const parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t const values = [];\n\n\t\t\t for ( const key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( var i$1 = 0, il$1 = colors.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i$1 ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( var i$2 = 0, il$2 = faces.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i$2 ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( var i$3 = 0, il$3 = source.faceVertexUvs.length; i$3 < il$3; i$3 ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i$3 ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i$3 ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i$3 ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i$3 ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( var i$4 = 0, il$4 = morphTargets.length; i$4 < il$4; i$4 ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i$4 ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i$4 ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( var j$1 = 0, jl$1 = morphTargets[ i$4 ].vertices.length; j$1 < jl$1; j$1 ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i$4 ].vertices[ j$1 ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i$4 ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( var j$2 = 0, jl$2 = morphTargets[ i$4 ].normals.length; j$2 < jl$2; j$2 ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i$4 ].normals[ j$2 ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( var i$5 = 0, il$5 = morphNormals.length; i$5 < il$5; i$5 ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i$5 ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( var j$3 = 0, jl$3 = morphNormals[ i$5 ].vertexNormals.length; j$3 < jl$3; j$3 ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i$5 ].vertexNormals[ j$3 ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i$5 ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( var j$4 = 0, jl$4 = morphNormals[ i$5 ].faceNormals.length; j$4 < jl$4; j$4 ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i$5 ].faceNormals[ j$4 ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( var i$6 = 0, il$6 = skinWeights.length; i$6 < il$6; i$6 ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i$6 ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( var i$7 = 0, il$7 = skinIndices.length; i$7 < il$7; i$7 ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i$7 ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( var i$8 = 0, il$8 = lineDistances.length; i$8 < il$8; i$8 ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i$8 ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t// BoxGeometry\n\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tBoxGeometry.prototype = Object.create( Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t// BoxBufferGeometry\n\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\t\tif ( width === void 0 ) width = 1;\n\t\t\tif ( height === void 0 ) height = 1;\n\t\t\tif ( depth === void 0 ) depth = 1;\n\t\t\tif ( widthSegments === void 0 ) widthSegments = 1;\n\t\t\tif ( heightSegments === void 0 ) heightSegments = 1;\n\t\t\tif ( depthSegments === void 0 ) depthSegments = 1;\n\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments );\n\t\t\theightSegments = Math.floor( heightSegments );\n\t\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( var iy$1 = 0; iy$1 < gridY; iy$1 ++ ) {\n\n\t\t\t\t\tfor ( var ix$1 = 0; ix$1 < gridX; ix$1 ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix$1 + gridX1 * iy$1;\n\t\t\t\t\t\tvar b = numberOfVertices + ix$1 + gridX1 * ( iy$1 + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix$1 + 1 ) + gridX1 * ( iy$1 + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix$1 + 1 ) + gridX1 * iy$1;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   const w = 1920;\n\t\t *   const h = 1080;\n\t\t *   const fullWidth = w * 3;\n\t\t *   const fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near;\n\t\t\tvar top = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\t\tvar height = 2 * top;\n\t\t\tvar width = this.aspect * height;\n\t\t\tvar left = - 0.5 * width;\n\t\t\tvar view = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, renderTarget ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget !== true ) {\n\n\t\t\tconsole.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\trenderer.xr.enabled = false;\n\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\tfunction WebGLCubeRenderTarget( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tWebGLRenderTarget.call( this, size, size, options );\n\n\t\tthis.texture.isWebGLCubeRenderTargetTexture = true; // HACK Why is texture not a CubeTexture?\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = RGBAFormat; // see #18859\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */\"\\n\\n\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\n\t\t\tfragmentShader: /* glsl */\"\\n\\n\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t}\\n\\t\\t\"\n\t\t};\n\n\t\tvar geometry = new BoxBufferGeometry( 5, 5, 5 );\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( geometry, material );\n\n\t\tvar currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) { texture.minFilter = LinearFilter; }\n\n\t\tvar camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tvar Frustum = function Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t};\n\n\tFrustum.prototype.set = function set ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t};\n\n\tFrustum.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tFrustum.prototype.copy = function copy ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tFrustum.prototype.setFromProjectionMatrix = function setFromProjectionMatrix ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t};\n\n\tFrustum.prototype.intersectsObject = function intersectsObject ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t};\n\n\tFrustum.prototype.intersectsSprite = function intersectsSprite ( sprite ) {\n\n\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t};\n\n\tFrustum.prototype.intersectsSphere = function intersectsSphere ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n\tFrustum.prototype.intersectsBox = function intersectsBox ( box ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n\tFrustum.prototype.containsPoint = function containsPoint ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\t\tvar requestId = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction WebGLAttributes( gl, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\t\tvar cached = buffers.get( attribute );\n\n\t\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t// PlaneGeometry\n\n\t\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'PlaneGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\t\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\t\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\t\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\n\t\t\tvar width_half = width / 2;\n\t\t\tvar height_half = height / 2;\n\n\t\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\tvar segment_width = width / gridX;\n\t\t\tvar segment_height = height / gridY;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( var iy$1 = 0; iy$1 < gridY; iy$1 ++ ) {\n\n\t\t\t\tfor ( var ix$1 = 0; ix$1 < gridX; ix$1 ++ ) {\n\n\t\t\t\t\tvar a = ix$1 + gridX1 * iy$1;\n\t\t\t\t\tvar b = ix$1 + gridX1 * ( iy$1 + 1 );\n\t\t\t\t\tvar c = ( ix$1 + 1 ) + gridX1 * ( iy$1 + 1 );\n\t\t\t\t\tvar d = ( ix$1 + 1 ) + gridX1 * iy$1;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t}\n\n\t\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor.xyz *= color.xyz;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmissionmap_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n#endif\";\n\n\tvar transmissionmap_pars_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\tuniform sampler2D transmissionMap;\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSMISSION\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSMISSION\\n\\tuniform float transmission;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <transmissionmap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <transmissionmap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSMISSION\\n\\t\\tdiffuseColor.a *= saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmissionmap_fragment: transmissionmap_fragment,\n\t\ttransmissionmap_pars_fragment: transmissionmap_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tuv2Transform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {}\n\t\t\t} },\n\n\t\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowNormalBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {}\n\t\t\t} },\n\n\t\t\tspotLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowNormalBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {}\n\t\t\t} },\n\n\t\t\tpointLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowNormalBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} },\n\n\t\t\tltc_1: { value: null },\n\t\t\tltc_2: { value: null }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 1.0 },\n\t\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\ttoon: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatMap: { value: null },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\ttransmission: { value: 0 },\n\t\t\t\ttransmissionMap: { value: null },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\tfunction WebGLBackground( renderer, cubemaps, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif ( background && background.isTexture ) {\n\n\t\t\t\tbackground = cubemaps.get( background );\n\n\t\t\t}\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.isWebGLCubeRenderTargetTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tif ( background.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\t// TODO Deprecate\n\n\t\t\t\t\tbackground = background.texture;\n\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\tfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\n\t\tvar extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\t\tvar vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\t\tvar bindingStates = {};\n\n\t\tvar defaultState = createBindingState( null );\n\t\tvar currentState = defaultState;\n\n\t\tfunction setup( object, material, program, geometry, index ) {\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( vaoAvailable ) {\n\n\t\t\t\tvar state = getBindingState( geometry, program, material );\n\n\t\t\t\tif ( currentState !== state ) {\n\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate( geometry, index );\n\n\t\t\t\tif ( updateBuffers ) { saveCache( geometry, index ); }\n\n\t\t\t} else {\n\n\t\t\t\tvar wireframe = ( material.wireframe === true );\n\n\t\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\t\tupdateBuffers = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh === true ) {\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tgl.bindBuffer( 34963, attributes.get( index ).buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\n\t\t\tif ( capabilities.isWebGL2 ) { return gl.createVertexArray(); }\n\n\t\t\treturn extension.createVertexArrayOES();\n\n\t\t}\n\n\t\tfunction bindVertexArrayObject( vao ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) { return gl.bindVertexArray( vao ); }\n\n\t\t\treturn extension.bindVertexArrayOES( vao );\n\n\t\t}\n\n\t\tfunction deleteVertexArrayObject( vao ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) { return gl.deleteVertexArray( vao ); }\n\n\t\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t\t}\n\n\t\tfunction getBindingState( geometry, program, material ) {\n\n\t\t\tvar wireframe = ( material.wireframe === true );\n\n\t\t\tvar programMap = bindingStates[ geometry.id ];\n\n\t\t\tif ( programMap === undefined ) {\n\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t\t}\n\n\t\t\tvar stateMap = programMap[ program.id ];\n\n\t\t\tif ( stateMap === undefined ) {\n\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t\t}\n\n\t\t\tvar state = stateMap[ wireframe ];\n\n\t\t\tif ( state === undefined ) {\n\n\t\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\t\tstateMap[ wireframe ] = state;\n\n\t\t\t}\n\n\t\t\treturn state;\n\n\t\t}\n\n\t\tfunction createBindingState( vao ) {\n\n\t\t\tvar newAttributes = [];\n\t\t\tvar enabledAttributes = [];\n\t\t\tvar attributeDivisors = [];\n\n\t\t\tfor ( var i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\t\t\t\tenabledAttributes[ i ] = 0;\n\t\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t\t}\n\n\t\t\treturn {\n\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction needsUpdate( geometry, index ) {\n\n\t\t\tvar cachedAttributes = currentState.attributes;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( Object.keys( cachedAttributes ).length !== Object.keys( geometryAttributes ).length ) { return true; }\n\n\t\t\tfor ( var key in geometryAttributes ) {\n\n\t\t\t\tvar cachedAttribute = cachedAttributes[ key ];\n\t\t\t\tvar geometryAttribute = geometryAttributes[ key ];\n\n\t\t\t\tif ( cachedAttribute === undefined ) { return true; }\n\n\t\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) { return true; }\n\n\t\t\t\tif ( cachedAttribute.data !== geometryAttribute.data ) { return true; }\n\n\t\t\t}\n\n\t\t\tif ( currentState.index !== index ) { return true; }\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfunction saveCache( geometry, index ) {\n\n\t\t\tvar cache = {};\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif ( attribute.data ) {\n\n\t\t\t\t\tdata.data = attribute.data;\n\n\t\t\t\t}\n\n\t\t\t\tcache[ key ] = data;\n\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\n\t\t\tcurrentState.index = index;\n\n\t\t}\n\n\t\tfunction initAttributes() {\n\n\t\t\tvar newAttributes = currentState.newAttributes;\n\n\t\t\tfor ( var i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\t\t\tvar attributeDivisors = currentState.attributeDivisors;\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor ( var i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n\n\t\t\tif ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n\n\t\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t\t} else {\n\n\t\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tinitAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\tvertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\tvertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute$1 = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute$1 === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer$1 = attribute$1.buffer;\n\t\t\t\t\t\tvar type$1 = attribute$1.type;\n\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer$1 );\n\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 0, 4, type$1, false, 64, 0 );\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 1, 4, type$1, false, 64, 16 );\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 2, 4, type$1, false, 64, 32 );\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 3, 4, type$1, false, 64, 48 );\n\n\t\t\t\t\t} else if ( name === 'instanceColor' ) {\n\n\t\t\t\t\t\tvar attribute$2 = attributes.get( object.instanceColor );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute$2 === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer$2 = attribute$2.buffer;\n\t\t\t\t\t\tvar type$2 = attribute$2.type;\n\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute, 1 );\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer$2 );\n\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute, 3, type$2, false, 12, 0 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\treset();\n\n\t\t\tfor ( var geometryId in bindingStates ) {\n\n\t\t\t\tvar programMap = bindingStates[ geometryId ];\n\n\t\t\t\tfor ( var programId in programMap ) {\n\n\t\t\t\t\tvar stateMap = programMap[ programId ];\n\n\t\t\t\t\tfor ( var wireframe in stateMap ) {\n\n\t\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\t\tif ( bindingStates[ geometry.id ] === undefined ) { return; }\n\n\t\t\tvar programMap = bindingStates[ geometry.id ];\n\n\t\t\tfor ( var programId in programMap ) {\n\n\t\t\t\tvar stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( var wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometry.id ];\n\n\t\t}\n\n\t\tfunction releaseStatesOfProgram( program ) {\n\n\t\t\tfor ( var geometryId in bindingStates ) {\n\n\t\t\t\tvar programMap = bindingStates[ geometryId ];\n\n\t\t\t\tif ( programMap[ program.id ] === undefined ) { continue; }\n\n\t\t\t\tvar stateMap = programMap[ program.id ];\n\n\t\t\t\tfor ( var wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ program.id ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\tresetDefaultState();\n\n\t\t\tif ( currentState === defaultState ) { return; }\n\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t}\n\n\t\t// for backward-compatilibity\n\n\t\tfunction resetDefaultState() {\n\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t\t};\n\n\t}\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode, 1 );\n\n\t\t}\n\n\t\tfunction renderInstances( start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\tfunction WebGLClipping( properties ) {\n\n\t\tvar scope = this;\n\n\t\tvar globalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false;\n\n\t\tvar plane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( material, camera, useCache ) {\n\n\t\t\tvar planes = material.clippingPlanes,\n\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\tclipShadows = material.clipShadows;\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\t\tvar dstArray = materialProperties.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0;\n\t\t\tvar dstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\tfunction WebGLCubeMaps( renderer ) {\n\n\t\tvar cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tfunction get( texture ) {\n\n\t\t\tif ( texture && texture.isTexture ) {\n\n\t\t\t\tvar mapping = texture.mapping;\n\n\t\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\t\tvar cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar image = texture.image;\n\n\t\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\t\tvar currentRenderList = renderer.getRenderList();\n\t\t\t\t\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tvar currentRenderState = renderer.getRenderState();\n\n\t\t\t\t\t\t\tvar renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\t\t\t\t\t\trenderer.setRenderList( currentRenderList );\n\t\t\t\t\t\t\trenderer.setRenderState( currentRenderState );\n\n\t\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tcubemaps = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\thas: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ] !== null;\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension !== null;\n\n\t\t\t},\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( ! this.has( name ) ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\treturn extensions[ name ];\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name$1 in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name$1 ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array$1 = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = ( array$1.length / 3 ) - 1; i$1 < l$1; i$1 += 3 ) {\n\n\t\t\t\t\tvar a$1 = i$1 + 0;\n\t\t\t\t\tvar b$1 = i$1 + 1;\n\t\t\t\t\tvar c$1 = i$1 + 2;\n\n\t\t\t\t\tindices.push( a$1, b$1, b$1, c$1, c$1, a$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode, 1 );\n\n\t\t}\n\n\t\tfunction renderInstances( start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\tfunction numericalSort( a, b ) {\n\n\t\treturn a[ 0 ] - b[ 0 ];\n\n\t}\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tvar workInfluences = [];\n\n\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t\t}\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i$1 = 0; i$1 < length; i$1 ++ ) {\n\n\t\t\t\tvar influence = influences[ i$1 ];\n\n\t\t\t\tinfluence[ 0 ] = i$1;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i$1 ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( var i$2 = 0; i$2 < 8; i$2 ++ ) {\n\n\t\t\t\tif ( i$2 < length && influences[ i$2 ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i$2 ][ 0 ] = influences[ i$2 ][ 0 ];\n\t\t\t\t\tworkInfluences[ i$2 ][ 1 ] = influences[ i$2 ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i$2 ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i$2 ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i$3 = 0; i$3 < 8; i$3 ++ ) {\n\n\t\t\t\tvar influence$1 = workInfluences[ i$3 ];\n\t\t\t\tvar index = influence$1[ 0 ];\n\t\t\t\tvar value = influence$1[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i$3 ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i$3, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i$3 ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i$3, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i$3 ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i$3 ) !== undefined ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i$3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i$3 ) !== undefined ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i$3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i$3 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\t\tattributes.update( object.instanceColor, 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateMap = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize;\n\t\tvar r = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// uint\n\n\tfunction setValueV1ui( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1ui( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t\tcase 0x1405: return setValueV1ui; // UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\t\tvar id = match[ 1 ];\n\t\t\tvar idIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map;\n\t\t\t\tvar next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\t\ttoneMappingName = 'Linear';\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( parameters ) {\n\n\t\tvar chunks = [\n\t\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string\n\t\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n\t}\n\n\tfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\t\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\t\treturn loopReplacer( match, start, end, snippet );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = parameters.defines;\n\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\t\tvar versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + \"\\n\" : '';\n\n\t\tif ( parameters.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\t\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\t\tversionString = '#version 300 es\\n';\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#define varying in',\n\t\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t}\n\n\t\tvar vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Clean up\n\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\tfunction WebGLPrograms( renderer, cubemaps, extensions, capabilities, bindingStates, clipping ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar precision = capabilities.precision;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"instancingColor\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\", \"transmissionMap\"\n\t\t];\n\n\t\tfunction getMaxBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar envMap = cubemaps.get( material.envMap || environment );\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? getMaxBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar vertexShader, fragmentShader;\n\n\t\t\tif ( shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ shaderID ];\n\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t\t} else {\n\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\t\tenvMap: !! envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !! material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !! material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\ttransmissionMap: !! material.transmissionMap,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.transmissionMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t}\n\n\t\tfunction getProgramCacheKey( parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( parameters.fragmentShader );\n\t\t\t\tarray.push( parameters.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in parameters.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t\tarray.push( renderer.outputEncoding );\n\t\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\t}\n\n\t\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\t\treturn array.join();\n\n\t\t}\n\n\t\tfunction getUniforms( material ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\t\t\tvar uniforms;\n\n\t\t\tif ( shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ shaderID ];\n\t\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\t} else {\n\n\t\t\t\tuniforms = material.uniforms;\n\n\t\t\t}\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction releaseProgram( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\n\t}\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList( properties ) {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }\n\n\t\t}\n\n\t\tfunction finish() {\n\n\t\t\t// Clear references from inactive renderItems in the list\n\n\t\t\tfor ( var i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\t\tvar renderItem = renderItems[ i ];\n\n\t\t\t\tif ( renderItem.id === null ) { break; }\n\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists( properties ) {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList( properties );\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList( properties );\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction ShadowUniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar shadowCache = ShadowUniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i$1 = 0, l = lights.length; i$1 < l; i$1 ++ ) {\n\n\t\t\t\tvar light = lights[ i$1 ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms$1 = cache.get( light );\n\n\t\t\t\t\tuniforms$1.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$1.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms$1.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms$1.distance = distance;\n\n\t\t\t\t\tuniforms$1.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms$1.direction.sub( vector3 );\n\t\t\t\t\tuniforms$1.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms$1.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms$1.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms$1.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow$1 = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms$1 = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms$1.shadowBias = shadow$1.bias;\n\t\t\t\t\t\tshadowUniforms$1.shadowNormalBias = shadow$1.normalBias;\n\t\t\t\t\t\tshadowUniforms$1.shadowRadius = shadow$1.radius;\n\t\t\t\t\t\tshadowUniforms$1.shadowMapSize = shadow$1.mapSize;\n\n\t\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms$1;\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms$1;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms$2 = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms$2.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms$2.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$2.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms$2.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms$2.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms$2.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms$2.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms$2;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms$3 = cache.get( light );\n\n\t\t\t\t\tuniforms$3.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$3.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms$3.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms$3.distance = light.distance;\n\t\t\t\t\tuniforms$3.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow$2 = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms$2 = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms$2.shadowBias = shadow$2.bias;\n\t\t\t\t\t\tshadowUniforms$2.shadowNormalBias = shadow$2.normalBias;\n\t\t\t\t\t\tshadowUniforms$2.shadowRadius = shadow$2.radius;\n\t\t\t\t\t\tshadowUniforms$2.shadowMapSize = shadow$2.mapSize;\n\t\t\t\t\t\tshadowUniforms$2.shadowCameraNear = shadow$2.camera.near;\n\t\t\t\t\t\tshadowUniforms$2.shadowCameraFar = shadow$2.camera.far;\n\n\t\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms$2;\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms$3;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms$4 = cache.get( light );\n\n\t\t\t\t\tuniforms$4.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$4.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms$4.direction.normalize();\n\n\t\t\t\t\tuniforms$4.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms$4.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms$4;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_2;\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum();\n\n\t\tvar _shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) { continue; }\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars$1 = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars$1 );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial$1 = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial$1, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\t} catch ( err ) {\n\n\t\t\t// Ignore any errors\n\n\t\t}\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tif ( internalFormatName !== null ) {\n\n\t\t\t\tif ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) { _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer ); }\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i$1 = 0; i$1 < 6; i$1 ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i$1 ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i$1, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$1, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i$2 = 0; i$2 < 6; i$2 ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, 0, glInternalFormat, cubeImage[ i$2 ].width, cubeImage[ i$2 ].height, 0, glFormat, glType, cubeImage[ i$2 ].data );\n\n\t\t\t\t\t\t\tfor ( var j$1 = 0; j$1 < mipmaps.length; j$1 ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap$1 = mipmaps[ j$1 ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap$1.image[ i$2 ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, j$1 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, 0, glInternalFormat, glFormat, glType, cubeImage[ i$2 ] );\n\n\t\t\t\t\t\t\tfor ( var j$2 = 0; j$2 < mipmaps.length; j$2 ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap$2 = mipmaps[ j$2 ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, j$2 + 1, glInternalFormat, glFormat, glType, mipmap$2.image[ i$2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format );\n\n\t\t\tvar glType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap;\n\t\t\tvar mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i$1 = 0, il$1 = mipmaps.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i$1 ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i$1, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i$1, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = mipmaps.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i$2 ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i$2, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples$1 = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples$1, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat$1 = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples$2 = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples$2, glInternalFormat$1, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat$1, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {\n\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t\t}\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < 6; i$1 ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i$1 ], renderTarget, 36064, 34069 + i$1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLCubeRenderTarget\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\t// WebGL2 formats.\n\n\t\t\tif ( p === RedIntegerFormat ) { return 36244; }\n\t\t\tif ( p === RGFormat ) { return 33319; }\n\t\t\tif ( p === RGIntegerFormat ) { return 33320; }\n\t\t\tif ( p === RGBIntegerFormat ) { return 36248; }\n\t\t\tif ( p === RGBAIntegerFormat ) { return 36249; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_ETC2_Format ) { return extension.COMPRESSED_RGB8_ETC2; }\n\t\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) { return extension.COMPRESSED_RGBA8_ETC2_EAC; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\tfunction WebXRController() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tObject.assign( WebXRController.prototype, {\n\n\t\tconstructor: WebXRController,\n\n\t\tgetHandSpace: function () {\n\n\t\t\tif ( this._hand === null ) {\n\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\n\t\t\t\tthis._hand.joints = [];\n\t\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t\t\tif ( window.XRHand ) {\n\n\t\t\t\t\tfor ( var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i ++ ) {\n\n\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\tvar joint = new Group();\n\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\tthis._hand.joints.push( joint );\n\t\t\t\t\t\t// ??\n\t\t\t\t\t\tthis._hand.add( joint );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this._hand;\n\n\t\t},\n\n\t\tgetTargetRaySpace: function () {\n\n\t\t\tif ( this._targetRay === null ) {\n\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\n\t\t},\n\n\t\tgetGripSpace: function () {\n\n\t\t\tif ( this._grip === null ) {\n\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn this._grip;\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._targetRay !== null ) {\n\n\t\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t\t}\n\n\t\t\tif ( this._grip !== null ) {\n\n\t\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t\t}\n\n\t\t\tif ( this._hand !== null ) {\n\n\t\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function ( inputSource ) {\n\n\t\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\tif ( this._targetRay !== null ) {\n\n\t\t\t\tthis._targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\tif ( this._grip !== null ) {\n\n\t\t\t\tthis._grip.visible = false;\n\n\t\t\t}\n\n\t\t\tif ( this._hand !== null ) {\n\n\t\t\t\tthis._hand.visible = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdate: function ( inputSource, frame, referenceSpace ) {\n\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\t\t\tvar handPose = null;\n\n\t\t\tvar targetRay = this._targetRay;\n\t\t\tvar grip = this._grip;\n\t\t\tvar hand = this._hand;\n\n\t\t\tif ( inputSource ) {\n\n\t\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor ( var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i ++ ) {\n\n\t\t\t\t\t\tif ( inputSource.hand[ i ] ) {\n\n\t\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\t\tvar jointPose = frame.getJointPose( inputSource.hand[ i ], referenceSpace );\n\t\t\t\t\t\t\tvar joint = hand.joints[ i ];\n\n\t\t\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t\t\t\t// Custom events\n\n\t\t\t\t\t\t\t// Check pinch\n\t\t\t\t\t\t\tvar indexTip = hand.joints[ window.XRHand.INDEX_PHALANX_TIP ];\n\t\t\t\t\t\t\tvar thumbTip = hand.joints[ window.XRHand.THUMB_PHALANX_TIP ];\n\t\t\t\t\t\t\tvar distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\t\t\t\tvar distanceToPinch = 0.02;\n\t\t\t\t\t\t\tvar threshold = 0.005;\n\n\t\t\t\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\t\t\t\ttype: \"pinchend\",\n\t\t\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\t\t\t\ttype: \"pinchstart\",\n\t\t\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t\t}\n\n\t\t\tif ( grip !== null ) {\n\n\t\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t\t}\n\n\t\t\tif ( hand !== null ) {\n\n\t\t\t\thand.visible = ( handPose !== null );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\tvar framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameras = [ cameraL, cameraR ];\n\n\t\tvar cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tvar controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tvar controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tvar controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: event.type } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tcontroller.disconnect( inputSource );\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t//\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.isPresenting = true;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tgl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t};\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources( event ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( var i$1 = 0; i$1 < event.removed.length; i$1 ++ ) {\n\n\t\t\t\tvar inputSource = event.removed[ i$1 ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( var i$2 = 0; i$2 < event.added.length; i$2 ++ ) {\n\n\t\t\t\tvar inputSource$1 = event.added[ i$2 ];\n\t\t\t\tvar controller$1 = inputSourcesMap.get( inputSource$1 );\n\n\t\t\t\tif ( controller$1 ) {\n\n\t\t\t\t\tcontroller$1.dispatchEvent( { type: 'connected', data: inputSource$1 } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + ( ipd - xOffset );\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i$1 = 0, l = children.length; i$1 < l; i$1 ++ ) {\n\n\t\t\t\tchildren[ i$1 ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tvar cameraVRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\n\t\t\t\t\tvar camera = cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i$1 = 0; i$1 < controllers.length; i$1 ++ ) {\n\n\t\t\t\tvar controller = controllers[ i$1 ];\n\t\t\t\tvar inputSource = inputSources[ i$1 ];\n\n\t\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\tfunction WebGLMaterials( properties ) {\n\n\t\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height ) {\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsLambert( uniforms, material );\n\n\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( uniforms, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsDepth( uniforms, material );\n\n\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsNormal( uniforms, material );\n\n\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\tuniforms.color.value.copy( material.color );\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tvar envMap = properties.get( material ).envMap;\n\n\t\t\tif ( envMap ) {\n\n\t\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tvar maxMipLevel = properties.get( envMap ).__maxMipLevel;\n\n\t\t\t\tif ( maxMipLevel !== undefined ) {\n\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t} else if ( material.clearcoatMap ) {\n\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\n\t\t\t} else if ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\n\t\t\t} else if ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t\t} else if ( material.lightMap ) {\n\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tvar envMap = properties.get( material ).envMap;\n\n\t\t\tif ( envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.outputEncoding = LinearEncoding;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this;\n\n\t\tvar _isContextLost = false;\n\n\t\t// internal state cache\n\n\t\tvar _framebuffer = null;\n\n\t\tvar _currentActiveCubeFace = 0;\n\t\tvar _currentActiveMipmapLevel = 0;\n\t\tvar _currentRenderTarget = null;\n\t\tvar _currentFramebuffer = null;\n\t\tvar _currentMaterialId = - 1;\n\n\t\tvar _currentCamera = null;\n\t\tvar _currentArrayCamera = null;\n\n\t\tvar _currentViewport = new Vector4();\n\t\tvar _currentScissor = new Vector4();\n\t\tvar _currentScissorTest = null;\n\n\t\t//\n\n\t\tvar _width = _canvas.width;\n\t\tvar _height = _canvas.height;\n\n\t\tvar _pixelRatio = 1;\n\t\tvar _opaqueSort = null;\n\t\tvar _transparentSort = null;\n\n\t\tvar _viewport = new Vector4( 0, 0, _width, _height );\n\t\tvar _scissor = new Vector4( 0, 0, _width, _height );\n\t\tvar _scissorTest = false;\n\n\t\t// frustum\n\n\t\tvar _frustum = new Frustum();\n\n\t\t// clipping\n\n\t\tvar _clippingEnabled = false;\n\t\tvar _localClippingEnabled = false;\n\n\t\t// camera matrices cache\n\n\t\tvar _projScreenMatrix = new Matrix4();\n\n\t\tvar _vector3 = new Vector3();\n\n\t\tvar _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl = _context;\n\n\t\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\t\tfor ( var i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\t\tvar contextName = contextNames[ i ];\n\t\t\t\tvar context = _canvas.getContext( contextName, contextAttributes );\n\t\t\t\tif ( context !== null ) { return context; }\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tvar contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\t\tcontextNames.shift();\n\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\t\tif ( _gl === null ) {\n\n\t\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, cubemaps, attributes, geometries, objects;\n\t\tvar programCache, materials, renderLists, renderStates, clipping;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'OES_vertex_array_object' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tclipping = new WebGLClipping( properties );\n\t\t\tprogramCache = new WebGLPrograms( _this, cubemaps, extensions, capabilities, bindingStates, clipping );\n\t\t\tmaterials = new WebGLMaterials( properties );\n\t\t\trenderLists = new WebGLRenderLists( properties );\n\t\t\trenderStates = new WebGLRenderStates();\n\t\t\tbackground = new WebGLBackground( _this, cubemaps, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tvar xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tbindingStates.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) { scene = _emptyScene; } // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t} else if ( index.count === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t}\n\n\t\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tvar instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tvar compiled = new WeakMap();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material ) {\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\t\tvar material2 = material[ i ];\n\n\t\t\t\t\t\t\tif ( compiled.has( material2 ) === false ) {\n\n\t\t\t\t\t\t\t\tinitMaterial( material2, scene, object );\n\t\t\t\t\t\t\t\tcompiled.set( material2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( compiled.has( material ) === false ) {\n\n\t\t\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\t\t\tcompiled.set( material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( xr.isPresenting ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost === true ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\t\tcamera = xr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\t\t\tif ( scene.isScene === true ) { scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget ); }\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled === true ) { clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled === true ) { clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset === true ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( opaqueObjects.length > 0 ) { renderObjects( opaqueObjects, scene, camera ); }\n\t\t\tif ( transparentObjects.length > 0 ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t//\n\n\t\t\tif ( scene.isScene === true ) { scene.onAfterRender( _this, scene, camera ); }\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry$1 = objects.update( object );\n\t\t\t\t\t\tvar material$1 = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material$1 ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry$1.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material$1[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry$1, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material$1.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry$1, material$1, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i$1 = 0, l$1 = children.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\tprojectObject( children[ i$1 ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\t\tvar overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tbindingStates.reset();\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, scene, object ) {\n\n\t\t\tif ( scene.isScene !== true ) { scene = _emptyScene; } // scene could be a Mesh, Line, Points, ...\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list, envMap still needs the update here to avoid a frame-late effect\n\n\t\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\t\tmaterialProperties.envMap = cubemaps.get( material.envMap || environment );\n\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get( material.envMap || materialProperties.environment );\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms();\n\t\t\tvar uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, material, object ) {\n\n\t\t\tif ( scene.isScene !== true ) { scene = _emptyScene; } // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tvar envMap = cubemaps.get( material.envMap || environment );\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled === true ) {\n\n\t\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height );\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderList = function () {\n\n\t\t\treturn currentRenderList;\n\n\t\t};\n\n\t\tthis.setRenderList = function ( renderList ) {\n\n\t\t\tcurrentRenderList = renderList;\n\n\t\t};\n\n\t\tthis.getRenderState = function () {\n\n\t\t\treturn currentRenderState;\n\n\t\t};\n\n\t\tthis.setRenderState = function ( renderState ) {\n\n\t\t\tcurrentRenderState = renderState;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\t\t\tif ( activeCubeFace === void 0 ) activeCubeFace = 0;\n\t\t\tif ( activeMipmapLevel === void 0 ) activeMipmapLevel = 0;\n\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar _webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tframebuffer = _webglFramebuffer[ activeCubeFace ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = _webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\t// As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\t\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t\t_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Generate mipmaps only when copying level 0\n\t\t\tif ( level === 0 && dstTexture.generateMipmaps ) { _gl.generateMipmap( 3553 ); }\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tfunction WebGL1Renderer( parameters ) {\n\n\t\tWebGLRenderer.call( this, parameters );\n\n\t}\n\n\tWebGL1Renderer.prototype = Object.assign( Object.create( WebGLRenderer.prototype ), {\n\n\t\tconstructor: WebGL1Renderer,\n\n\t\tisWebGL1Renderer: true\n\n\t} );\n\n\tvar FogExp2 = function FogExp2( color, density ) {\n\n\t\tObject.defineProperty( this, 'isFogExp2', { value: true } );\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t};\n\n\tFogExp2.prototype.clone = function clone () {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t};\n\n\tFogExp2.prototype.toJSON = function toJSON ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t};\n\n\tvar Fog = function Fog( color, near, far ) {\n\n\t\tObject.defineProperty( this, 'isFog', { value: true } );\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t};\n\n\tFog.prototype.clone = function clone () {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t};\n\n\tFog.prototype.toJSON = function toJSON ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t};\n\n\tfunction Scene() {\n\n\t\t\tObject3D.call(this);\n\n\t\t\tObject.defineProperty( this, 'isScene', { value: true } );\n\n\t\t\tthis.type = 'Scene';\n\n\t\t\tthis.background = null;\n\t\t\tthis.environment = null;\n\t\t\tthis.fog = null;\n\n\t\t\tthis.overrideMaterial = null;\n\n\t\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t\t}\n\n\t\t}\n\n\t\tScene.prototype = Object.create( Object3D.prototype );\n\t\tScene.prototype.constructor = Scene;\n\n\t\tScene.prototype.copy = function copy ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.environment !== null ) { this.environment = source.environment.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tScene.prototype.toJSON = function toJSON ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t};\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function ( data ) {\n\n\t\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\t\tdata.arrayBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\n\t\t\t}\n\n\t\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t\t}\n\n\t\t\tvar array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\t\tvar ib = new InterleavedBuffer( array, this.stride );\n\t\t\tib.setUsage( this.usage );\n\n\t\t\treturn ib;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( data ) {\n\n\t\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\t\tdata.arrayBuffers = {};\n\n\t\t\t}\n\n\t\t\t// generate UUID for array buffer if necessary\n\n\t\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\n\t\t\t}\n\n\t\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t},\n\n\t\tneedsUpdate: {\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.data.needsUpdate = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$6.x = this.getX( i );\n\t\t\t\t_vector$6.y = this.getY( i );\n\t\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function ( data ) {\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0; i < this.count; i ++ ) {\n\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor ( var j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( data ) {\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0; i < this.count; i ++ ) {\n\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor ( var j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// deinterleave data and save it as an ordinary buffer attribute for now\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\t// save as true interlaved attribtue\n\n\t\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\tthis.material = source.material;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tvar l;\n\n\t\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCurrentLevel: function () {\n\n\t\t\treturn this._currentLevel;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 ) / camera.zoom;\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tMesh.prototype.copy.call( this, source );\n\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\t\tthis.skeleton = source.skeleton;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tboneTransform: ( function () {\n\n\t\t\tvar basePosition = new Vector3();\n\n\t\t\tvar skinIndex = new Vector4();\n\t\t\tvar skinWeight = new Vector4();\n\n\t\t\tvar vector = new Vector3();\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function ( index, target ) {\n\n\t\t\t\tvar skeleton = this.skeleton;\n\t\t\t\tvar geometry = this.geometry;\n\n\t\t\t\tskinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t\t\tskinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t\t\tbasePosition.fromBufferAttribute( geometry.attributes.position, index ).applyMatrix4( this.bindMatrix );\n\n\t\t\t\ttarget.set( 0, 0, 0 );\n\n\t\t\t\tfor ( var i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\tvar weight = skinWeight.getComponent( i );\n\n\t\t\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\t\t\tvar boneIndex = skinIndex.getComponent( i );\n\n\t\t\t\t\t\tmatrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\t\t\ttarget.addScaledVector( vector.copy( basePosition ).applyMatrix4( matrix ), weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t\t\t};\n\n\t\t}() )\n\n\t} );\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.bones.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tvar bone$1 = this.bones[ i$1 ];\n\n\t\t\t\tif ( bone$1 ) {\n\n\t\t\t\t\tif ( bone$1.parent && bone$1.parent.isBone ) {\n\n\t\t\t\t\t\tbone$1.matrix.getInverse( bone$1.parent.matrixWorld );\n\t\t\t\t\t\tbone$1.matrix.multiply( bone$1.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone$1.matrix.copy( bone$1.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone$1.matrix.decompose( bone$1.position, bone$1.quaternion, bone$1.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tdispose: function ( ) {\n\n\t\t\tif ( this.boneTexture ) {\n\n\t\t\t\tthis.boneTexture.dispose();\n\n\t\t\t\tthis.boneTexture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tMesh.prototype.copy.call( this, source );\n\n\t\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\t\t\tthis.count = source.count;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorAt: function ( index, color ) {\n\n\t\t\tif ( this.instanceColor === null ) {\n\n\t\t\t\tthis.instanceColor = new BufferAttribute( new Float32Array( this.count * 3 ), 3 );\n\n\t\t\t}\n\n\t\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t\t},\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tfor ( var i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar intersect = _instanceIntersects[ i ];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances$1 = geometry.lineDistances;\n\n\t\t\t\tlineDistances$1[ 0 ] = 0;\n\n\t\t\t\tfor ( var i$1 = 1, l$1 = vertices.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\tlineDistances$1[ i$1 ] = lineDistances$1[ i$1 - 1 ];\n\t\t\t\t\tlineDistances$1[ i$1 ] += vertices[ i$1 - 1 ].distanceTo( vertices[ i$1 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i$1 = 0, l$1 = positions.length / 3 - 1; i$1 < l$1; i$1 += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i$1 );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i$1 + 3 );\n\n\t\t\t\t\t\tvar distSq$1 = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq$1 > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance$1 = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance$1 < raycaster.near || distance$1 > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance$1,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i$1,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i$2 = 0; i$2 < nbVertices - 1; i$2 += step ) {\n\n\t\t\t\t\tvar distSq$2 = _ray$1.distanceSqToSegment( vertices[ i$2 ], vertices[ i$2 + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq$2 > localThresholdSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance$2 = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance$2 < raycaster.near || distance$2 > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance$2,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i$2,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tvar name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances$1 = geometry.lineDistances;\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = vertices.length; i$1 < l$1; i$1 += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i$1 ] );\n\t\t\t\t\t_end$1.copy( vertices[ i$1 + 1 ] );\n\n\t\t\t\t\tlineDistances$1[ i$1 ] = ( i$1 === 0 ) ? 0 : lineDistances$1[ i$1 - 1 ];\n\t\t\t\t\tlineDistances$1[ i$1 + 1 ] = lineDistances$1[ i$1 ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i$1 = 0, l = positions.length / 3; i$1 < l; i$1 ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i$1 * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i$1, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i$2 = 0, l$1 = vertices.length; i$2 < l$1; i$2 ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i$2 ], i$2, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tvar name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tvar scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\t\t\tvar hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\t\tBufferGeometry.call(this);\n\t\t\tthis.type = 'WireframeGeometry';\n\n\t\t\t// buffer\n\n\t\t\tvar vertices = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar edge = [ 0, 0 ], edges = {};\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t\t// different logic for Geometry and BufferGeometry\n\n\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\t\tvar faces = geometry.faces;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tvar edge1 = face[ keys[ j ] ];\n\t\t\t\t\t\tvar edge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\tvar key = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( var key$1 in edges ) {\n\n\t\t\t\t\tvar e = edges[ key$1 ];\n\n\t\t\t\t\tvar vertex = geometry.vertices[ e.index1 ];\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\tvar vertex$1 = new Vector3();\n\n\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\t\tvar indices = geometry.index;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor ( var i$1 = start, l$1 = ( start + count ); i$1 < l$1; i$1 += 3 ) {\n\n\t\t\t\t\t\t\tfor ( var j$1 = 0; j$1 < 3; j$1 ++ ) {\n\n\t\t\t\t\t\t\t\tvar edge1$1 = indices.getX( i$1 + j$1 );\n\t\t\t\t\t\t\t\tvar edge2$1 = indices.getX( i$1 + ( j$1 + 1 ) % 3 );\n\t\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1$1, edge2$1 ); // sorting prevents duplicates\n\t\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1$1, edge2$1 );\n\n\t\t\t\t\t\t\t\tvar key$2 = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\t\tif ( edges[ key$2 ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\tedges[ key$2 ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// generate vertices\n\n\t\t\t\t\tfor ( var key$3 in edges ) {\n\n\t\t\t\t\t\tvar e$1 = edges[ key$3 ];\n\n\t\t\t\t\t\tvertex$1.fromBufferAttribute( position, e$1.index1 );\n\t\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\t\tvertex$1.fromBufferAttribute( position, e$1.index2 );\n\t\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\t\tvar position$1 = geometry.attributes.position;\n\n\t\t\t\t\tfor ( var i$2 = 0, l$2 = ( position$1.count / 3 ); i$2 < l$2; i$2 ++ ) {\n\n\t\t\t\t\t\tfor ( var j$2 = 0; j$2 < 3; j$2 ++ ) {\n\n\t\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\t\tvar index1 = 3 * i$2 + j$2;\n\t\t\t\t\t\t\tvertex$1.fromBufferAttribute( position$1, index1 );\n\t\t\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\t\t\tvar index2 = 3 * i$2 + ( ( j$2 + 1 ) % 3 );\n\t\t\t\t\t\t\tvertex$1.fromBufferAttribute( position$1, index2 );\n\t\t\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( var i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( var j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( var i$1 = 0; i$1 < stacks; i$1 ++ ) {\n\n\t\t\tfor ( var j$1 = 0; j$1 < slices; j$1 ++ ) {\n\n\t\t\t\tvar a = i$1 * sliceCount + j$1;\n\t\t\t\tvar b = i$1 * sliceCount + j$1 + 1;\n\t\t\t\tvar c = ( i$1 + 1 ) * sliceCount + j$1 + 1;\n\t\t\t\tvar d = ( i$1 + 1 ) * sliceCount + j$1;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t// PolyhedronGeometry\n\n\t\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'PolyhedronGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\t\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\tradius = radius || 1;\n\t\t\tdetail = detail || 0;\n\n\t\t\t// default buffer data\n\n\t\t\tvar vertexBuffer = [];\n\t\t\tvar uvBuffer = [];\n\n\t\t\t// the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide( detail );\n\n\t\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius( radius );\n\n\t\t\t// finally, create the uv data\n\n\t\t\tgenerateUVs();\n\n\t\t\t// build non-indexed geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\t\tif ( detail === 0 ) {\n\n\t\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t\t} else {\n\n\t\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t\t}\n\n\t\t\t// helper functions\n\n\t\t\tfunction subdivide( detail ) {\n\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\n\t\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t// get the vertices of the face\n\n\t\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t\t// perform subdivision\n\n\t\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tvar v = [];\n\n\t\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\t\tfor ( var i = 0; i <= cols; i ++ ) {\n\n\t\t\t\t\tv[ i ] = [];\n\n\t\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\t\tvar rows = cols - i;\n\n\t\t\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// construct all of the faces\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < cols; i$1 ++ ) {\n\n\t\t\t\t\tfor ( var j$1 = 0; j$1 < 2 * ( cols - i$1 ) - 1; j$1 ++ ) {\n\n\t\t\t\t\t\tvar k = Math.floor( j$1 / 2 );\n\n\t\t\t\t\t\tif ( j$1 % 2 === 0 ) {\n\n\t\t\t\t\t\t\tpushVertex( v[ i$1 ][ k + 1 ] );\n\t\t\t\t\t\t\tpushVertex( v[ i$1 + 1 ][ k ] );\n\t\t\t\t\t\t\tpushVertex( v[ i$1 ][ k ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tpushVertex( v[ i$1 ][ k + 1 ] );\n\t\t\t\t\t\t\tpushVertex( v[ i$1 + 1 ][ k + 1 ] );\n\t\t\t\t\t\t\tpushVertex( v[ i$1 + 1 ][ k ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction applyRadius( radius ) {\n\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\n\t\t\t\tcorrectSeam();\n\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t\t// uv data of a single face\n\n\t\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction pushVertex( vertex ) {\n\n\t\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\t\tvar stride = index * 3;\n\n\t\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\n\t\t\t\tvar centroid = new Vector3();\n\n\t\t\t\tvar uvA = new Vector2();\n\t\t\t\tvar uvB = new Vector2();\n\t\t\t\tvar uvC = new Vector2();\n\n\t\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\t\tfunction azimuth( vector ) {\n\n\t\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t\t}\n\n\n\t\t\t// Angle above the XZ plane.\n\n\t\t\tfunction inclination( vector ) {\n\n\t\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t// TetrahedronGeometry\n\n\t\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'TetrahedronGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\n\t// TetrahedronBufferGeometry\n\n\t\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\t\tvar vertices = [\n\t\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t\t];\n\n\t\t\tvar indices = [\n\t\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t\t];\n\n\t\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t}\n\n\t\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\t\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t// OctahedronGeometry\n\n\t\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'OctahedronGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\t\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\t\tvar vertices = [\n\t\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t\t];\n\n\t\t\tvar indices = [\n\t\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t\t1, 3, 4,\t1, 4, 2\n\t\t\t];\n\n\t\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t}\n\n\t\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\t\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t// IcosahedronGeometry\n\n\t\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'IcosahedronGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\t\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\t\tvar vertices = [\n\t\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t\t0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t\tt, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t\t];\n\n\t\t\tvar indices = [\n\t\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t\t];\n\n\t\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t}\n\n\t\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\t\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t// DodecahedronGeometry\n\n\t\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'DodecahedronGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\t\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\t\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\t\tvar r = 1 / t;\n\n\t\t\tvar vertices = [\n\n\t\t\t\t// (±1, ±1, ±1)\n\t\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t\t- t, 0, r, t, 0, r\n\t\t\t];\n\n\t\t\tvar indices = [\n\t\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t\t];\n\n\t\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\n\t\t}\n\n\t\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\t\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t// TubeGeometry\n\n\t\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'TubeGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\n\t\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t\t// expose internals\n\n\t\t\tthis.tangents = bufferGeometry.tangents;\n\t\t\tthis.normals = bufferGeometry.normals;\n\t\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t\t// create geometry\n\n\t\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\t\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\n\t// TubeBufferGeometry\n\n\t\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\t\tBufferGeometry.call(this);\n\t\t\tthis.type = 'TubeBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\n\t\t\ttubularSegments = tubularSegments || 64;\n\t\t\tradius = radius || 1;\n\t\t\tradialSegments = radialSegments || 8;\n\t\t\tclosed = closed || false;\n\n\t\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t\t// expose internals\n\n\t\t\tthis.tangents = frames.tangents;\n\t\t\tthis.normals = frames.normals;\n\t\t\tthis.binormals = frames.binormals;\n\n\t\t\t// helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\t\tvar P = new Vector3();\n\n\t\t\t// buffer\n\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\t\tvar indices = [];\n\n\t\t\t// create buffer data\n\n\t\t\tgenerateBufferData();\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\t// functions\n\n\t\t\tfunction generateBufferData() {\n\n\t\t\t\tfor ( var i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\t\tgenerateSegment( i );\n\n\t\t\t\t}\n\n\t\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t\t// uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs();\n\n\t\t\t\t// finally create faces\n\n\t\t\t\tgenerateIndices();\n\n\t\t\t}\n\n\t\t\tfunction generateSegment( i ) {\n\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\t\tvar N = frames.normals[ i ];\n\t\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t\t// generate normals and vertices for the current segment\n\n\t\t\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\n\t\t\t\tfor ( var j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\t\tfor ( var i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\n\t\t\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\t\tTubeBufferGeometry.prototype.toJSON = function toJSON () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.path = this.parameters.path.toJSON();\n\n\t\t\treturn data;\n\n\t\t};\n\n\t// TorusKnotGeometry\n\n\t\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'TorusKnotGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\n\t\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\t\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\n\t// TorusKnotBufferGeometry\n\n\t\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\t\tBufferGeometry.call(this);\n\t\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\n\t\t\tradius = radius || 1;\n\t\t\ttube = tube || 0.4;\n\t\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\t\tp = p || 2;\n\t\t\tq = q || 3;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar P1 = new Vector3();\n\t\t\tvar P2 = new Vector3();\n\n\t\t\tvar B = new Vector3();\n\t\t\tvar T = new Vector3();\n\t\t\tvar N = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( var i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t\t// calculate orthonormal basis\n\n\t\t\t\tT.subVectors( P2, P1 );\n\t\t\t\tN.addVectors( P2, P1 );\n\t\t\t\tB.crossVectors( T, N );\n\t\t\t\tN.crossVectors( B, T );\n\n\t\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor ( var j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( var j$1 = 1; j$1 <= tubularSegments; j$1 ++ ) {\n\n\t\t\t\tfor ( var i$1 = 1; i$1 <= radialSegments; i$1 ++ ) {\n\n\t\t\t\t\t// indices\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j$1 - 1 ) + ( i$1 - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j$1 + ( i$1 - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j$1 + i$1;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j$1 - 1 ) + i$1;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\t// this function calculates the current position on the torus curve\n\n\t\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\t\tvar cu = Math.cos( u );\n\t\t\t\tvar su = Math.sin( u );\n\t\t\t\tvar quOverP = q / p * u;\n\t\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t// TorusGeometry\n\n\t\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'TorusGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\t\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\n\t// TorusBufferGeometry\n\n\t\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\t\tBufferGeometry.call(this);\n\t\t\tthis.type = 'TorusBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\n\t\t\tradius = radius || 1;\n\t\t\ttube = tube || 0.4;\n\t\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\t\tarc = arc || Math.PI * 2;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar center = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( var j$1 = 1; j$1 <= radialSegments; j$1 ++ ) {\n\n\t\t\t\tfor ( var i$1 = 1; i$1 <= tubularSegments; i$1 ++ ) {\n\n\t\t\t\t\t// indices\n\n\t\t\t\t\tvar a = ( tubularSegments + 1 ) * j$1 + i$1 - 1;\n\t\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j$1 - 1 ) + i$1 - 1;\n\t\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j$1 - 1 ) + i$1;\n\t\t\t\t\tvar d = ( tubularSegments + 1 ) * j$1 + i$1;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t}\n\n\t\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length;\n\t\t\tvar outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n\t\t\tvar outerNode = linkedList( data, 0, outerLen, dim, true );\n\t\t\tvar triangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn filterPoints( p );\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [];\n\t\tvar i, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\n\t\t\t// filter collinear points around the cuts\n\t\t\tfilterPoints( outerNode, outerNode.next );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode;\n\t\tvar hx = hole.x;\n\t\tvar hy = hole.y;\n\t\tvar qx = - Infinity, m;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m; } // hole touches outer segment; pick leftmost endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y;\n\t\tvar tanMin = Infinity, tan;\n\n\t\tp = m;\n\n\t\tdo {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== stop );\n\n\t\treturn m;\n\n\t}\n\n\t// whether sector in vertex m contains sector in vertex p in the same coordinates\n\tfunction sectorContainsSector( m, p ) {\n\n\t\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t\t( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t\t( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\n\t\t\t( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n\t\t\t( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n\t\t\tequals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tvar o1 = sign( area( p1, q1, p2 ) );\n\t\tvar o2 = sign( area( p1, q1, q2 ) );\n\t\tvar o3 = sign( area( p2, q2, p1 ) );\n\t\tvar o4 = sign( area( p2, q2, q1 ) );\n\n\t\tif ( o1 !== o2 && o3 !== o4 ) { return true; } // general case\n\n\t\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) { return true; } // p1, q1 and p2 are collinear and p2 lies on p1q1\n\t\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) { return true; } // p1, q1 and q2 are collinear and q2 lies on p1q1\n\t\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) { return true; } // p2, q2 and p1 are collinear and p1 lies on p2q2\n\t\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) { return true; } // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\n\t}\n\n\t// for collinear points p, q, r, check if point q lies on segment pr\n\tfunction onSegment( p, q, r ) {\n\n\t\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n\t}\n\n\tfunction sign( num ) {\n\n\t\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false;\n\t\tvar px = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i$1 = 0; i$1 < triangles.length; i$1 += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i$1, i$1 + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\t\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'ExtrudeGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\t\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\t\tExtrudeGeometry.prototype.toJSON = function toJSON$1 () {\n\n\t\t\tvar data = Geometry.prototype.toJSON.call(this);\n\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\n\t\t\treturn toJSON( shapes, options, data );\n\n\t\t};\n\n\n\t// ExtrudeBufferGeometry\n\n\t\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\n\t\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\t\tvar scope = this;\n\n\t\t\tvar verticesArray = [];\n\t\t\tvar uvArray = [];\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\t\t\t\taddShape( shape );\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\t\tthis.computeVertexNormals();\n\n\t\t\t// functions\n\n\t\t\tfunction addShape( shape ) {\n\n\t\t\t\tvar placeholder = [];\n\n\t\t\t\t// options\n\n\t\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t\t// deprecated options\n\n\t\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\t\tdepth = options.amount;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\t\tif ( extrudePath ) {\n\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Variables initialization\n\n\t\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\t\tvar vertices = shapePoints.shape;\n\t\t\t\tvar holes = shapePoints.holes;\n\n\t\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\t\tif ( reverse ) {\n\n\t\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\t\tvar ahole = holes[ h ];\n\n\t\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t\t/* Vertices */\n\n\t\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor ( var h$1 = 0, hl$1 = holes.length; h$1 < hl$1; h$1 ++ ) {\n\n\t\t\t\t\tvar ahole$1 = holes[ h$1 ];\n\n\t\t\t\t\tvertices = vertices.concat( ahole$1 );\n\n\t\t\t\t}\n\n\n\t\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t\t}\n\n\t\t\t\tvar vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t\t// Find directions for point movement\n\n\n\t\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t\t// check for collinear edges\n\t\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not collinear\n\n\t\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t\t}\n\n\n\t\t\t\tvar contourMovements = [];\n\n\t\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar holesMovements = [];\n\t\t\t\tvar oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\t\tfor ( var h$2 = 0, hl$2 = holes.length; h$2 < hl$2; h$2 ++ ) {\n\n\t\t\t\t\tvar ahole$2 = holes[ h$2 ];\n\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor ( var i$1 = 0, il$1 = ahole$2.length, j$1 = il$1 - 1, k$1 = i$1 + 1; i$1 < il$1; i$1 ++, j$1 ++, k$1 ++ ) {\n\n\t\t\t\t\t\tif ( j$1 === il$1 ) { j$1 = 0; }\n\t\t\t\t\t\tif ( k$1 === il$1 ) { k$1 = 0; }\n\n\t\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\t\toneHoleMovements[ i$1 ] = getBevelVec( ahole$2[ i$1 ], ahole$2[ j$1 ], ahole$2[ k$1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t\t}\n\n\n\t\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\t\tfor ( var b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\t\tvar t = b / bevelSegments;\n\t\t\t\t\tvar z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\t\tvar bs$1 = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t\t// contract shape\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = contour.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\tvar vert = scalePt2( contour[ i$2 ], contourMovements[ i$2 ], bs$1 );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// expand holes\n\n\t\t\t\t\tfor ( var h$3 = 0, hl$3 = holes.length; h$3 < hl$3; h$3 ++ ) {\n\n\t\t\t\t\t\tvar ahole$3 = holes[ h$3 ];\n\t\t\t\t\t\toneHoleMovements = holesMovements[ h$3 ];\n\n\t\t\t\t\t\tfor ( var i$3 = 0, il$3 = ahole$3.length; i$3 < il$3; i$3 ++ ) {\n\n\t\t\t\t\t\t\tvar vert$1 = scalePt2( ahole$3[ i$3 ], oneHoleMovements[ i$3 ], bs$1 );\n\n\t\t\t\t\t\t\tv( vert$1.x, vert$1.y, - z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar bs = bevelSize + bevelOffset;\n\n\t\t\t\t// Back facing vertices\n\n\t\t\t\tfor ( var i$4 = 0; i$4 < vlen; i$4 ++ ) {\n\n\t\t\t\t\tvar vert$2 = bevelEnabled ? scalePt2( vertices[ i$4 ], verticesMovements[ i$4 ], bs ) : vertices[ i$4 ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert$2.x, vert$2.y, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert$2.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert$2.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\t\t\t\tfor ( var s = 1; s <= steps; s ++ ) {\n\n\t\t\t\t\tfor ( var i$5 = 0; i$5 < vlen; i$5 ++ ) {\n\n\t\t\t\t\t\tvar vert$3 = bevelEnabled ? scalePt2( vertices[ i$5 ], verticesMovements[ i$5 ], bs ) : vertices[ i$5 ];\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert$3.x, vert$3.y, depth / steps * s );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert$3.x );\n\t\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert$3.y );\n\n\t\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\t// Add bevel segments planes\n\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\t\tfor ( var b$1 = bevelSegments - 1; b$1 >= 0; b$1 -- ) {\n\n\t\t\t\t\tvar t$1 = b$1 / bevelSegments;\n\t\t\t\t\tvar z$1 = bevelThickness * Math.cos( t$1 * Math.PI / 2 );\n\t\t\t\t\tvar bs$2 = bevelSize * Math.sin( t$1 * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t\t// contract shape\n\n\t\t\t\t\tfor ( var i$6 = 0, il$4 = contour.length; i$6 < il$4; i$6 ++ ) {\n\n\t\t\t\t\t\tvar vert$4 = scalePt2( contour[ i$6 ], contourMovements[ i$6 ], bs$2 );\n\t\t\t\t\t\tv( vert$4.x, vert$4.y, depth + z$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// expand holes\n\n\t\t\t\t\tfor ( var h$4 = 0, hl$4 = holes.length; h$4 < hl$4; h$4 ++ ) {\n\n\t\t\t\t\t\tvar ahole$4 = holes[ h$4 ];\n\t\t\t\t\t\toneHoleMovements = holesMovements[ h$4 ];\n\n\t\t\t\t\t\tfor ( var i$7 = 0, il$5 = ahole$4.length; i$7 < il$5; i$7 ++ ) {\n\n\t\t\t\t\t\t\tvar vert$5 = scalePt2( ahole$4[ i$7 ], oneHoleMovements[ i$7 ], bs$2 );\n\n\t\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\t\tv( vert$5.x, vert$5.y, depth + z$1 );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tv( vert$5.x, vert$5.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z$1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t/* Faces */\n\n\t\t\t\t// Top and bottom faces\n\n\t\t\t\tbuildLidFaces();\n\n\t\t\t\t// Sides faces\n\n\t\t\t\tbuildSideFaces();\n\n\n\t\t\t\t/////  Internal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\t\tfor ( var i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\t\tvar face = faces[ i ];\n\t\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t\t// Top faces\n\n\t\t\t\t\t\tfor ( var i$1 = 0; i$1 < flen; i$1 ++ ) {\n\n\t\t\t\t\t\t\tvar face$1 = faces[ i$1 ];\n\t\t\t\t\t\t\tf3( face$1[ 0 ] + offset, face$1[ 1 ] + offset, face$1[ 2 ] + offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\t\tfor ( var i$2 = 0; i$2 < flen; i$2 ++ ) {\n\n\t\t\t\t\t\t\tvar face$2 = faces[ i$2 ];\n\t\t\t\t\t\t\tf3( face$2[ 2 ], face$2[ 1 ], face$2[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Top faces\n\n\t\t\t\t\t\tfor ( var i$3 = 0; i$3 < flen; i$3 ++ ) {\n\n\t\t\t\t\t\t\tvar face$3 = faces[ i$3 ];\n\t\t\t\t\t\t\tf3( face$3[ 0 ] + vlen * steps, face$3[ 1 ] + vlen * steps, face$3[ 2 ] + vlen * steps );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t\t}\n\n\t\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\t\tfunction buildSideFaces() {\n\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\t\tvar layeroffset = 0;\n\t\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\t\tvar ahole = holes[ h ];\n\t\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t\t//, true\n\t\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\t\tvar i = contour.length;\n\n\t\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\t\tvar j = i;\n\t\t\t\t\t\tvar k = i - 1;\n\t\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor ( var s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\t\tplaceholder.push( x );\n\t\t\t\t\tplaceholder.push( y );\n\t\t\t\t\tplaceholder.push( z );\n\n\t\t\t\t}\n\n\n\t\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\t\taddVertex( a );\n\t\t\t\t\taddVertex( b );\n\t\t\t\t\taddVertex( c );\n\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\t\taddVertex( a );\n\t\t\t\t\taddVertex( b );\n\t\t\t\t\taddVertex( d );\n\n\t\t\t\t\taddVertex( b );\n\t\t\t\t\taddVertex( c );\n\t\t\t\t\taddVertex( d );\n\n\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex( index ) {\n\n\t\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t\t}\n\n\n\t\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\t\tExtrudeBufferGeometry.prototype.toJSON = function toJSON$2 () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\n\t\t\treturn toJSON( shapes, options, data );\n\n\t\t};\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\t\tfunction TextGeometry( text, parameters ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'TextGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\ttext: text,\n\t\t\t\tparameters: parameters\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\t\tTextGeometry.prototype.constructor = TextGeometry;\n\n\n\t// TextBufferGeometry\n\n\t\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\t\tparameters = parameters || {};\n\n\t\t\tvar font = parameters.font;\n\n\t\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\t\treturn new Geometry();\n\n\t\t\t}\n\n\t\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\t\tthis.type = 'TextBufferGeometry';\n\n\t\t}\n\n\t\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\t\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t// SphereGeometry\n\n\t\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'SphereGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\t\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\t\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\t\tBufferGeometry.call(this);\n\t\t\tthis.type = 'SphereBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tradius = radius || 1;\n\n\t\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\t\tvar index = 0;\n\t\t\tvar grid = [];\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( var iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\t\tvar verticesRow = [];\n\n\t\t\t\tvar v = iy / heightSegments;\n\n\t\t\t\t// special case for the poles\n\n\t\t\t\tvar uOffset = 0;\n\n\t\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\tgrid.push( verticesRow );\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( var iy$1 = 0; iy$1 < heightSegments; iy$1 ++ ) {\n\n\t\t\t\tfor ( var ix$1 = 0; ix$1 < widthSegments; ix$1 ++ ) {\n\n\t\t\t\t\tvar a = grid[ iy$1 ][ ix$1 + 1 ];\n\t\t\t\t\tvar b = grid[ iy$1 ][ ix$1 ];\n\t\t\t\t\tvar c = grid[ iy$1 + 1 ][ ix$1 ];\n\t\t\t\t\tvar d = grid[ iy$1 + 1 ][ ix$1 + 1 ];\n\n\t\t\t\t\tif ( iy$1 !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\t\tif ( iy$1 !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t}\n\n\t\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t// RingGeometry\n\n\t\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'RingGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\t\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\t\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'RingBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tinnerRadius = innerRadius || 0.5;\n\t\t\touterRadius = outerRadius || 1;\n\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// some helper variables\n\n\t\t\tvar radius = innerRadius;\n\t\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( var j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\t\tfor ( var i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\t\tvar segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t\t// increase the radius for next row of vertices\n\n\t\t\t\tradius += radiusStep;\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( var j$1 = 0; j$1 < phiSegments; j$1 ++ ) {\n\n\t\t\t\tvar thetaSegmentLevel = j$1 * ( thetaSegments + 1 );\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < thetaSegments; i$1 ++ ) {\n\n\t\t\t\t\tvar segment$1 = i$1 + thetaSegmentLevel;\n\n\t\t\t\t\tvar a = segment$1;\n\t\t\t\t\tvar b = segment$1 + thetaSegments + 1;\n\t\t\t\t\tvar c = segment$1 + thetaSegments + 2;\n\t\t\t\t\tvar d = segment$1 + 1;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t}\n\n\t\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t// LatheGeometry\n\n\t\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'LatheGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\t\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\t\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'LatheBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\n\t\t\tsegments = Math.floor( segments ) || 12;\n\t\t\tphiStart = phiStart || 0;\n\t\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar inverseSegments = 1.0 / segments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2();\n\n\t\t\t// generate vertices and uvs\n\n\t\t\tfor ( var i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\t\tvar sin = Math.sin( phi );\n\t\t\t\tvar cos = Math.cos( phi );\n\n\t\t\t\tfor ( var j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( var i$1 = 0; i$1 < segments; i$1 ++ ) {\n\n\t\t\t\tfor ( var j$1 = 0; j$1 < ( points.length - 1 ); j$1 ++ ) {\n\n\t\t\t\t\tvar base = j$1 + i$1 * points.length;\n\n\t\t\t\t\tvar a = base;\n\t\t\t\t\tvar b = base + points.length;\n\t\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\t\tvar d = base + 1;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\t// generate normals\n\n\t\t\tthis.computeVertexNormals();\n\n\t\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\t\tvar normals = this.attributes.normal.array;\n\t\t\t\tvar n1 = new Vector3();\n\t\t\t\tvar n2 = new Vector3();\n\t\t\t\tvar n = new Vector3();\n\n\t\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\t\tvar base$1 = segments * points.length * 3;\n\n\t\t\t\tfor ( var i$2 = 0, j$2 = 0; i$2 < points.length; i$2 ++, j$2 += 3 ) {\n\n\t\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\t\tn1.x = normals[ j$2 + 0 ];\n\t\t\t\t\tn1.y = normals[ j$2 + 1 ];\n\t\t\t\t\tn1.z = normals[ j$2 + 2 ];\n\n\t\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[ base$1 + j$2 + 0 ];\n\t\t\t\t\tn2.y = normals[ base$1 + j$2 + 1 ];\n\t\t\t\t\tn2.z = normals[ base$1 + j$2 + 2 ];\n\n\t\t\t\t\t// average normals\n\n\t\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t\t// assign the new values to both normals\n\n\t\t\t\t\tnormals[ j$2 + 0 ] = normals[ base$1 + j$2 + 0 ] = n.x;\n\t\t\t\t\tnormals[ j$2 + 1 ] = normals[ base$1 + j$2 + 1 ] = n.y;\n\t\t\t\t\tnormals[ j$2 + 2 ] = normals[ base$1 + j$2 + 2 ] = n.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t// ShapeGeometry\n\n\t\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'ShapeGeometry';\n\n\t\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t\t}\n\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\t\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\t\tShapeGeometry.prototype.toJSON = function toJSON$1$1 () {\n\n\t\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\t\tvar shapes = this.parameters.shapes;\n\n\t\t\treturn toJSON$1( shapes, data );\n\n\t\t};\n\n\t// ShapeBufferGeometry\n\n\t\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\t\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t};\n\n\t\t\tcurveSegments = curveSegments || 12;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar groupStart = 0;\n\t\t\tvar groupCount = 0;\n\n\t\t\t// allow single and array values for \"shapes\" parameter\n\n\t\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\t\taddShape( shapes );\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t\t// helper functions\n\n\t\t\tfunction addShape( shape ) {\n\n\t\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\t\tvar shapeVertices = points.shape;\n\t\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t\t// check direction of vertices\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shapeHole = shapeHoles[ i ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = shapeHoles.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\tvar shapeHole$1 = shapeHoles[ i$1 ];\n\t\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole$1 );\n\n\t\t\t\t}\n\n\t\t\t\t// vertices, normals, uvs\n\n\t\t\t\tfor ( var i$2 = 0, l$2 = shapeVertices.length; i$2 < l$2; i$2 ++ ) {\n\n\t\t\t\t\tvar vertex = shapeVertices[ i$2 ];\n\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t\t}\n\n\t\t\t\t// incides\n\n\t\t\t\tfor ( var i$3 = 0, l$3 = faces.length; i$3 < l$3; i$3 ++ ) {\n\n\t\t\t\t\tvar face = faces[ i$3 ];\n\n\t\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\t\tindices.push( a, b, c );\n\t\t\t\t\tgroupCount += 3;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\t\tShapeBufferGeometry.prototype.toJSON = function toJSON$2 () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tvar shapes = this.parameters.shapes;\n\n\t\t\treturn toJSON$1( shapes, data );\n\n\t\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'EdgesGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\n\t\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t\t// buffer\n\n\t\t\tvar vertices = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\n\t\t\tvar edge = [ 0, 0 ], edges = {};\n\t\t\tvar edge1, edge2, key;\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t\t// prepare source geometry\n\n\t\t\tvar geometry2;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tgeometry2 = new Geometry();\n\t\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t\t} else {\n\n\t\t\t\tgeometry2 = geometry.clone();\n\n\t\t\t}\n\n\t\t\tgeometry2.mergeVertices();\n\t\t\tgeometry2.computeFaceNormals();\n\n\t\t\tvar sourceVertices = geometry2.vertices;\n\t\t\tvar faces = geometry2.faces;\n\n\t\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\tvar e = edges[ key ];\n\n\t\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t// CylinderGeometry\n\n\t\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'CylinderGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\t\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\t\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\t\tBufferGeometry.call(this);\n\t\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\t\theight = height || 1;\n\n\t\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar index = 0;\n\t\t\tvar indexArray = [];\n\t\t\tvar halfHeight = height / 2;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif ( openEnded === false ) {\n\n\t\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction generateTorso() {\n\n\t\t\t\tvar normal = new Vector3();\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\t// this will be used to calculate the normal\n\t\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\t\tvar indexRow = [];\n\n\t\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\t\tfor ( var x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t\t// vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\t// normal\n\n\t\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t\t// uv\n\n\t\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t\t}\n\n\t\t\t\t// generate indices\n\n\t\t\t\tfor ( var x$1 = 0; x$1 < radialSegments; x$1 ++ ) {\n\n\t\t\t\t\tfor ( var y$1 = 0; y$1 < heightSegments; y$1 ++ ) {\n\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\t\tvar a = indexArray[ y$1 ][ x$1 ];\n\t\t\t\t\t\tvar b = indexArray[ y$1 + 1 ][ x$1 ];\n\t\t\t\t\t\tvar c = indexArray[ y$1 + 1 ][ x$1 + 1 ];\n\t\t\t\t\t\tvar d = indexArray[ y$1 ][ x$1 + 1 ];\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t}\n\n\t\t\tfunction generateCap( top ) {\n\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tvar centerIndexStart = index;\n\n\t\t\t\tvar uv = new Vector2();\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor ( var x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t\t// increase index\n\n\t\t\t\t\tindex ++;\n\n\t\t\t\t}\n\n\t\t\t\t// save the index of the last center vertex\n\t\t\t\tvar centerIndexEnd = index;\n\n\t\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor ( var x$1 = 0; x$1 <= radialSegments; x$1 ++ ) {\n\n\t\t\t\t\tvar u = x$1 / radialSegments;\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t\t// increase index\n\n\t\t\t\t\tindex ++;\n\n\t\t\t\t}\n\n\t\t\t\t// generate indices\n\n\t\t\t\tfor ( var x$2 = 0; x$2 < radialSegments; x$2 ++ ) {\n\n\t\t\t\t\tvar c = centerIndexStart + x$2;\n\t\t\t\t\tvar i = centerIndexEnd + x$2;\n\n\t\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t\t// face top\n\n\t\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// face bottom\n\n\t\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t}\n\n\t\t}\n\n\t\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t// ConeGeometry\n\n\t\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\t\t\tthis.type = 'ConeGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t}\n\n\t\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\t\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\t\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\t\t\tthis.type = 'ConeBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t}\n\n\t\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\t\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t// CircleGeometry\n\n\t\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\t\tGeometry.call(this);\n\t\t\tthis.type = 'CircleGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\t\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\t\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'CircleBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tradius = radius || 1;\n\t\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2();\n\n\t\t\t// center point\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tnormals.push( 0, 0, 1 );\n\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\tfor ( var s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uvs\n\n\t\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( var i$1 = 1; i$1 <= segments; i$1 ++ ) {\n\n\t\t\t\tindices.push( i$1, i$1 + 1, 0 );\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t}\n\n\t\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\t\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.vertexTangents = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.vertexTangents = source.vertexTangents;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * parameters = {\n\t *  clearcoat: <float>,\n\t *  clearcoatMap: new THREE.Texture( <Image> ),\n\t *  clearcoatRoughness: <float>,\n\t *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *  reflectivity: <float>,\n\t *\n\t *  sheen: <Color>,\n\t *\n\t *  transmission: <float>,\n\t *  transmissionMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transmission = 0.0;\n\t\tthis.transmissionMap = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif ( source.sheen ) {\n\n\t\t\tthis.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\n\t\t} else {\n\n\t\t\tthis.sheen = null;\n\n\t\t}\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *  gradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( Material.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i$1 = 0; i$1 < clip.tracks.length; ++ i$1 ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i$1 ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i$1 ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i$2 = 0; i$2 < clip.tracks.length; ++ i$2 ) {\n\n\t\t\t\tclip.tracks[ i$2 ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t},\n\n\t\tmakeClipAdditive: function ( targetClip, referenceFrame, referenceClip, fps ) {\n\n\t\t\tif ( referenceFrame === undefined ) { referenceFrame = 0; }\n\t\t\tif ( referenceClip === undefined ) { referenceClip = targetClip; }\n\t\t\tif ( fps === undefined || fps <= 0 ) { fps = 30; }\n\n\t\t\tvar numTracks = targetClip.tracks.length;\n\t\t\tvar referenceTime = referenceFrame / fps;\n\n\t\t\t// Make each track's values relative to the values at the reference frame\n\t\t\tvar loop = function ( i ) {\n\n\t\t\t\tvar referenceTrack = referenceClip.tracks[ i ];\n\t\t\t\tvar referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t\t\t// Skip this track if it's non-numeric\n\t\t\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) { return; }\n\n\t\t\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\t\t\tvar targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t\t\t} );\n\n\t\t\t\tif ( targetTrack === undefined ) { return; }\n\n\t\t\t\tvar referenceOffset = 0;\n\t\t\t\tvar referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t\t\t}\n\n\t\t\t\tvar targetOffset = 0;\n\t\t\t\tvar targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t\t\t}\n\n\t\t\t\tvar lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tvar referenceValue = (void 0);\n\n\t\t\t\t// Find the value to subtract out of the track\n\t\t\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tvar startIndex = referenceOffset;\n\t\t\t\t\tvar endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tvar startIndex$1 = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\t\tvar endIndex$1 = startIndex$1 + referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex$1, endIndex$1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tvar interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tvar startIndex$2 = referenceOffset;\n\t\t\t\t\tvar endIndex$2 = referenceValueSize - referenceOffset;\n\t\t\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice( interpolant.resultBuffer, startIndex$2, endIndex$2 );\n\n\t\t\t\t}\n\n\t\t\t\t// Conjugate the quaternion\n\t\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t\tvar referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t\t\t}\n\n\t\t\t\t// Subtract the reference value from all of the track values\n\n\t\t\t\tvar numTimes = targetTrack.times.length;\n\t\t\t\tfor ( var j = 0; j < numTimes; ++ j ) {\n\n\t\t\t\t\tvar valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\t\tvalueStart,\n\t\t\t\t\t\t\treferenceValue,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\t\tvalueStart\n\t\t\t\t\t\t);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\t\t\tfor ( var k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < numTracks; ++ i ) loop( i );\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\t\t\treturn targetClip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar i1 = this._cachedIndex,\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt$1 = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt$1 ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar iPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length;\n\n\t\t\tvar from = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) {\n\n\t\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\t\tfrom = to - 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i$1 = 0, n = values.length; i$1 !== n; ++ i$1 ) {\n\n\t\t\t\t\t\tvar value = values[ i$1 ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i$1, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice( this.times ),\n\t\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tvar writeIndex = 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j$1 = 0; j$1 !== stride; ++ j$1 ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j$1 ] = values[ readOffset + j$1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset$1 = lastIndex * stride, writeOffset$1 = writeIndex * stride, j$2 = 0; j$2 !== stride; ++ j$2 ) {\n\n\t\t\t\t\tvalues[ writeOffset$1 + j$2 ] = values[ readOffset$1 + j$2 ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t} else {\n\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tvar offset = i1 * stride;\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\tfunction AnimationClip( name, duration, tracks, blendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\t\tthis.blendMode = ( blendMode !== undefined ) ? blendMode : NormalAnimationBlendMode;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks, json.blendMode );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name$1 in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name$1, animationToMorphTargets[ name$1 ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\tvar fps = animation.fps || 30;\n\t\t\tvar blendMode = animation.blendMode;\n\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tvar k = (void 0);\n\n\t\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m$1 = 0; m$1 !== animationKeys[ k ].morphTargets.length; ++ m$1 ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks, blendMode );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks;\n\t\t\tvar duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks, this.blendMode );\n\n\t\t}\n\n\t} );\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tloadAsync: function ( url, onProgress ) {\n\n\t\t\tvar scope = this;\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t\t} );\n\n\t\t},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( requestHeader ) {\n\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\t\t\tvar request;\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\trequest = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i$1 = 0, il$1 = callbacks.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t\t\t\tvar callback$1 = callbacks[ i$1 ];\n\t\t\t\t\t\t\tif ( callback$1.onError ) { callback$1.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setRequestHeader( scope.requestHeader );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setRequestHeader( this.requestHeader );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setRequestHeader( this.requestHeader );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( var p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0;\n\t\t\tvar il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t, optionalTarget ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\t\treturn tangent;\n\n\t\t},\n\n\t\tgetTangentAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t, optionalTarget );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( var i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tvar u = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( var i$1 = 1; i$1 <= segments; i$1 ++ ) {\n\n\t\t\t\tnormals[ i$1 ] = normals[ i$1 - 1 ].clone();\n\n\t\t\t\tbinormals[ i$1 ] = binormals[ i$1 - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i$1 - 1 ], tangents[ i$1 ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\tvar theta = Math.acos( MathUtils.clamp( tangents[ i$1 - 1 ].dot( tangents[ i$1 ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i$1 ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i$1 ].crossVectors( tangents[ i$1 ], normals[ i$1 ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\tvar theta$1 = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta$1 /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta$1 = - theta$1;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i$2 = 1; i$2 <= segments; i$2 ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i$2 ].applyMatrix4( mat.makeRotationAxis( tangents[ i$2 ], theta$1 * i$2 ) );\n\t\t\t\t\tbinormals[ i$2 ].crossVectors( tangents[ i$2 ], normals[ i$2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = ( tension !== undefined ) ? tension : 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tvar p1 = points[ intPoint % l ];\n\t\tvar p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( t, optionalTarget ) {\n\n\t\tvar tangent = optionalTarget || new Vector2();\n\n\t\ttangent.copy( this.v2 ).sub( this.v1 ).normalize();\n\n\t\treturn tangent;\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [];\n\t\t\tvar sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [];\n\t\t\tvar last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.normalBias !== 0 ) { object.normalBias = this.normalBias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tvar SphericalHarmonics3 = function SphericalHarmonics3() {\n\n\t\tObject.defineProperty( this, 'isSphericalHarmonics3', { value: true } );\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t};\n\n\tSphericalHarmonics3.prototype.set = function set ( coefficients ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSphericalHarmonics3.prototype.zero = function zero () {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tSphericalHarmonics3.prototype.getAt = function getAt ( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\tvar coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t};\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tSphericalHarmonics3.prototype.getIrradianceAt = function getIrradianceAt ( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\tvar coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t};\n\n\tSphericalHarmonics3.prototype.add = function add ( sh ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSphericalHarmonics3.prototype.addScaledSH = function addScaledSH ( sh, s ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSphericalHarmonics3.prototype.scale = function scale ( s ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSphericalHarmonics3.prototype.lerp = function lerp ( sh, alpha ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSphericalHarmonics3.prototype.equals = function equals ( sh ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n\tSphericalHarmonics3.prototype.copy = function copy ( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t};\n\n\tSphericalHarmonics3.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tSphericalHarmonics3.prototype.fromArray = function fromArray ( array, offset ) {\n\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tvar coefficients = this.coefficients;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSphericalHarmonics3.prototype.toArray = function toArray ( array, offset ) {\n\n\t\tif ( array === undefined ) { array = []; }\n\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\tvar coefficients = this.coefficients;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t};\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tSphericalHarmonics3.getBasisAt = function getBasisAt ( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t};\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.type = 'LightProbe';\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\t\tthis.sh.fromArray( json.sh );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.sh = this.sh.toArray();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setRequestHeader( scope.requestHeader );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.vertexTangents !== undefined ) { material.vertexTangents = json.vertexTangents; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) { material.alphaMap = getTexture( json.alphaMap ); }\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatMap !== undefined ) { material.clearcoatMap = getTexture( json.clearcoatMap ); }\n\t\t\tif ( json.clearcoatRoughnessMap !== undefined ) { material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap ); }\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\tif ( json.transmission !== undefined ) { material.transmission = json.transmission; }\n\t\t\tif ( json.transmissionMap !== undefined ) { material.transmissionMap = getTexture( json.transmissionMap ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.instanceCount = source.instanceCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.instanceCount = this.instanceCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setRequestHeader( scope.requestHeader );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar interleavedBufferMap = {};\n\t\t\tvar arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) { return interleavedBufferMap[ uuid ]; }\n\n\t\t\t\tvar interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tvar interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\t\tvar buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\t\tvar array = new TYPED_ARRAYS[ interleavedBuffer.type ]( buffer );\n\t\t\t\tvar ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\t\treturn ib;\n\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) { return arrayBufferMap[ uuid ]; }\n\n\t\t\t\tvar arrayBuffers = json.arrayBuffers;\n\t\t\t\tvar arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\t\tvar ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\t\treturn ab;\n\n\t\t\t}\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar bufferAttribute = (void 0);\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tvar interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar typedArray$1 = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray$1, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key$1 in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key$1 ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute$1 = attributeArray[ i ];\n\t\t\t\t\t\tvar bufferAttribute$1 = (void 0);\n\n\t\t\t\t\t\tif ( attribute$1.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar interleavedBuffer$1 = getInterleavedBuffer( json.data, attribute$1.data );\n\t\t\t\t\t\t\tbufferAttribute$1 = new InterleavedBufferAttribute( interleavedBuffer$1, attribute$1.itemSize, attribute$1.offset, attribute$1.normalized );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar typedArray$2 = new TYPED_ARRAYS[ attribute$1.type ]( attribute$1.array );\n\t\t\t\t\t\t\tbufferAttribute$1 = new BufferAttribute( typedArray$2, attribute$1.itemSize, attribute$1.normalized );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attribute$1.name !== undefined ) { bufferAttribute$1.name = attribute$1.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key$1 ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i$1 = 0, n = groups.length; i$1 !== n; ++ i$1 ) {\n\n\t\t\t\t\tvar group = groups[ i$1 ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setRequestHeader( this.requestHeader );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\t\t\tvar geometryShapes;\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry = (void 0);\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j$1 = 0, jl$1 = data.shapes.length; j$1 < jl$1; j$1 ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape$1 = shapes[ data.shapes[ j$1 ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape$1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tvar loader;\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tloader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path$1 = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = (void 0);\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tvar geometry, material;\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\n\t\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.normalBias !== undefined ) { object.shadow.normalBias = data.shadow.normalBias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tisImageBitmapLoader: true,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape;\n\t\t\tvar shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx$1 = 0, sLen$1 = newShapes.length; sIdx$1 < sLen$1; sIdx$1 ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx$1 ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx$1 !== s2Idx )\t{ toChange.push( { froms: sIdx$1, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx$1 ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i$1 = 0, il = newShapes.length; i$1 < il; i$1 ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i$1 ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i$1 ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setRequestHeader( this.requestHeader );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setRequestHeader( scope.requestHeader );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\tvar Clock = function Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t};\n\n\tClock.prototype.start = function start () {\n\n\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t};\n\n\tClock.prototype.stop = function stop () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t};\n\n\tClock.prototype.getElapsedTime = function getElapsedTime () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t};\n\n\tClock.prototype.getDelta = function getDelta () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t};\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\t\tfunction AudioListener() {\n\n\t\t\tObject3D.call(this);\n\n\t\t\tthis.type = 'AudioListener';\n\n\t\t\tthis.context = AudioContext.getContext();\n\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect( this.context.destination );\n\n\t\t\tthis.filter = null;\n\n\t\t\tthis.timeDelta = 0;\n\n\t\t\t// private\n\n\t\t\tthis._clock = new Clock();\n\n\t\t}\n\n\t\tAudioListener.prototype = Object.create( Object3D.prototype );\n\t\tAudioListener.prototype.constructor = AudioListener;\n\n\t\tAudioListener.prototype.getInput = function getInput () {\n\n\t\t\treturn this.gain;\n\n\t\t};\n\n\t\tAudioListener.prototype.removeFilter = function removeFilter () {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudioListener.prototype.getFilter = function getFilter () {\n\n\t\t\treturn this.filter;\n\n\t\t};\n\n\t\tAudioListener.prototype.setFilter = function setFilter ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudioListener.prototype.getMasterVolume = function getMasterVolume () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t};\n\n\t\tAudioListener.prototype.setMasterVolume = function setMasterVolume ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudioListener.prototype.updateMatrixWorld = function updateMatrixWorld ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t};\n\n\tfunction Audio( listener ) {\n\n\t\t\tObject3D.call(this);\n\n\t\t\tthis.type = 'Audio';\n\n\t\t\tthis.listener = listener;\n\t\t\tthis.context = listener.context;\n\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect( listener.getInput() );\n\n\t\t\tthis.autoplay = false;\n\n\t\t\tthis.buffer = null;\n\t\t\tthis.detune = 0;\n\t\t\tthis.loop = false;\n\t\t\tthis.loopStart = 0;\n\t\t\tthis.loopEnd = 0;\n\t\t\tthis.offset = 0;\n\t\t\tthis.duration = undefined;\n\t\t\tthis.playbackRate = 1;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hasPlaybackControl = true;\n\t\t\tthis.source = null;\n\t\t\tthis.sourceType = 'empty';\n\n\t\t\tthis._startedAt = 0;\n\t\t\tthis._progress = 0;\n\t\t\tthis._connected = false;\n\n\t\t\tthis.filters = [];\n\n\t\t}\n\n\t\tAudio.prototype = Object.create( Object3D.prototype );\n\t\tAudio.prototype.constructor = Audio;\n\n\t\tAudio.prototype.getOutput = function getOutput () {\n\n\t\t\treturn this.gain;\n\n\t\t};\n\n\t\tAudio.prototype.setNodeSource = function setNodeSource ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.setMediaElementSource = function setMediaElementSource ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.setMediaStreamSource = function setMediaStreamSource ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.setBuffer = function setBuffer ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.play = function play ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t};\n\n\t\tAudio.prototype.pause = function pause () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\t// update current progress\n\n\t\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.stop = function stop () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.connect = function connect () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.disconnect = function disconnect () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.getFilters = function getFilters () {\n\n\t\t\treturn this.filters;\n\n\t\t};\n\n\t\tAudio.prototype.setFilters = function setFilters ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this._connected === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.setDetune = function setDetune ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.getDetune = function getDetune () {\n\n\t\t\treturn this.detune;\n\n\t\t};\n\n\t\tAudio.prototype.getFilter = function getFilter () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t};\n\n\t\tAudio.prototype.setFilter = function setFilter ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t};\n\n\t\tAudio.prototype.setPlaybackRate = function setPlaybackRate ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.getPlaybackRate = function getPlaybackRate () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t};\n\n\t\tAudio.prototype.onEnded = function onEnded () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t};\n\n\t\tAudio.prototype.getLoop = function getLoop () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t};\n\n\t\tAudio.prototype.setLoop = function setLoop ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.setLoopStart = function setLoopStart ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.setLoopEnd = function setLoopEnd ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tAudio.prototype.getVolume = function getVolume () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t};\n\n\t\tAudio.prototype.setVolume = function setVolume ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\t\tfunction PositionalAudio( listener ) {\n\n\t\t\tAudio.call( this, listener );\n\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.panningModel = 'HRTF';\n\t\t\tthis.panner.connect( this.gain );\n\n\t\t}\n\n\t\tPositionalAudio.prototype = Object.create( Audio.prototype );\n\t\tPositionalAudio.prototype.constructor = PositionalAudio;\n\n\t\tPositionalAudio.prototype.getOutput = function getOutput () {\n\n\t\t\treturn this.panner;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.getRefDistance = function getRefDistance () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.setRefDistance = function setRefDistance ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.getRolloffFactor = function getRolloffFactor () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.setRolloffFactor = function setRolloffFactor ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.getDistanceModel = function getDistanceModel () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.setDistanceModel = function setDistanceModel ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.getMaxDistance = function getMaxDistance () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.setMaxDistance = function setMaxDistance ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.setDirectionalCone = function setDirectionalCone ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tPositionalAudio.prototype.updateMatrixWorld = function updateMatrixWorld ( force ) {\n\n\t\t\tAudio.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t};\n\n\tvar AudioAnalyser = function AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t};\n\n\n\tAudioAnalyser.prototype.getFrequencyData = function getFrequencyData () {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t};\n\n\tAudioAnalyser.prototype.getAverageFrequency = function getAverageFrequency () {\n\n\t\tvar value = 0;\n\t\tvar data = this.getFrequencyData();\n\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t};\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride;\n\n\t\t\tvar currentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// accumulate data in the 'incoming' region into 'add'\n\t\taccumulateAdditive: function ( weight ) {\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t\t// add = identity\n\n\t\t\t\tthis._setIdentity();\n\n\t\t\t}\n\n\t\t\t// add := add + incoming * weight\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t\t// accuN := accuN + additive accuN\n\n\t\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\t// Add to identity for additive\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\t\t_setAdditiveIdentityNumeric: function () {\n\n\t\t\tvar startIndex = this._addIndex * this.valueSize;\n\t\t\tvar endIndex = startIndex + this.valueSize;\n\n\t\t\tfor ( var i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\t\tthis.buffer[ i ] = 0;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_setAdditiveIdentityQuaternion: function () {\n\n\t\t\tthis._setAdditiveIdentityNumeric();\n\t\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t\t},\n\n\t\t_setAdditiveIdentityOther: function () {\n\n\t\t\tvar startIndex = this._origIndex * this.valueSize;\n\t\t\tvar targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor ( var i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t\t}\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_slerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar workOffset = this._workIndex * stride;\n\n\t\t\t// Store result in intermediate buffer offset\n\t\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t\t// Slerp to the intermediate result\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node;\n\t\t\tvar parsedPath = this.parsedPath;\n\n\t\t\tvar objectName = parsedPath.objectName;\n\t\t\tvar propertyName = parsedPath.propertyName;\n\t\t\tvar propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tvar knownObject = undefined,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tvar index = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j$1 = 0, m$1 = nBindings; j$1 !== m$1; ++ j$1 ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j$1 ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\t\tvar binding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j$1 ], parsedPaths[ j$1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tvar nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tvar nCachedObjects = this.nCachedObjects_,\n\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex$1 = -- nObjects,\n\t\t\t\t\t\t\tlastObject$1 = objects[ lastIndex$1 ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject$1.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject$1;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j$1 = 0, m$1 = nBindings; j$1 !== m$1; ++ j$1 ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath$1 = bindings[ j$1 ];\n\n\t\t\t\t\t\t\tbindingsForPath$1[ index ] = bindingsForPath$1[ lastIndex$1 ];\n\t\t\t\t\t\t\tbindingsForPath$1.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath;\n\t\t\tvar index = indicesByPath[ path ];\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar AnimationAction = function AnimationAction( mixer, clip, localRoot, blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\t\tthis.blendMode = blendMode || clip.blendMode;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t};\n\n\t// State & Scheduling\n\n\tAnimationAction.prototype.play = function play () {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t};\n\n\tAnimationAction.prototype.stop = function stop () {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t};\n\n\tAnimationAction.prototype.reset = function reset () {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t};\n\n\tAnimationAction.prototype.isRunning = function isRunning () {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t};\n\n\t// return true when play has been called\n\tAnimationAction.prototype.isScheduled = function isScheduled () {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t};\n\n\tAnimationAction.prototype.startAt = function startAt ( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t};\n\n\tAnimationAction.prototype.setLoop = function setLoop ( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t};\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tAnimationAction.prototype.setEffectiveWeight = function setEffectiveWeight ( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t};\n\n\t// return the weight considering fading and .enabled\n\tAnimationAction.prototype.getEffectiveWeight = function getEffectiveWeight () {\n\n\t\treturn this._effectiveWeight;\n\n\t};\n\n\tAnimationAction.prototype.fadeIn = function fadeIn ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t};\n\n\tAnimationAction.prototype.fadeOut = function fadeOut ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t};\n\n\tAnimationAction.prototype.crossFadeFrom = function crossFadeFrom ( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tAnimationAction.prototype.crossFadeTo = function crossFadeTo ( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t};\n\n\tAnimationAction.prototype.stopFading = function stopFading () {\n\n\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tAnimationAction.prototype.setEffectiveTimeScale = function setEffectiveTimeScale ( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t};\n\n\t// return the time scale considering warping and .paused\n\tAnimationAction.prototype.getEffectiveTimeScale = function getEffectiveTimeScale () {\n\n\t\treturn this._effectiveTimeScale;\n\n\t};\n\n\tAnimationAction.prototype.setDuration = function setDuration ( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t};\n\n\tAnimationAction.prototype.syncWith = function syncWith ( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t};\n\n\tAnimationAction.prototype.halt = function halt ( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t};\n\n\tAnimationAction.prototype.warp = function warp ( startTimeScale, endTimeScale, duration ) {\n\n\t\tvar mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t};\n\n\tAnimationAction.prototype.stopWarping = function stopWarping () {\n\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\t// Object Accessors\n\n\tAnimationAction.prototype.getMixer = function getMixer () {\n\n\t\treturn this._mixer;\n\n\t};\n\n\tAnimationAction.prototype.getClip = function getClip () {\n\n\t\treturn this._clip;\n\n\t};\n\n\tAnimationAction.prototype.getRoot = function getRoot () {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t};\n\n\t// Interna\n\n\tAnimationAction.prototype._update = function _update ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tvar weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tvar interpolants = this._interpolants;\n\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( var j$1 = 0, m$1 = interpolants.length; j$1 !== m$1; ++ j$1 ) {\n\n\t\t\t\t\t\tinterpolants[ j$1 ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j$1 ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tAnimationAction.prototype._updateWeight = function _updateWeight ( time ) {\n\n\t\tvar weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t};\n\n\tAnimationAction.prototype._updateTimeScale = function _updateTimeScale ( time ) {\n\n\t\tvar timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t};\n\n\tAnimationAction.prototype._updateTime = function _updateTime ( deltaTime ) {\n\n\t\tvar duration = this._clip.duration;\n\t\tvar loop = this.loop;\n\n\t\tvar time = this.time + deltaTime;\n\t\tvar loopCount = this._loopCount;\n\n\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t};\n\n\tAnimationAction.prototype._setEndings = function _setEndings ( atStart, atEnd, pingPong ) {\n\n\t\tvar settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tAnimationAction.prototype._scheduleFading = function _scheduleFading ( duration, weightNow, weightThen ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time;\n\t\tvar interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t};\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\t\tvar bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name;\n\n\t\t\t\tvar binding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tvar actionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tvar bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\t\tvar interpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot, blendMode ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid;\n\n\t\t\tvar clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\t\tvar clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\t\tvar actionsForClip = this._actionsByClip[ clipUuid ];\n\t\t\tvar prototypeAction = null;\n\n\t\t\tif ( blendMode === undefined ) {\n\n\t\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor ( var i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\t\tactions[ i ].stop();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i$1 = 0; i$1 !== nBindings; ++ i$1 ) {\n\n\t\t\t\tbindings[ i$1 ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar Uniform = function Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t};\n\n\tUniform.prototype.clone = function clone () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function ( data ) {\n\n\t\t\tvar ib = InterleavedBuffer.prototype.clone.call( this, data );\n\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\treturn ib;\n\n\t\t},\n\n\t\ttoJSON: function ( data ) {\n\n\t\t\tvar json = InterleavedBuffer.prototype.toJSON.call( this, data );\n\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author raub / https://github.com/raub\n\t */\n\n\t/**\n\t * Element size is one of:\n\t * 5126: 4\n\t * 5123: 2\n\t * 5122: 2\n\t * 5125: 4\n\t * 5124: 4\n\t * 5120: 1\n\t * 5121: 1\n\t */\n\tfunction GLBufferAttribute( buffer, type, itemSize, elementSize, count ) {\n\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( GLBufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( GLBufferAttribute.prototype, {\n\n\t\tisGLBufferAttribute: true,\n\n\t\tsetBuffer: function ( buffer ) {\n\n\t\t\tthis.buffer = buffer;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetType: function ( type, elementSize ) {\n\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetItemSize: function ( itemSize ) {\n\n\t\t\tthis.itemSize = itemSize;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetCount: function ( count ) {\n\n\t\t\tthis.count = count;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t} );\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\t\tobject.raycast( raycaster, intersects );\n\n\t\t}\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tvar Spherical = function Spherical( radius, phi, theta ) {\n\t\tif ( radius === void 0 ) radius = 1;\n\t\tif ( phi === void 0 ) phi = 0;\n\t\tif ( theta === void 0 ) theta = 0;\n\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t};\n\n\tSpherical.prototype.set = function set ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t};\n\n\tSpherical.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tSpherical.prototype.copy = function copy ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t};\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tSpherical.prototype.makeSafe = function makeSafe () {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t};\n\n\tSpherical.prototype.setFromVector3 = function setFromVector3 ( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t};\n\n\tSpherical.prototype.setFromCartesianCoords = function setFromCartesianCoords ( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\n\tvar Cylindrical = function Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t};\n\n\tCylindrical.prototype.set = function set ( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t};\n\n\tCylindrical.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tCylindrical.prototype.copy = function copy ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t};\n\n\tCylindrical.prototype.setFromVector3 = function setFromVector3 ( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t};\n\n\tCylindrical.prototype.setFromCartesianCoords = function setFromCartesianCoords ( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t};\n\n\tvar _vector$7 = new Vector2();\n\n\tvar Box2 = function Box2( min, max ) {\n\n\t\tObject.defineProperty( this, 'isBox2', { value: true } );\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t};\n\n\tBox2.prototype.set = function set ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.setFromPoints = function setFromPoints ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.setFromCenterAndSize = function setFromCenterAndSize ( center, size ) {\n\n\t\tvar halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tBox2.prototype.copy = function copy ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.makeEmpty = function makeEmpty () {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.isEmpty = function isEmpty () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t};\n\n\tBox2.prototype.getCenter = function getCenter ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t};\n\n\tBox2.prototype.getSize = function getSize ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t};\n\n\tBox2.prototype.expandByPoint = function expandByPoint ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.expandByVector = function expandByVector ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.expandByScalar = function expandByScalar ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.containsPoint = function containsPoint ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t};\n\n\tBox2.prototype.containsBox = function containsBox ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t};\n\n\tBox2.prototype.getParameter = function getParameter ( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t};\n\n\tBox2.prototype.intersectsBox = function intersectsBox ( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t};\n\n\tBox2.prototype.clampPoint = function clampPoint ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t};\n\n\tBox2.prototype.distanceToPoint = function distanceToPoint ( point ) {\n\n\t\tvar clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );\n\t\treturn clampedPoint.sub( point ).length();\n\n\t};\n\n\tBox2.prototype.intersect = function intersect ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.union = function union ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.translate = function translate ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t};\n\n\tBox2.prototype.equals = function equals ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t};\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tvar Line3 = function Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t};\n\n\tLine3.prototype.set = function set ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t};\n\n\tLine3.prototype.clone = function clone () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tLine3.prototype.copy = function copy ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t};\n\n\tLine3.prototype.getCenter = function getCenter ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t};\n\n\tLine3.prototype.delta = function delta ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t};\n\n\tLine3.prototype.distanceSq = function distanceSq () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t};\n\n\tLine3.prototype.distance = function distance () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t};\n\n\tLine3.prototype.at = function at ( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t};\n\n\tLine3.prototype.closestPointToPointParameter = function closestPointToPointParameter ( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\tvar t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = MathUtils.clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t};\n\n\tLine3.prototype.closestPointToPoint = function closestPointToPoint ( point, clampToLine, target ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t};\n\n\tLine3.prototype.applyMatrix4 = function applyMatrix4 ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t};\n\n\tLine3.prototype.equals = function equals ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t};\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\n\t\tthis.count = 0;\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tvar _vector$8 = new Vector3();\n\n\t\tfunction SpotLightHelper( light, color ) {\n\n\t\t\tObject3D.call(this);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\n\t\t\tthis.color = color;\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar positions = [\n\t\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t\t];\n\n\t\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\t\tpositions.push(\n\t\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\t\tthis.cone = new LineSegments( geometry, material );\n\t\t\tthis.add( this.cone );\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\t\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\t\tSpotLightHelper.prototype.dispose = function dispose () {\n\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\n\t\t};\n\n\t\tSpotLightHelper.prototype.update = function update () {\n\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t\t_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\t\tthis.cone.lookAt( _vector$8 );\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t\t}\n\n\t\t};\n\n\tvar _vector$9 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\n\t\tfunction SkeletonHelper( object ) {\n\n\t\t\tvar bones = getBoneList( object );\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\n\t\t\tvar color1 = new Color( 0, 0, 1 );\n\t\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\t\tvar bone = bones[ i ];\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\t\tvar material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\t\tLineSegments.call( this, geometry, material );\n\n\t\t\tthis.type = 'SkeletonHelper';\n\t\t\tthis.isSkeletonHelper = true;\n\n\t\t\tthis.root = object;\n\t\t\tthis.bones = bones;\n\n\t\t\tthis.matrix = object.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\n\t\t}\n\n\t\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\t\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\t\tSkeletonHelper.prototype.updateMatrixWorld = function updateMatrixWorld ( force ) {\n\n\t\t\tvar bones = this.bones;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\t\tvar bone = bones[ i ];\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\t\tposition.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\t\tposition.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\t\tj += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t\tLineSegments.prototype.updateMatrixWorld.call( this, force );\n\n\t\t};\n\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\t\tMesh.call( this, geometry, material );\n\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tthis.color = color;\n\n\t\t\tthis.type = 'PointLightHelper';\n\n\t\t\tthis.matrix = this.light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\n\t\t\tthis.update();\n\n\n\t\t\t/*\n\t\t// TODO: delete this comment?\n\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tconst d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t\t}\n\n\t\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\t\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\t\tPointLightHelper.prototype.dispose = function dispose () {\n\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\n\t\t};\n\n\t\tPointLightHelper.prototype.update = function update () {\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t\t}\n\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\n\t\t\tif ( d === 0.0 ) {\n\n\t\t\t\tthis.lightDistance.visible = false;\n\n\t\t\t} else {\n\n\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t\t}\n\t\t\t*/\n\n\t\t};\n\n\tvar _vector$a = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\t\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\t\tObject3D.call(this);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\n\t\t\tthis.color = color;\n\n\t\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\t\tif ( this.color === undefined ) { this.material.vertexColors = true; }\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\t\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\t\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\t\tHemisphereLightHelper.prototype.dispose = function dispose () {\n\n\t\t\tthis.children[ 0 ].geometry.dispose();\n\t\t\tthis.children[ 0 ].material.dispose();\n\n\t\t};\n\n\t\tHemisphereLightHelper.prototype.update = function update () {\n\n\t\t\tvar mesh = this.children[ 0 ];\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t\t_color1.copy( this.light.color );\n\t\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tmesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t\t};\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\t\tsize = size || 10;\n\t\t\tdivisions = divisions || 10;\n\t\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\t\tvar center = divisions / 2;\n\t\t\tvar step = size / divisions;\n\t\t\tvar halfSize = size / 2;\n\n\t\t\tvar vertices = [], colors = [];\n\n\t\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\t\tLineSegments.call( this, geometry, material );\n\n\t\t\tthis.type = 'GridHelper';\n\n\t\t}\n\n\t\tGridHelper.prototype = Object.create( LineSegments.prototype );\n\t\tGridHelper.prototype.constructor = GridHelper;\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\t\tradius = radius || 10;\n\t\t\tradials = radials || 16;\n\t\t\tcircles = circles || 8;\n\t\t\tdivisions = divisions || 64;\n\t\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\n\t\t\t// create the radials\n\n\t\t\tfor ( var i = 0; i <= radials; i ++ ) {\n\n\t\t\t\tvar v = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\t\tvar x = Math.sin( v ) * radius;\n\t\t\t\tvar z = Math.cos( v ) * radius;\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( x, 0, z );\n\n\t\t\t\tvar color = ( i & 1 ) ? color1 : color2;\n\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\t// create the circles\n\n\t\t\tfor ( var i$1 = 0; i$1 <= circles; i$1 ++ ) {\n\n\t\t\t\tvar color$1 = ( i$1 & 1 ) ? color1 : color2;\n\n\t\t\t\tvar r = radius - ( radius / circles * i$1 );\n\n\t\t\t\tfor ( var j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t\t// first vertex\n\n\t\t\t\t\tvar v$1 = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\t\tvar x$1 = Math.sin( v$1 ) * r;\n\t\t\t\t\tvar z$1 = Math.cos( v$1 ) * r;\n\n\t\t\t\t\tvertices.push( x$1, 0, z$1 );\n\t\t\t\t\tcolors.push( color$1.r, color$1.g, color$1.b );\n\n\t\t\t\t\t// second vertex\n\n\t\t\t\t\tv$1 = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\t\tx$1 = Math.sin( v$1 ) * r;\n\t\t\t\t\tz$1 = Math.cos( v$1 ) * r;\n\n\t\t\t\t\tvertices.push( x$1, 0, z$1 );\n\t\t\t\t\tcolors.push( color$1.r, color$1.g, color$1.b );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\t\tLineSegments.call( this, geometry, material );\n\n\t\t\tthis.type = 'PolarGridHelper';\n\n\t\t}\n\n\t\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\t\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\t\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\t\tObject3D.call(this);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\n\t\t\tthis.color = color;\n\n\t\t\tif ( size === undefined ) { size = 1; }\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t\t- size, size, 0,\n\t\t\t\tsize, size, 0,\n\t\t\t\tsize, - size, 0,\n\t\t\t\t- size, - size, 0,\n\t\t\t\t- size, size, 0\n\t\t\t], 3 ) );\n\n\t\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\t\tthis.lightPlane = new Line( geometry, material );\n\t\t\tthis.add( this.lightPlane );\n\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\t\tthis.targetLine = new Line( geometry, material );\n\t\t\tthis.add( this.targetLine );\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\t\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\t\tDirectionalLightHelper.prototype.dispose = function dispose () {\n\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\n\t\t};\n\n\t\tDirectionalLightHelper.prototype.update = function update () {\n\n\t\t\t_v1$5.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\t_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\t_v3$1.subVectors( _v2$3, _v1$5 );\n\n\t\t\tthis.lightPlane.lookAt( _v2$3 );\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt( _v2$3 );\n\t\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t\t};\n\n\tvar _vector$b = new Vector3();\n\tvar _camera = new Camera();\n\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\t\tfunction CameraHelper( camera ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\n\t\t\tvar pointMap = {};\n\n\t\t\t// colors\n\n\t\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\t\tvar colorCone = new Color( 0xff0000 );\n\t\t\tvar colorUp = new Color( 0x00aaff );\n\t\t\tvar colorTarget = new Color( 0xffffff );\n\t\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t\t// near\n\n\t\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t\t// far\n\n\t\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t\t// sides\n\n\t\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t\t// cone\n\n\t\t\taddLine( 'p', 'n1', colorCone );\n\t\t\taddLine( 'p', 'n2', colorCone );\n\t\t\taddLine( 'p', 'n3', colorCone );\n\t\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t\t// up\n\n\t\t\taddLine( 'u1', 'u2', colorUp );\n\t\t\taddLine( 'u2', 'u3', colorUp );\n\t\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t\t// target\n\n\t\t\taddLine( 'c', 't', colorTarget );\n\t\t\taddLine( 'p', 'c', colorCross );\n\n\t\t\t// cross\n\n\t\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\t\tfunction addLine( a, b, color ) {\n\n\t\t\t\taddPoint( a, color );\n\t\t\t\taddPoint( b, color );\n\n\t\t\t}\n\n\t\t\tfunction addPoint( id, color ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\t\tLineSegments.call( this, geometry, material );\n\n\t\t\tthis.type = 'CameraHelper';\n\n\t\t\tthis.camera = camera;\n\t\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\t\tthis.matrix = camera.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\n\t\t\tthis.pointMap = pointMap;\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\t\tCameraHelper.prototype.constructor = CameraHelper;\n\n\t\tCameraHelper.prototype.update = function update () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar pointMap = this.pointMap;\n\n\t\t\tvar w = 1, h = 1;\n\n\t\t\t// we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t\t// center / target\n\n\t\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t\t// near\n\n\t\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t\t// far\n\n\t\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t\t// up\n\n\t\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t\t// cross\n\n\t\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t};\n\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$b.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tvar _box$3 = new Box3();\n\n\t\tfunction BoxHelper( object, color ) {\n\t\t\tif ( color === void 0 ) color = 0xffff00;\n\n\n\t\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t\tthis.object = object;\n\t\t\tthis.type = 'BoxHelper';\n\n\t\t\tthis.matrixAutoUpdate = false;\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\t\tBoxHelper.prototype.constructor = BoxHelper;\n\n\t\tBoxHelper.prototype.update = function update ( object ) {\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t\t}\n\n\t\t\tif ( this.object !== undefined ) {\n\n\t\t\t\t_box$3.setFromObject( this.object );\n\n\t\t\t}\n\n\t\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\t\tvar min = _box$3.min;\n\t\t\tvar max = _box$3.max;\n\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\n\t\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\tthis.geometry.computeBoundingSphere();\n\n\n\t\t};\n\n\t\tBoxHelper.prototype.setFromObject = function setFromObject ( object ) {\n\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tBoxHelper.prototype.copy = function copy ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.object = source.object;\n\n\t\t\treturn this;\n\n\t\t};\n\n\tfunction Box3Helper( box, color ) {\n\t\t\tif ( color === void 0 ) color = 0xffff00;\n\n\n\t\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t\tthis.box = box;\n\n\t\t\tthis.type = 'Box3Helper';\n\n\t\t\tthis.geometry.computeBoundingSphere();\n\n\t\t}\n\n\t\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\t\tBox3Helper.prototype.constructor = Box3Helper;\n\n\t\tBox3Helper.prototype.updateMatrixWorld = function updateMatrixWorld ( force ) {\n\n\t\t\tvar box = this.box;\n\n\t\t\tif ( box.isEmpty() ) { return; }\n\n\t\t\tbox.getCenter( this.position );\n\n\t\t\tbox.getSize( this.scale );\n\n\t\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\t\tLineSegments.prototype.updateMatrixWorld.call( this, force );\n\n\t\t};\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t\tthis.type = 'PlaneHelper';\n\n\t\t\tthis.plane = plane;\n\n\t\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\t\tgeometry2.computeBoundingSphere();\n\n\t\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t\t}\n\n\t\tPlaneHelper.prototype = Object.create( Line.prototype );\n\t\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\t\tPlaneHelper.prototype.updateMatrixWorld = function updateMatrixWorld ( force ) {\n\n\t\t\tvar scale = - this.plane.constant;\n\n\t\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt( this.plane.normal );\n\n\t\t\tLine.prototype.updateMatrixWorld.call( this, force );\n\n\t\t};\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\t\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t\tObject3D.call(this);\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tthis.type = 'ArrowHelper';\n\n\t\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\t\tif ( length === undefined ) { length = 1; }\n\t\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t\t}\n\n\t\t\tthis.position.copy( origin );\n\n\t\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add( this.line );\n\n\t\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add( this.cone );\n\n\t\t\tthis.setDirection( dir );\n\t\t\tthis.setLength( length, headLength, headWidth );\n\n\t\t}\n\n\t\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\t\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\t\tArrowHelper.prototype.setDirection = function setDirection ( dir ) {\n\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t\t}\n\n\t\t};\n\n\t\tArrowHelper.prototype.setLength = function setLength ( length, headLength, headWidth ) {\n\n\t\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\t\tthis.line.updateMatrix();\n\n\t\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\n\t\t};\n\n\t\tArrowHelper.prototype.setColor = function setColor ( color ) {\n\n\t\t\tthis.line.material.color.set( color );\n\t\t\tthis.cone.material.color.set( color );\n\n\t\t};\n\n\t\tArrowHelper.prototype.copy = function copy ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tthis.line.copy( source.line );\n\t\t\tthis.cone.copy( source.cone );\n\n\t\t\treturn this;\n\n\t\t};\n\n\tfunction AxesHelper( size ) {\n\t\t\tif ( size === void 0 ) size = 1;\n\n\n\t\t\tvar vertices = [\n\t\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t\t0, 0, 0,\t0, 0, size\n\t\t\t];\n\n\t\t\tvar colors = [\n\t\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t\t];\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\t\tLineSegments.call( this, geometry, material );\n\n\t\t\tthis.type = 'AxesHelper';\n\n\t\t}\n\n\t\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\t\tAxesHelper.prototype.constructor = AxesHelper;\n\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow( 2, LOD_MAX );\n\n\t// The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\tvar EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\t// The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\tvar MAX_SAMPLES = 20;\n\n\tvar ENCODINGS = {};\n\tENCODINGS[ LinearEncoding ] = 0;\n\tENCODINGS[ sRGBEncoding ] = 1;\n\tENCODINGS[ RGBEEncoding ] = 2;\n\tENCODINGS[ RGBM7Encoding ] = 3;\n\tENCODINGS[ RGBM16Encoding ] = 4;\n\tENCODINGS[ RGBDEncoding ] = 5;\n\tENCODINGS[ GammaEncoding ] = 6;\n\n\tvar _flatCamera = new OrthographicCamera();\n\tvar ref = _createPlanes();\n\tvar _lodPlanes = ref._lodPlanes;\n\tvar _sizeLods = ref._sizeLods;\n\tvar _sigmas = ref._sigmas;\n\tvar _oldTarget = null;\n\n\t// Golden Ratio\n\tvar PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar INV_PHI = 1 / PHI;\n\n\t// Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\tvar _axisDirections = [\n\t\tnew Vector3( 1, 1, 1 ),\n\t\tnew Vector3( - 1, 1, 1 ),\n\t\tnew Vector3( 1, 1, - 1 ),\n\t\tnew Vector3( - 1, 1, - 1 ),\n\t\tnew Vector3( 0, PHI, INV_PHI ),\n\t\tnew Vector3( 0, PHI, - INV_PHI ),\n\t\tnew Vector3( INV_PHI, 0, PHI ),\n\t\tnew Vector3( - INV_PHI, 0, PHI ),\n\t\tnew Vector3( PHI, INV_PHI, 0 ),\n\t\tnew Vector3( - PHI, INV_PHI, 0 ) ];\n\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar PMREMGenerator = function PMREMGenerator( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._blurMaterial = _getBlurShader( MAX_SAMPLES );\n\t\tthis._equirectShader = null;\n\t\tthis._cubemapShader = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t};\n\n\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\tPMREMGenerator.prototype.fromScene = function fromScene ( scene, sigma, near, far ) {\n\t\t\tif ( sigma === void 0 ) sigma = 0;\n\t\t\tif ( near === void 0 ) near = 0.1;\n\t\t\tif ( far === void 0 ) far = 100;\n\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\tvar cubeUVRenderTarget = this._allocateTargets();\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t};\n\n\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\tPMREMGenerator.prototype.fromEquirectangular = function fromEquirectangular ( equirectangular ) {\n\n\t\treturn this._fromTexture( equirectangular );\n\n\t};\n\n\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\tPMREMGenerator.prototype.fromCubemap = function fromCubemap ( cubemap ) {\n\n\t\treturn this._fromTexture( cubemap );\n\n\t};\n\n\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\tPMREMGenerator.prototype.compileCubemapShader = function compileCubemapShader () {\n\n\t\tif ( this._cubemapShader === null ) {\n\n\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\tthis._compileMaterial( this._cubemapShader );\n\n\t\t}\n\n\t};\n\n\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\tPMREMGenerator.prototype.compileEquirectangularShader = function compileEquirectangularShader () {\n\n\t\tif ( this._equirectShader === null ) {\n\n\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\tthis._compileMaterial( this._equirectShader );\n\n\t\t}\n\n\t};\n\n\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\tPMREMGenerator.prototype.dispose = function dispose () {\n\n\t\tthis._blurMaterial.dispose();\n\n\t\tif ( this._cubemapShader !== null ) { this._cubemapShader.dispose(); }\n\t\tif ( this._equirectShader !== null ) { this._equirectShader.dispose(); }\n\n\t\tfor ( var i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t};\n\n\t// private interface\n\n\tPMREMGenerator.prototype._cleanup = function _cleanup ( outputTarget ) {\n\n\t\tthis._pingPongRenderTarget.dispose();\n\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t};\n\n\tPMREMGenerator.prototype._fromTexture = function _fromTexture ( texture ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\tvar cubeUVRenderTarget = this._allocateTargets( texture );\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t};\n\n\tPMREMGenerator.prototype._allocateTargets = function _allocateTargets ( texture ) { // warning: null texture is valid\n\n\t\tvar params = {\n\t\t\tmagFilter: NearestFilter,\n\t\t\tminFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: UnsignedByteType,\n\t\t\tformat: RGBEFormat,\n\t\t\tencoding: _isLDR( texture ) ? texture.encoding : RGBEEncoding,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tvar cubeUVRenderTarget = _createRenderTarget( params );\n\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\tthis._pingPongRenderTarget = _createRenderTarget( params );\n\t\treturn cubeUVRenderTarget;\n\n\t};\n\n\tPMREMGenerator.prototype._compileMaterial = function _compileMaterial ( material ) {\n\n\t\tvar tmpMesh = new Mesh( _lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t};\n\n\tPMREMGenerator.prototype._sceneToCubeUV = function _sceneToCubeUV ( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tvar fov = 90;\n\t\tvar aspect = 1;\n\t\tvar cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tvar upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\tvar forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\tvar renderer = this._renderer;\n\n\t\tvar outputEncoding = renderer.outputEncoding;\n\t\tvar toneMapping = renderer.toneMapping;\n\t\tvar clearColor = renderer.getClearColor();\n\t\tvar clearAlpha = renderer.getClearAlpha();\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.outputEncoding = LinearEncoding;\n\n\t\tvar background = scene.background;\n\t\tif ( background && background.isColor ) {\n\n\t\t\tbackground.convertSRGBToLinear();\n\t\t\t// Convert linear to RGBE\n\t\t\tvar maxComponent = Math.max( background.r, background.g, background.b );\n\t\t\tvar fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );\n\t\t\tbackground = background.multiplyScalar( Math.pow( 2.0, - fExp ) );\n\t\t\tvar alpha = ( fExp + 128.0 ) / 255.0;\n\t\t\trenderer.setClearColor( background, alpha );\n\t\t\tscene.background = null;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar col = i % 3;\n\t\t\tif ( col == 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.outputEncoding = outputEncoding;\n\t\trenderer.setClearColor( clearColor, clearAlpha );\n\n\t};\n\n\tPMREMGenerator.prototype._textureToCubeUV = function _textureToCubeUV ( texture, cubeUVRenderTarget ) {\n\n\t\tvar renderer = this._renderer;\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tif ( this._cubemapShader == null ) {\n\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this._equirectShader == null ) {\n\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\tvar mesh = new Mesh( _lodPlanes[ 0 ], material );\n\n\t\tvar uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tif ( ! texture.isCubeTexture ) {\n\n\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t}\n\n\t\tuniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\t\tuniforms[ 'outputEncoding' ].value = ENCODINGS[ cubeUVRenderTarget.texture.encoding ];\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t};\n\n\tPMREMGenerator.prototype._applyPMREM = function _applyPMREM ( cubeUVRenderTarget ) {\n\n\t\tvar renderer = this._renderer;\n\t\tvar autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tfor ( var i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sigma = Math.sqrt( _sigmas[ i ] * _sigmas[ i ] - _sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\n\t\t\tvar poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t};\n\n\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\tPMREMGenerator.prototype._blur = function _blur ( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tvar pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t};\n\n\tPMREMGenerator.prototype._halfBlur = function _halfBlur ( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tvar renderer = this._renderer;\n\t\tvar blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tvar STANDARD_DEVIATIONS = 3;\n\n\t\tvar blurMesh = new Mesh( _lodPlanes[ lodOut ], blurMaterial );\n\t\tvar blurUniforms = blurMaterial.uniforms;\n\n\t\tvar pixels = _sizeLods[ lodIn ] - 1;\n\t\tvar radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tvar samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( (\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES) );\n\n\t\t}\n\n\t\tvar weights = [];\n\t\tvar sum = 0;\n\n\t\tfor ( var i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tvar x$1 = i / sigmaPixels;\n\t\t\tvar weight = Math.exp( - x$1 * x$1 / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i == 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i$1 = 0; i$1 < weights.length; i$1 ++ ) {\n\n\t\t\tweights[ i$1 ] = weights[ i$1 ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\t\tblurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\t\tblurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\n\t\tvar outputSize = _sizeLods[ lodOut ];\n\t\tvar x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\tvar y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) + 2 * outputSize * ( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t};\n\n\tfunction _isLDR( texture ) {\n\n\t\tif ( texture === undefined || texture.type !== UnsignedByteType ) { return false; }\n\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\n\t}\n\n\tfunction _createPlanes() {\n\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\n\t\tvar lod = LOD_MAX;\n\n\t\tfor ( var i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sizeLod = Math.pow( 2, lod );\n\t\t\t_sizeLods.push( sizeLod );\n\t\t\tvar sigma = 1.0 / sizeLod;\n\n\t\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t\t} else if ( i == 0 ) {\n\n\t\t\t\tsigma = 0;\n\n\t\t\t}\n\n\t\t\t_sigmas.push( sigma );\n\n\t\t\tvar texelSize = 1.0 / ( sizeLod - 1 );\n\t\t\tvar min = - texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\n\t\t\tvar position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\t\tvar uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\t\tvar faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\t\tfor ( var face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\t\tvar x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : - 1;\n\t\t\t\tvar coordinates = [\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y + 1, 0\n\t\t\t\t];\n\t\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\t\tvar fill = [ face, face, face, face, face, face ];\n\t\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t\t}\n\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t\t_lodPlanes.push( planes );\n\n\t\t\tif ( lod > LOD_MIN ) {\n\n\t\t\t\tlod --;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };\n\n\t}\n\n\tfunction _createRenderTarget( params ) {\n\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _setViewport( target, x, y, width, height ) {\n\n\t\ttarget.viewport.set( x, y, width, height );\n\t\ttarget.scissor.set( x, y, width, height );\n\n\t}\n\n\tfunction _getBlurShader( maxSamples ) {\n\n\t\tvar weights = new Float32Array( maxSamples );\n\t\tvar poleAxis = new Vector3( 0, 1, 0 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tname: 'SphericalGaussianBlur',\n\n\t\t\tdefines: { 'n': maxSamples },\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'samples': { value: 1 },\n\t\t\t\t'weights': { value: weights },\n\t\t\t\t'latitudinal': { value: false },\n\t\t\t\t'dTheta': { value: 0 },\n\t\t\t\t'mipInt': { value: 0 },\n\t\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: /* glsl */(\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t\" + (_getEncodings()) + \"\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getEquirectShader() {\n\n\t\tvar texelSize = new Vector2( 1, 1 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tname: 'EquirectangularToCubeUV',\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'texelSize': { value: texelSize },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: /* glsl */(\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t\" + (_getEncodings()) + \"\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCubemapShader() {\n\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tname: 'CubemapToCubeUV',\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: /* glsl */(\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t\" + (_getEncodings()) + \"\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCommonVertexShader() {\n\n\t\treturn /* glsl */\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\";\n\n\t}\n\n\tfunction _getEncodings() {\n\n\t\treturn /* glsl */\"\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\";\n\n\t}\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\n\t} );\n\n\tFrustum.prototype.setFromMatrix = function ( m ) {\n\n\t\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\t\treturn this.setFromProjectionMatrix( m );\n\n\t};\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( MathUtils, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn MathUtils.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn MathUtils.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix3( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix4( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( Mesh.prototype, {\n\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( Mesh.prototype, {\n\n\t\tdrawMode: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\t\treturn TrianglesDrawMode;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InstancedBufferGeometry.prototype, {\n\n\t\tmaxInstancedCount: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );\n\t\t\t\treturn this.instanceCount;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );\n\t\t\t\tthis.instanceCount = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Raycaster.prototype, {\n\n\t\tlinePrecision: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\treturn this.params.Line.threshold;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\tthis.params.Line.threshold = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Scene.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tconsole.error( 'THREE.Scene: .dispose() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhysicalMaterial.prototype, {\n\n\t\ttransparency: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.' );\n\t\t\t\treturn this.transmission;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.' );\n\t\t\t\tthis.transmission = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\t\treturn this.xr;\n\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\t\t\t\treturn 1.0;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\t\treturn new WebGLCubeRenderTarget( width, options );\n\n\t}\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","console.warn( \"THREE.OrbitControls: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/#manual/en/introduction/Installation.\" );\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\tvar twoPI = 2 * Math.PI;\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\n\t\t\tvar min = scope.minAzimuthAngle;\n\t\t\tvar max = scope.maxAzimuthAngle;\n\n\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\tif ( min < max ) {\n\n\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\t\tonMouseDown( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\t\tonMouseMove( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\t\tonMouseUp( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase THREE.MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove, false );\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'pointerdown', onPointerDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// make sure element can receive keys.\n\n\tif ( scope.domElement.tabIndex === - 1 ) {\n\n\t\tscope.domElement.tabIndex = 0;\n\n\t}\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nTHREE.MapControls = function ( object, domElement ) {\n\n\tTHREE.OrbitControls.call( this, object, domElement );\n\n\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n\tthis.touches.ONE = THREE.TOUCH.PAN;\n\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n};\n\nTHREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n","// Ensure ThreeJS is in global scope for the 'examples/'\nglobal.THREE = require('three');\n\n// Include any additional ThreeJS examples below\nrequire('three/examples/js/controls/OrbitControls');\n\nconst canvasSketch = require('canvas-sketch');\n\nconst settings = {\n  // dimensions: 'A4',\n  // dimensions: [,12],\n  // pixelsPerInch: 70,\n  // scaleToView: true,\n  // Make the loop animated\n  animate: true,\n  // Get a WebGL canvas rather than 2D\n  context: 'webgl',\n};\n\nconst sketch = ({ context }) => {\n  // Create a renderer\n  const renderer = new THREE.WebGLRenderer({\n    canvas: context.canvas,\n  });\n\n  // WebGL background color\n  renderer.setClearColor('#000', 1);\n\n  // Setup a camera\n  const camera = new THREE.PerspectiveCamera(50, 1, 0.01, 100);\n  camera.position.set(12, 2, -14);\n  camera.lookAt(new THREE.Vector3());\n\n  // Setup camera controller\n  const controls = new THREE.OrbitControls(camera, context.canvas);\n\n  // Setup your scene\n  const scene = new THREE.Scene();\n\n  // Setup a geometry\n  const geometry = new THREE.SphereGeometry(1, 32, 16);\n\n  const loader = new THREE.TextureLoader();\n  const textureEarth = loader.load('earth.jpg');\n  const moonTexture = loader.load('moon.jpg');\n  const sunTexture = loader.load('sun.jpg');\n  const marsTexture = loader.load('mars.jpg');\n  const jupiterTexture = loader.load('jupiter.jpg');\n\n  const milkywayTexture = loader.load('milky_way.jpg');\n  // milkywayTexture.wrapS = milkywayTexture.wrapT = THREE.RepeatWrapping;\n  // milkywayTexture.repeat.set(1, 3);\n\n  scene.background = milkywayTexture;\n\n  // Setup a material\n  const earthMaterial = new THREE.MeshStandardMaterial({\n    roughness: 1,\n    metalness: 0,\n    map: textureEarth,\n  });\n  const earthGroup = new THREE.Group();\n\n  const moonMaterial = new THREE.MeshStandardMaterial({\n    roughness: 1,\n    metalness: 0,\n    map: moonTexture,\n  });\n  const moonGroup = new THREE.Group();\n\n  const sunMaterial = new THREE.MeshBasicMaterial({\n    roughness: 1,\n    metalness: 0,\n    map: sunTexture,\n  });\n\n  const marsMaterial = new THREE.MeshStandardMaterial({\n    roughness: 1,\n    metalness: 0,\n    map: marsTexture,\n  });\n  const marsGroup = new THREE.Group();\n\n  const jupiterMaterial = new THREE.MeshStandardMaterial({\n    roughness: 1,\n    metalness: 0,\n    map: jupiterTexture,\n  });\n  const jupiterGroup = new THREE.Group();\n\n  // Setup a mesh with geometry + material\n  const earthMesh = new THREE.Mesh(geometry, earthMaterial);\n  earthMesh.position.set(10, 1, 0);\n  earthGroup.add(earthMesh);\n  // scene.add(earthMesh);\n\n  const moonMesh = new THREE.Mesh(geometry, moonMaterial);\n  moonMesh.position.set(1.4, 0.4, 0);\n  moonMesh.scale.setScalar(0.25);\n  moonGroup.add(moonMesh);\n  earthMesh.add(moonGroup);\n\n  const marsMesh = new THREE.Mesh(geometry, marsMaterial);\n  marsMesh.position.set(15, 1.2, 0);\n  marsGroup.add(marsMesh);\n\n  const jupiterMesh = new THREE.Mesh(geometry, jupiterMaterial);\n  jupiterMesh.position.set(22, -1, 0);\n  jupiterMesh.scale.setScalar(1.5);\n  jupiterGroup.add(jupiterMesh);\n\n  const sunMesh = new THREE.Mesh(geometry, sunMaterial);\n  sunMesh.position.set(0, 0, 0);\n  sunMesh.scale.setScalar(4);\n  scene.add(sunMesh);\n  scene.add(earthGroup);\n  scene.add(marsGroup);\n  scene.add(jupiterGroup);\n\n  const light = new THREE.PointLight('white', 2);\n  light.position.set(0, 0, 0);\n  scene.add(light);\n\n  // scene.add(new THREE.GridHelper(5, 50));\n  // scene.add(new THREE.PointLightHelper(light, 0.1));\n\n  // draw each frame\n  return {\n    // Handle resize events here\n    resize({ pixelRatio, viewportWidth, viewportHeight }) {\n      renderer.setPixelRatio(pixelRatio);\n      renderer.setSize(viewportWidth, viewportHeight, false);\n      camera.aspect = viewportWidth / viewportHeight;\n      camera.updateProjectionMatrix();\n    },\n    // Update & render your scene here\n    render({ time }) {\n      console.log(time);\n      earthMesh.rotation.y = time * 0.4;\n      earthGroup.rotation.y = time * 0.3;\n      moonMesh.rotation.y = time * 0.2;\n      moonGroup.rotation.y = time * 0.7;\n      marsMesh.rotation.y = time * 0.4;\n      marsGroup.rotation.y = time * 0.15;\n      jupiterMesh.rotation.y = time * 0.7;\n      jupiterGroup.rotation.y = time * 0.04;\n      sunMesh.rotation.y = time * 0.02;\n\n      controls.update();\n      renderer.render(scene, camera);\n    },\n    // Dispose of events & renderer for cleaner hot-reloading\n    unload() {\n      controls.dispose();\n      renderer.dispose();\n    },\n  };\n};\n\ncanvasSketch(sketch, settings);\n","\nglobal.CANVAS_SKETCH_DEFAULT_STORAGE_KEY = window.location.href;\n"]}